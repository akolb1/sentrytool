// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package sentry_generic_policy_service

import (
	"bytes"
	"reflect"
	"database/sql/driver"
	"errors"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"github.com/akolb1/sentrytool/sentryapi/thrift/gen-go/sentry_common_service"
    "github.com/akolb1/sentrytool/sentryapi/thrift/gen-go/sentry_policy_service"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = sentry_common_service.GoUnusedProtection__
var _ = sentry_policy_service.GoUnusedProtection__
type TSentryGrantOption int64
const (
  TSentryGrantOption_TRUE TSentryGrantOption = 1
  TSentryGrantOption_FALSE TSentryGrantOption = 0
  TSentryGrantOption_UNSET TSentryGrantOption = -1
)

func (p TSentryGrantOption) String() string {
  switch p {
  case TSentryGrantOption_TRUE: return "TRUE"
  case TSentryGrantOption_FALSE: return "FALSE"
  case TSentryGrantOption_UNSET: return "UNSET"
  }
  return "<UNSET>"
}

func TSentryGrantOptionFromString(s string) (TSentryGrantOption, error) {
  switch s {
  case "TRUE": return TSentryGrantOption_TRUE, nil 
  case "FALSE": return TSentryGrantOption_FALSE, nil 
  case "UNSET": return TSentryGrantOption_UNSET, nil 
  }
  return TSentryGrantOption(0), fmt.Errorf("not a valid TSentryGrantOption string")
}


func TSentryGrantOptionPtr(v TSentryGrantOption) *TSentryGrantOption { return &v }

func (p TSentryGrantOption) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TSentryGrantOption) UnmarshalText(text []byte) error {
q, err := TSentryGrantOptionFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TSentryGrantOption) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TSentryGrantOption(v)
return nil
}

func (p * TSentryGrantOption) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TSentryResponseStatus *sentry_common_service.TSentryResponseStatus

func TSentryResponseStatusPtr(v TSentryResponseStatus) *TSentryResponseStatus { return &v }

// Attributes:
//  - Type
//  - Name
type TAuthorizable struct {
  Type string `thrift:"type,1,required" db:"type" json:"type"`
  Name string `thrift:"name,2,required" db:"name" json:"name"`
}

func NewTAuthorizable() *TAuthorizable {
  return &TAuthorizable{}
}


func (p *TAuthorizable) GetType() string {
  return p.Type
}

func (p *TAuthorizable) GetName() string {
  return p.Name
}
func (p *TAuthorizable) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetType bool = false;
  var issetName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetType = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetName = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"));
  }
  if !issetName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"));
  }
  return nil
}

func (p *TAuthorizable)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *TAuthorizable)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *TAuthorizable) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TAuthorizable"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAuthorizable) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteString(string(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *TAuthorizable) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *TAuthorizable) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAuthorizable(%+v)", *p)
}

// Attributes:
//  - Component
//  - ServiceName
//  - Authorizables
//  - Action
//  - CreateTime
//  - GrantorPrincipal
//  - GrantOption
type TSentryPrivilege struct {
  Component string `thrift:"component,1,required" db:"component" json:"component"`
  ServiceName string `thrift:"serviceName,2,required" db:"serviceName" json:"serviceName"`
  Authorizables []*TAuthorizable `thrift:"authorizables,3,required" db:"authorizables" json:"authorizables"`
  Action string `thrift:"action,4,required" db:"action" json:"action"`
  CreateTime *int64 `thrift:"createTime,5" db:"createTime" json:"createTime,omitempty"`
  GrantorPrincipal *string `thrift:"grantorPrincipal,6" db:"grantorPrincipal" json:"grantorPrincipal,omitempty"`
  GrantOption TSentryGrantOption `thrift:"grantOption,7" db:"grantOption" json:"grantOption,omitempty"`
}

func NewTSentryPrivilege() *TSentryPrivilege {
  return &TSentryPrivilege{
GrantOption: 0,
}
}


func (p *TSentryPrivilege) GetComponent() string {
  return p.Component
}

func (p *TSentryPrivilege) GetServiceName() string {
  return p.ServiceName
}

func (p *TSentryPrivilege) GetAuthorizables() []*TAuthorizable {
  return p.Authorizables
}

func (p *TSentryPrivilege) GetAction() string {
  return p.Action
}
var TSentryPrivilege_CreateTime_DEFAULT int64
func (p *TSentryPrivilege) GetCreateTime() int64 {
  if !p.IsSetCreateTime() {
    return TSentryPrivilege_CreateTime_DEFAULT
  }
return *p.CreateTime
}
var TSentryPrivilege_GrantorPrincipal_DEFAULT string
func (p *TSentryPrivilege) GetGrantorPrincipal() string {
  if !p.IsSetGrantorPrincipal() {
    return TSentryPrivilege_GrantorPrincipal_DEFAULT
  }
return *p.GrantorPrincipal
}
var TSentryPrivilege_GrantOption_DEFAULT TSentryGrantOption = 0

func (p *TSentryPrivilege) GetGrantOption() TSentryGrantOption {
  return p.GrantOption
}
func (p *TSentryPrivilege) IsSetCreateTime() bool {
  return p.CreateTime != nil
}

func (p *TSentryPrivilege) IsSetGrantorPrincipal() bool {
  return p.GrantorPrincipal != nil
}

func (p *TSentryPrivilege) IsSetGrantOption() bool {
  return p.GrantOption != TSentryPrivilege_GrantOption_DEFAULT
}

func (p *TSentryPrivilege) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetComponent bool = false;
  var issetServiceName bool = false;
  var issetAuthorizables bool = false;
  var issetAction bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetComponent = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetServiceName = true
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthorizables = true
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAction = true
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetComponent{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Component is not set"));
  }
  if !issetServiceName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ServiceName is not set"));
  }
  if !issetAuthorizables{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Authorizables is not set"));
  }
  if !issetAction{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Action is not set"));
  }
  return nil
}

func (p *TSentryPrivilege)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Component = v
}
  return nil
}

func (p *TSentryPrivilege)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ServiceName = v
}
  return nil
}

func (p *TSentryPrivilege)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TAuthorizable, 0, size)
  p.Authorizables =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &TAuthorizable{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Authorizables = append(p.Authorizables, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TSentryPrivilege)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Action = v
}
  return nil
}

func (p *TSentryPrivilege)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CreateTime = &v
}
  return nil
}

func (p *TSentryPrivilege)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.GrantorPrincipal = &v
}
  return nil
}

func (p *TSentryPrivilege)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := TSentryGrantOption(v)
  p.GrantOption = temp
}
  return nil
}

func (p *TSentryPrivilege) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TSentryPrivilege"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSentryPrivilege) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("component", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:component: ", p), err) }
  if err := oprot.WriteString(string(p.Component)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.component (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:component: ", p), err) }
  return err
}

func (p *TSentryPrivilege) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("serviceName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:serviceName: ", p), err) }
  if err := oprot.WriteString(string(p.ServiceName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.serviceName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:serviceName: ", p), err) }
  return err
}

func (p *TSentryPrivilege) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authorizables", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:authorizables: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Authorizables)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Authorizables {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:authorizables: ", p), err) }
  return err
}

func (p *TSentryPrivilege) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("action", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:action: ", p), err) }
  if err := oprot.WriteString(string(p.Action)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.action (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:action: ", p), err) }
  return err
}

func (p *TSentryPrivilege) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetCreateTime() {
    if err := oprot.WriteFieldBegin("createTime", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:createTime: ", p), err) }
    if err := oprot.WriteI64(int64(*p.CreateTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.createTime (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:createTime: ", p), err) }
  }
  return err
}

func (p *TSentryPrivilege) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetGrantorPrincipal() {
    if err := oprot.WriteFieldBegin("grantorPrincipal", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:grantorPrincipal: ", p), err) }
    if err := oprot.WriteString(string(*p.GrantorPrincipal)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.grantorPrincipal (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:grantorPrincipal: ", p), err) }
  }
  return err
}

func (p *TSentryPrivilege) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetGrantOption() {
    if err := oprot.WriteFieldBegin("grantOption", thrift.I32, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:grantOption: ", p), err) }
    if err := oprot.WriteI32(int32(p.GrantOption)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.grantOption (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:grantOption: ", p), err) }
  }
  return err
}

func (p *TSentryPrivilege) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSentryPrivilege(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - RoleName
//  - Component
type TCreateSentryRoleRequest struct {
  ProtocolVersion int32 `thrift:"protocol_version,1,required" db:"protocol_version" json:"protocol_version"`
  RequestorUserName string `thrift:"requestorUserName,2,required" db:"requestorUserName" json:"requestorUserName"`
  RoleName string `thrift:"roleName,3,required" db:"roleName" json:"roleName"`
  Component string `thrift:"component,4,required" db:"component" json:"component"`
}

func NewTCreateSentryRoleRequest() *TCreateSentryRoleRequest {
  return &TCreateSentryRoleRequest{
ProtocolVersion: 2,
}
}


func (p *TCreateSentryRoleRequest) GetProtocolVersion() int32 {
  return p.ProtocolVersion
}

func (p *TCreateSentryRoleRequest) GetRequestorUserName() string {
  return p.RequestorUserName
}

func (p *TCreateSentryRoleRequest) GetRoleName() string {
  return p.RoleName
}

func (p *TCreateSentryRoleRequest) GetComponent() string {
  return p.Component
}
func (p *TCreateSentryRoleRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetProtocolVersion bool = false;
  var issetRequestorUserName bool = false;
  var issetRoleName bool = false;
  var issetComponent bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProtocolVersion = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRequestorUserName = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRoleName = true
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetComponent = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetProtocolVersion{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"));
  }
  if !issetRequestorUserName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"));
  }
  if !issetRoleName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoleName is not set"));
  }
  if !issetComponent{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Component is not set"));
  }
  return nil
}

func (p *TCreateSentryRoleRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ProtocolVersion = v
}
  return nil
}

func (p *TCreateSentryRoleRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RequestorUserName = v
}
  return nil
}

func (p *TCreateSentryRoleRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RoleName = v
}
  return nil
}

func (p *TCreateSentryRoleRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Component = v
}
  return nil
}

func (p *TCreateSentryRoleRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TCreateSentryRoleRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TCreateSentryRoleRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err) }
  return err
}

func (p *TCreateSentryRoleRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err) }
  if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err) }
  return err
}

func (p *TCreateSentryRoleRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("roleName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roleName: ", p), err) }
  if err := oprot.WriteString(string(p.RoleName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.roleName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roleName: ", p), err) }
  return err
}

func (p *TCreateSentryRoleRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("component", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:component: ", p), err) }
  if err := oprot.WriteString(string(p.Component)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.component (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:component: ", p), err) }
  return err
}

func (p *TCreateSentryRoleRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TCreateSentryRoleRequest(%+v)", *p)
}

// Attributes:
//  - Status
type TCreateSentryRoleResponse struct {
  Status TSentryResponseStatus `thrift:"status,1,required" db:"status" json:"status"`
}

func NewTCreateSentryRoleResponse() *TCreateSentryRoleResponse {
  return &TCreateSentryRoleResponse{}
}

var TCreateSentryRoleResponse_Status_DEFAULT TSentryResponseStatus
func (p *TCreateSentryRoleResponse) GetStatus() TSentryResponseStatus {
  if !p.IsSetStatus() {
    return TCreateSentryRoleResponse_Status_DEFAULT
  }
return *p.Status
}
func (p *TCreateSentryRoleResponse) IsSetStatus() bool {
  return p.Status != nil
}

func (p *TCreateSentryRoleResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetStatus bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetStatus = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetStatus{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"));
  }
  return nil
}

func (p *TCreateSentryRoleResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &sentry_common_service.TSentryResponseStatus{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *TCreateSentryRoleResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TCreateSentryRoleResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TCreateSentryRoleResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *TCreateSentryRoleResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TCreateSentryRoleResponse(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - RoleName
//  - Component
type TDropSentryRoleRequest struct {
  ProtocolVersion int32 `thrift:"protocol_version,1,required" db:"protocol_version" json:"protocol_version"`
  RequestorUserName string `thrift:"requestorUserName,2,required" db:"requestorUserName" json:"requestorUserName"`
  RoleName string `thrift:"roleName,3,required" db:"roleName" json:"roleName"`
  Component string `thrift:"component,4,required" db:"component" json:"component"`
}

func NewTDropSentryRoleRequest() *TDropSentryRoleRequest {
  return &TDropSentryRoleRequest{
ProtocolVersion: 2,
}
}


func (p *TDropSentryRoleRequest) GetProtocolVersion() int32 {
  return p.ProtocolVersion
}

func (p *TDropSentryRoleRequest) GetRequestorUserName() string {
  return p.RequestorUserName
}

func (p *TDropSentryRoleRequest) GetRoleName() string {
  return p.RoleName
}

func (p *TDropSentryRoleRequest) GetComponent() string {
  return p.Component
}
func (p *TDropSentryRoleRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetProtocolVersion bool = false;
  var issetRequestorUserName bool = false;
  var issetRoleName bool = false;
  var issetComponent bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProtocolVersion = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRequestorUserName = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRoleName = true
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetComponent = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetProtocolVersion{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"));
  }
  if !issetRequestorUserName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"));
  }
  if !issetRoleName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoleName is not set"));
  }
  if !issetComponent{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Component is not set"));
  }
  return nil
}

func (p *TDropSentryRoleRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ProtocolVersion = v
}
  return nil
}

func (p *TDropSentryRoleRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RequestorUserName = v
}
  return nil
}

func (p *TDropSentryRoleRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RoleName = v
}
  return nil
}

func (p *TDropSentryRoleRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Component = v
}
  return nil
}

func (p *TDropSentryRoleRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TDropSentryRoleRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDropSentryRoleRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err) }
  return err
}

func (p *TDropSentryRoleRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err) }
  if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err) }
  return err
}

func (p *TDropSentryRoleRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("roleName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roleName: ", p), err) }
  if err := oprot.WriteString(string(p.RoleName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.roleName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roleName: ", p), err) }
  return err
}

func (p *TDropSentryRoleRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("component", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:component: ", p), err) }
  if err := oprot.WriteString(string(p.Component)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.component (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:component: ", p), err) }
  return err
}

func (p *TDropSentryRoleRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDropSentryRoleRequest(%+v)", *p)
}

// Attributes:
//  - Status
type TDropSentryRoleResponse struct {
  Status *TSentryResponseStatus `thrift:"status,1,required" db:"status" json:"status"`
}

func NewTDropSentryRoleResponse() *TDropSentryRoleResponse {
  return &TDropSentryRoleResponse{}
}

var TDropSentryRoleResponse_Status_DEFAULT TSentryResponseStatus
func (p *TDropSentryRoleResponse) GetStatus() TSentryResponseStatus {
  if !p.IsSetStatus() {
    return TDropSentryRoleResponse_Status_DEFAULT
  }
return *p.Status
}
func (p *TDropSentryRoleResponse) IsSetStatus() bool {
  return p.Status != nil
}

func (p *TDropSentryRoleResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetStatus bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetStatus = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetStatus{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"));
  }
  return nil
}

func (p *TDropSentryRoleResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &sentry_common_service.TSentryResponseStatus{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *TDropSentryRoleResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TDropSentryRoleResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDropSentryRoleResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *TDropSentryRoleResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDropSentryRoleResponse(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - RoleName
//  - Component
//  - Groups
type TAlterSentryRoleAddGroupsRequest struct {
  ProtocolVersion int32 `thrift:"protocol_version,1,required" db:"protocol_version" json:"protocol_version"`
  RequestorUserName string `thrift:"requestorUserName,2,required" db:"requestorUserName" json:"requestorUserName"`
  RoleName string `thrift:"roleName,3,required" db:"roleName" json:"roleName"`
  Component string `thrift:"component,4,required" db:"component" json:"component"`
  Groups []string `thrift:"groups,5,required" db:"groups" json:"groups"`
}

func NewTAlterSentryRoleAddGroupsRequest() *TAlterSentryRoleAddGroupsRequest {
  return &TAlterSentryRoleAddGroupsRequest{
ProtocolVersion: 2,
}
}


func (p *TAlterSentryRoleAddGroupsRequest) GetProtocolVersion() int32 {
  return p.ProtocolVersion
}

func (p *TAlterSentryRoleAddGroupsRequest) GetRequestorUserName() string {
  return p.RequestorUserName
}

func (p *TAlterSentryRoleAddGroupsRequest) GetRoleName() string {
  return p.RoleName
}

func (p *TAlterSentryRoleAddGroupsRequest) GetComponent() string {
  return p.Component
}

func (p *TAlterSentryRoleAddGroupsRequest) GetGroups() []string {
  return p.Groups
}
func (p *TAlterSentryRoleAddGroupsRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetProtocolVersion bool = false;
  var issetRequestorUserName bool = false;
  var issetRoleName bool = false;
  var issetComponent bool = false;
  var issetGroups bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProtocolVersion = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRequestorUserName = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRoleName = true
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetComponent = true
    case 5:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGroups = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetProtocolVersion{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"));
  }
  if !issetRequestorUserName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"));
  }
  if !issetRoleName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoleName is not set"));
  }
  if !issetComponent{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Component is not set"));
  }
  if !issetGroups{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Groups is not set"));
  }
  return nil
}

func (p *TAlterSentryRoleAddGroupsRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ProtocolVersion = v
}
  return nil
}

func (p *TAlterSentryRoleAddGroupsRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RequestorUserName = v
}
  return nil
}

func (p *TAlterSentryRoleAddGroupsRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RoleName = v
}
  return nil
}

func (p *TAlterSentryRoleAddGroupsRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Component = v
}
  return nil
}

func (p *TAlterSentryRoleAddGroupsRequest)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Groups =  tSet
  for i := 0; i < size; i ++ {
var _elem1 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem1 = v
}
    p.Groups = append(p.Groups, _elem1)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TAlterSentryRoleAddGroupsRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TAlterSentryRoleAddGroupsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAlterSentryRoleAddGroupsRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err) }
  return err
}

func (p *TAlterSentryRoleAddGroupsRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err) }
  if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err) }
  return err
}

func (p *TAlterSentryRoleAddGroupsRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("roleName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roleName: ", p), err) }
  if err := oprot.WriteString(string(p.RoleName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.roleName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roleName: ", p), err) }
  return err
}

func (p *TAlterSentryRoleAddGroupsRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("component", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:component: ", p), err) }
  if err := oprot.WriteString(string(p.Component)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.component (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:component: ", p), err) }
  return err
}

func (p *TAlterSentryRoleAddGroupsRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("groups", thrift.SET, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:groups: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.STRING, len(p.Groups)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.Groups); i++ {
    for j := i+1; j<len(p.Groups); j++ {
      if reflect.DeepEqual(p.Groups[i],p.Groups[j]) { 
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Groups[i]))
      }
    }
  }
  for _, v := range p.Groups {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:groups: ", p), err) }
  return err
}

func (p *TAlterSentryRoleAddGroupsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAlterSentryRoleAddGroupsRequest(%+v)", *p)
}

// Attributes:
//  - Status
type TAlterSentryRoleAddGroupsResponse struct {
  Status *TSentryResponseStatus `thrift:"status,1,required" db:"status" json:"status"`
}

func NewTAlterSentryRoleAddGroupsResponse() *TAlterSentryRoleAddGroupsResponse {
  return &TAlterSentryRoleAddGroupsResponse{}
}

var TAlterSentryRoleAddGroupsResponse_Status_DEFAULT TSentryResponseStatus
func (p *TAlterSentryRoleAddGroupsResponse) GetStatus() TSentryResponseStatus {
  if !p.IsSetStatus() {
    return TAlterSentryRoleAddGroupsResponse_Status_DEFAULT
  }
return *p.Status
}
func (p *TAlterSentryRoleAddGroupsResponse) IsSetStatus() bool {
  return p.Status != nil
}

func (p *TAlterSentryRoleAddGroupsResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetStatus bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetStatus = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetStatus{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"));
  }
  return nil
}

func (p *TAlterSentryRoleAddGroupsResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &sentry_common_service.TSentryResponseStatus{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *TAlterSentryRoleAddGroupsResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TAlterSentryRoleAddGroupsResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAlterSentryRoleAddGroupsResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *TAlterSentryRoleAddGroupsResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAlterSentryRoleAddGroupsResponse(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - RoleName
//  - Component
//  - Groups
type TAlterSentryRoleDeleteGroupsRequest struct {
  ProtocolVersion int32 `thrift:"protocol_version,1,required" db:"protocol_version" json:"protocol_version"`
  RequestorUserName string `thrift:"requestorUserName,2,required" db:"requestorUserName" json:"requestorUserName"`
  RoleName string `thrift:"roleName,3,required" db:"roleName" json:"roleName"`
  Component string `thrift:"component,4,required" db:"component" json:"component"`
  Groups []string `thrift:"groups,5,required" db:"groups" json:"groups"`
}

func NewTAlterSentryRoleDeleteGroupsRequest() *TAlterSentryRoleDeleteGroupsRequest {
  return &TAlterSentryRoleDeleteGroupsRequest{
ProtocolVersion: 2,
}
}


func (p *TAlterSentryRoleDeleteGroupsRequest) GetProtocolVersion() int32 {
  return p.ProtocolVersion
}

func (p *TAlterSentryRoleDeleteGroupsRequest) GetRequestorUserName() string {
  return p.RequestorUserName
}

func (p *TAlterSentryRoleDeleteGroupsRequest) GetRoleName() string {
  return p.RoleName
}

func (p *TAlterSentryRoleDeleteGroupsRequest) GetComponent() string {
  return p.Component
}

func (p *TAlterSentryRoleDeleteGroupsRequest) GetGroups() []string {
  return p.Groups
}
func (p *TAlterSentryRoleDeleteGroupsRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetProtocolVersion bool = false;
  var issetRequestorUserName bool = false;
  var issetRoleName bool = false;
  var issetComponent bool = false;
  var issetGroups bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProtocolVersion = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRequestorUserName = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRoleName = true
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetComponent = true
    case 5:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGroups = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetProtocolVersion{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"));
  }
  if !issetRequestorUserName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"));
  }
  if !issetRoleName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoleName is not set"));
  }
  if !issetComponent{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Component is not set"));
  }
  if !issetGroups{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Groups is not set"));
  }
  return nil
}

func (p *TAlterSentryRoleDeleteGroupsRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ProtocolVersion = v
}
  return nil
}

func (p *TAlterSentryRoleDeleteGroupsRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RequestorUserName = v
}
  return nil
}

func (p *TAlterSentryRoleDeleteGroupsRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RoleName = v
}
  return nil
}

func (p *TAlterSentryRoleDeleteGroupsRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Component = v
}
  return nil
}

func (p *TAlterSentryRoleDeleteGroupsRequest)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Groups =  tSet
  for i := 0; i < size; i ++ {
var _elem2 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem2 = v
}
    p.Groups = append(p.Groups, _elem2)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TAlterSentryRoleDeleteGroupsRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TAlterSentryRoleDeleteGroupsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAlterSentryRoleDeleteGroupsRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err) }
  return err
}

func (p *TAlterSentryRoleDeleteGroupsRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err) }
  if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err) }
  return err
}

func (p *TAlterSentryRoleDeleteGroupsRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("roleName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roleName: ", p), err) }
  if err := oprot.WriteString(string(p.RoleName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.roleName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roleName: ", p), err) }
  return err
}

func (p *TAlterSentryRoleDeleteGroupsRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("component", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:component: ", p), err) }
  if err := oprot.WriteString(string(p.Component)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.component (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:component: ", p), err) }
  return err
}

func (p *TAlterSentryRoleDeleteGroupsRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("groups", thrift.SET, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:groups: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.STRING, len(p.Groups)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.Groups); i++ {
    for j := i+1; j<len(p.Groups); j++ {
      if reflect.DeepEqual(p.Groups[i],p.Groups[j]) { 
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Groups[i]))
      }
    }
  }
  for _, v := range p.Groups {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:groups: ", p), err) }
  return err
}

func (p *TAlterSentryRoleDeleteGroupsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAlterSentryRoleDeleteGroupsRequest(%+v)", *p)
}

// Attributes:
//  - Status
type TAlterSentryRoleDeleteGroupsResponse struct {
  Status *TSentryResponseStatus `thrift:"status,1,required" db:"status" json:"status"`
}

func NewTAlterSentryRoleDeleteGroupsResponse() *TAlterSentryRoleDeleteGroupsResponse {
  return &TAlterSentryRoleDeleteGroupsResponse{}
}

var TAlterSentryRoleDeleteGroupsResponse_Status_DEFAULT TSentryResponseStatus
func (p *TAlterSentryRoleDeleteGroupsResponse) GetStatus() TSentryResponseStatus {
  if !p.IsSetStatus() {
    return TAlterSentryRoleDeleteGroupsResponse_Status_DEFAULT
  }
return *p.Status
}
func (p *TAlterSentryRoleDeleteGroupsResponse) IsSetStatus() bool {
  return p.Status != nil
}

func (p *TAlterSentryRoleDeleteGroupsResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetStatus bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetStatus = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetStatus{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"));
  }
  return nil
}

func (p *TAlterSentryRoleDeleteGroupsResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &sentry_common_service.TSentryResponseStatus{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *TAlterSentryRoleDeleteGroupsResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TAlterSentryRoleDeleteGroupsResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAlterSentryRoleDeleteGroupsResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *TAlterSentryRoleDeleteGroupsResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAlterSentryRoleDeleteGroupsResponse(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - RoleName
//  - Component
//  - Privilege
type TAlterSentryRoleGrantPrivilegeRequest struct {
  ProtocolVersion int32 `thrift:"protocol_version,1,required" db:"protocol_version" json:"protocol_version"`
  RequestorUserName string `thrift:"requestorUserName,2,required" db:"requestorUserName" json:"requestorUserName"`
  RoleName string `thrift:"roleName,3,required" db:"roleName" json:"roleName"`
  Component string `thrift:"component,4,required" db:"component" json:"component"`
  Privilege *TSentryPrivilege `thrift:"privilege,5,required" db:"privilege" json:"privilege"`
}

func NewTAlterSentryRoleGrantPrivilegeRequest() *TAlterSentryRoleGrantPrivilegeRequest {
  return &TAlterSentryRoleGrantPrivilegeRequest{
ProtocolVersion: 2,
}
}


func (p *TAlterSentryRoleGrantPrivilegeRequest) GetProtocolVersion() int32 {
  return p.ProtocolVersion
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) GetRequestorUserName() string {
  return p.RequestorUserName
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) GetRoleName() string {
  return p.RoleName
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) GetComponent() string {
  return p.Component
}
var TAlterSentryRoleGrantPrivilegeRequest_Privilege_DEFAULT *TSentryPrivilege
func (p *TAlterSentryRoleGrantPrivilegeRequest) GetPrivilege() *TSentryPrivilege {
  if !p.IsSetPrivilege() {
    return TAlterSentryRoleGrantPrivilegeRequest_Privilege_DEFAULT
  }
return p.Privilege
}
func (p *TAlterSentryRoleGrantPrivilegeRequest) IsSetPrivilege() bool {
  return p.Privilege != nil
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetProtocolVersion bool = false;
  var issetRequestorUserName bool = false;
  var issetRoleName bool = false;
  var issetComponent bool = false;
  var issetPrivilege bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProtocolVersion = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRequestorUserName = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRoleName = true
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetComponent = true
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetPrivilege = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetProtocolVersion{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"));
  }
  if !issetRequestorUserName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"));
  }
  if !issetRoleName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoleName is not set"));
  }
  if !issetComponent{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Component is not set"));
  }
  if !issetPrivilege{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Privilege is not set"));
  }
  return nil
}

func (p *TAlterSentryRoleGrantPrivilegeRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ProtocolVersion = v
}
  return nil
}

func (p *TAlterSentryRoleGrantPrivilegeRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RequestorUserName = v
}
  return nil
}

func (p *TAlterSentryRoleGrantPrivilegeRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RoleName = v
}
  return nil
}

func (p *TAlterSentryRoleGrantPrivilegeRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Component = v
}
  return nil
}

func (p *TAlterSentryRoleGrantPrivilegeRequest)  ReadField5(iprot thrift.TProtocol) error {
  p.Privilege = &TSentryPrivilege{
  GrantOption:   0,
}
  if err := p.Privilege.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Privilege), err)
  }
  return nil
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TAlterSentryRoleGrantPrivilegeRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err) }
  return err
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err) }
  if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err) }
  return err
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("roleName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roleName: ", p), err) }
  if err := oprot.WriteString(string(p.RoleName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.roleName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roleName: ", p), err) }
  return err
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("component", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:component: ", p), err) }
  if err := oprot.WriteString(string(p.Component)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.component (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:component: ", p), err) }
  return err
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privilege", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:privilege: ", p), err) }
  if err := p.Privilege.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Privilege), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:privilege: ", p), err) }
  return err
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAlterSentryRoleGrantPrivilegeRequest(%+v)", *p)
}

// Attributes:
//  - Status
type TAlterSentryRoleGrantPrivilegeResponse struct {
  Status *TSentryResponseStatus `thrift:"status,1,required" db:"status" json:"status"`
}

func NewTAlterSentryRoleGrantPrivilegeResponse() *TAlterSentryRoleGrantPrivilegeResponse {
  return &TAlterSentryRoleGrantPrivilegeResponse{}
}

var TAlterSentryRoleGrantPrivilegeResponse_Status_DEFAULT TSentryResponseStatus
func (p *TAlterSentryRoleGrantPrivilegeResponse) GetStatus() TSentryResponseStatus {
  if !p.IsSetStatus() {
    return TAlterSentryRoleGrantPrivilegeResponse_Status_DEFAULT
  }
return *p.Status
}
func (p *TAlterSentryRoleGrantPrivilegeResponse) IsSetStatus() bool {
  return p.Status != nil
}

func (p *TAlterSentryRoleGrantPrivilegeResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetStatus bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetStatus = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetStatus{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"));
  }
  return nil
}

func (p *TAlterSentryRoleGrantPrivilegeResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &sentry_common_service.TSentryResponseStatus{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *TAlterSentryRoleGrantPrivilegeResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TAlterSentryRoleGrantPrivilegeResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAlterSentryRoleGrantPrivilegeResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *TAlterSentryRoleGrantPrivilegeResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAlterSentryRoleGrantPrivilegeResponse(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - RoleName
//  - Component
//  - Privilege
type TAlterSentryRoleRevokePrivilegeRequest struct {
  ProtocolVersion int32 `thrift:"protocol_version,1,required" db:"protocol_version" json:"protocol_version"`
  RequestorUserName string `thrift:"requestorUserName,2,required" db:"requestorUserName" json:"requestorUserName"`
  RoleName string `thrift:"roleName,3,required" db:"roleName" json:"roleName"`
  Component string `thrift:"component,4,required" db:"component" json:"component"`
  Privilege *TSentryPrivilege `thrift:"privilege,5,required" db:"privilege" json:"privilege"`
}

func NewTAlterSentryRoleRevokePrivilegeRequest() *TAlterSentryRoleRevokePrivilegeRequest {
  return &TAlterSentryRoleRevokePrivilegeRequest{
ProtocolVersion: 2,
}
}


func (p *TAlterSentryRoleRevokePrivilegeRequest) GetProtocolVersion() int32 {
  return p.ProtocolVersion
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) GetRequestorUserName() string {
  return p.RequestorUserName
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) GetRoleName() string {
  return p.RoleName
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) GetComponent() string {
  return p.Component
}
var TAlterSentryRoleRevokePrivilegeRequest_Privilege_DEFAULT *TSentryPrivilege
func (p *TAlterSentryRoleRevokePrivilegeRequest) GetPrivilege() *TSentryPrivilege {
  if !p.IsSetPrivilege() {
    return TAlterSentryRoleRevokePrivilegeRequest_Privilege_DEFAULT
  }
return p.Privilege
}
func (p *TAlterSentryRoleRevokePrivilegeRequest) IsSetPrivilege() bool {
  return p.Privilege != nil
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetProtocolVersion bool = false;
  var issetRequestorUserName bool = false;
  var issetRoleName bool = false;
  var issetComponent bool = false;
  var issetPrivilege bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProtocolVersion = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRequestorUserName = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRoleName = true
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetComponent = true
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetPrivilege = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetProtocolVersion{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"));
  }
  if !issetRequestorUserName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"));
  }
  if !issetRoleName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoleName is not set"));
  }
  if !issetComponent{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Component is not set"));
  }
  if !issetPrivilege{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Privilege is not set"));
  }
  return nil
}

func (p *TAlterSentryRoleRevokePrivilegeRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ProtocolVersion = v
}
  return nil
}

func (p *TAlterSentryRoleRevokePrivilegeRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RequestorUserName = v
}
  return nil
}

func (p *TAlterSentryRoleRevokePrivilegeRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RoleName = v
}
  return nil
}

func (p *TAlterSentryRoleRevokePrivilegeRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Component = v
}
  return nil
}

func (p *TAlterSentryRoleRevokePrivilegeRequest)  ReadField5(iprot thrift.TProtocol) error {
  p.Privilege = &TSentryPrivilege{
  GrantOption:   0,
}
  if err := p.Privilege.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Privilege), err)
  }
  return nil
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TAlterSentryRoleRevokePrivilegeRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err) }
  return err
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err) }
  if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err) }
  return err
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("roleName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roleName: ", p), err) }
  if err := oprot.WriteString(string(p.RoleName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.roleName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roleName: ", p), err) }
  return err
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("component", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:component: ", p), err) }
  if err := oprot.WriteString(string(p.Component)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.component (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:component: ", p), err) }
  return err
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privilege", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:privilege: ", p), err) }
  if err := p.Privilege.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Privilege), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:privilege: ", p), err) }
  return err
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAlterSentryRoleRevokePrivilegeRequest(%+v)", *p)
}

// Attributes:
//  - Status
type TAlterSentryRoleRevokePrivilegeResponse struct {
  Status *TSentryResponseStatus `thrift:"status,1,required" db:"status" json:"status"`
}

func NewTAlterSentryRoleRevokePrivilegeResponse() *TAlterSentryRoleRevokePrivilegeResponse {
  return &TAlterSentryRoleRevokePrivilegeResponse{}
}

var TAlterSentryRoleRevokePrivilegeResponse_Status_DEFAULT TSentryResponseStatus
func (p *TAlterSentryRoleRevokePrivilegeResponse) GetStatus() TSentryResponseStatus {
  if !p.IsSetStatus() {
    return TAlterSentryRoleRevokePrivilegeResponse_Status_DEFAULT
  }
return *p.Status
}
func (p *TAlterSentryRoleRevokePrivilegeResponse) IsSetStatus() bool {
  return p.Status != nil
}

func (p *TAlterSentryRoleRevokePrivilegeResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetStatus bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetStatus = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetStatus{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"));
  }
  return nil
}

func (p *TAlterSentryRoleRevokePrivilegeResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &sentry_common_service.TSentryResponseStatus{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *TAlterSentryRoleRevokePrivilegeResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TAlterSentryRoleRevokePrivilegeResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAlterSentryRoleRevokePrivilegeResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *TAlterSentryRoleRevokePrivilegeResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAlterSentryRoleRevokePrivilegeResponse(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - GroupName
//  - Component
type TListSentryRolesRequest struct {
  ProtocolVersion int32 `thrift:"protocol_version,1,required" db:"protocol_version" json:"protocol_version"`
  RequestorUserName string `thrift:"requestorUserName,2,required" db:"requestorUserName" json:"requestorUserName"`
  GroupName *string `thrift:"groupName,3" db:"groupName" json:"groupName,omitempty"`
  Component string `thrift:"component,4,required" db:"component" json:"component"`
}

func NewTListSentryRolesRequest() *TListSentryRolesRequest {
  return &TListSentryRolesRequest{
ProtocolVersion: 2,
}
}


func (p *TListSentryRolesRequest) GetProtocolVersion() int32 {
  return p.ProtocolVersion
}

func (p *TListSentryRolesRequest) GetRequestorUserName() string {
  return p.RequestorUserName
}
var TListSentryRolesRequest_GroupName_DEFAULT string
func (p *TListSentryRolesRequest) GetGroupName() string {
  if !p.IsSetGroupName() {
    return TListSentryRolesRequest_GroupName_DEFAULT
  }
return *p.GroupName
}

func (p *TListSentryRolesRequest) GetComponent() string {
  return p.Component
}
func (p *TListSentryRolesRequest) IsSetGroupName() bool {
  return p.GroupName != nil
}

func (p *TListSentryRolesRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetProtocolVersion bool = false;
  var issetRequestorUserName bool = false;
  var issetComponent bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProtocolVersion = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRequestorUserName = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetComponent = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetProtocolVersion{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"));
  }
  if !issetRequestorUserName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"));
  }
  if !issetComponent{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Component is not set"));
  }
  return nil
}

func (p *TListSentryRolesRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ProtocolVersion = v
}
  return nil
}

func (p *TListSentryRolesRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RequestorUserName = v
}
  return nil
}

func (p *TListSentryRolesRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.GroupName = &v
}
  return nil
}

func (p *TListSentryRolesRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Component = v
}
  return nil
}

func (p *TListSentryRolesRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TListSentryRolesRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TListSentryRolesRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err) }
  return err
}

func (p *TListSentryRolesRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err) }
  if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err) }
  return err
}

func (p *TListSentryRolesRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetGroupName() {
    if err := oprot.WriteFieldBegin("groupName", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:groupName: ", p), err) }
    if err := oprot.WriteString(string(*p.GroupName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.groupName (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:groupName: ", p), err) }
  }
  return err
}

func (p *TListSentryRolesRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("component", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:component: ", p), err) }
  if err := oprot.WriteString(string(p.Component)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.component (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:component: ", p), err) }
  return err
}

func (p *TListSentryRolesRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TListSentryRolesRequest(%+v)", *p)
}

// Attributes:
//  - RoleName
//  - Groups
type TSentryRole struct {
  RoleName string `thrift:"roleName,1,required" db:"roleName" json:"roleName"`
  Groups []string `thrift:"groups,2,required" db:"groups" json:"groups"`
}

func NewTSentryRole() *TSentryRole {
  return &TSentryRole{}
}


func (p *TSentryRole) GetRoleName() string {
  return p.RoleName
}

func (p *TSentryRole) GetGroups() []string {
  return p.Groups
}
func (p *TSentryRole) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRoleName bool = false;
  var issetGroups bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRoleName = true
    case 2:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGroups = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRoleName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoleName is not set"));
  }
  if !issetGroups{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Groups is not set"));
  }
  return nil
}

func (p *TSentryRole)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RoleName = v
}
  return nil
}

func (p *TSentryRole)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Groups =  tSet
  for i := 0; i < size; i ++ {
var _elem3 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem3 = v
}
    p.Groups = append(p.Groups, _elem3)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TSentryRole) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TSentryRole"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSentryRole) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("roleName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:roleName: ", p), err) }
  if err := oprot.WriteString(string(p.RoleName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.roleName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:roleName: ", p), err) }
  return err
}

func (p *TSentryRole) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("groups", thrift.SET, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groups: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.STRING, len(p.Groups)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.Groups); i++ {
    for j := i+1; j<len(p.Groups); j++ {
      if reflect.DeepEqual(p.Groups[i],p.Groups[j]) { 
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Groups[i]))
      }
    }
  }
  for _, v := range p.Groups {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groups: ", p), err) }
  return err
}

func (p *TSentryRole) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSentryRole(%+v)", *p)
}

// Attributes:
//  - Status
//  - Roles
type TListSentryRolesResponse struct {
  Status *TSentryResponseStatus `thrift:"status,1,required" db:"status" json:"status"`
  Roles []*TSentryRole `thrift:"roles,2" db:"roles" json:"roles,omitempty"`
}

func NewTListSentryRolesResponse() *TListSentryRolesResponse {
  return &TListSentryRolesResponse{}
}

var TListSentryRolesResponse_Status_DEFAULT TSentryResponseStatus
func (p *TListSentryRolesResponse) GetStatus() TSentryResponseStatus {
  if !p.IsSetStatus() {
    return TListSentryRolesResponse_Status_DEFAULT
  }
return *p.Status
}
var TListSentryRolesResponse_Roles_DEFAULT []*TSentryRole

func (p *TListSentryRolesResponse) GetRoles() []*TSentryRole {
  return p.Roles
}
func (p *TListSentryRolesResponse) IsSetStatus() bool {
  return p.Status != nil
}

func (p *TListSentryRolesResponse) IsSetRoles() bool {
  return p.Roles != nil
}

func (p *TListSentryRolesResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetStatus bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetStatus = true
    case 2:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetStatus{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"));
  }
  return nil
}

func (p *TListSentryRolesResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &sentry_common_service.TSentryResponseStatus{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *TListSentryRolesResponse)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]*TSentryRole, 0, size)
  p.Roles =  tSet
  for i := 0; i < size; i ++ {
    _elem4 := &TSentryRole{}
    if err := _elem4.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
    }
    p.Roles = append(p.Roles, _elem4)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TListSentryRolesResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TListSentryRolesResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TListSentryRolesResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *TListSentryRolesResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRoles() {
    if err := oprot.WriteFieldBegin("roles", thrift.SET, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:roles: ", p), err) }
    if err := oprot.WriteSetBegin(thrift.STRUCT, len(p.Roles)); err != nil {
      return thrift.PrependError("error writing set begin: ", err)
    }
    for i := 0; i<len(p.Roles); i++ {
      for j := i+1; j<len(p.Roles); j++ {
        if reflect.DeepEqual(p.Roles[i],p.Roles[j]) { 
          return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Roles[i]))
        }
      }
    }
    for _, v := range p.Roles {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteSetEnd(); err != nil {
      return thrift.PrependError("error writing set end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:roles: ", p), err) }
  }
  return err
}

func (p *TListSentryRolesResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TListSentryRolesResponse(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - RoleName
//  - Component
//  - ServiceName
//  - Authorizables
type TListSentryPrivilegesRequest struct {
  ProtocolVersion int32 `thrift:"protocol_version,1,required" db:"protocol_version" json:"protocol_version"`
  RequestorUserName string `thrift:"requestorUserName,2,required" db:"requestorUserName" json:"requestorUserName"`
  RoleName string `thrift:"roleName,3,required" db:"roleName" json:"roleName"`
  Component string `thrift:"component,4,required" db:"component" json:"component"`
  ServiceName string `thrift:"serviceName,5,required" db:"serviceName" json:"serviceName"`
  Authorizables []*TAuthorizable `thrift:"authorizables,6" db:"authorizables" json:"authorizables,omitempty"`
}

func NewTListSentryPrivilegesRequest() *TListSentryPrivilegesRequest {
  return &TListSentryPrivilegesRequest{
ProtocolVersion: 2,
}
}


func (p *TListSentryPrivilegesRequest) GetProtocolVersion() int32 {
  return p.ProtocolVersion
}

func (p *TListSentryPrivilegesRequest) GetRequestorUserName() string {
  return p.RequestorUserName
}

func (p *TListSentryPrivilegesRequest) GetRoleName() string {
  return p.RoleName
}

func (p *TListSentryPrivilegesRequest) GetComponent() string {
  return p.Component
}

func (p *TListSentryPrivilegesRequest) GetServiceName() string {
  return p.ServiceName
}
var TListSentryPrivilegesRequest_Authorizables_DEFAULT []*TAuthorizable

func (p *TListSentryPrivilegesRequest) GetAuthorizables() []*TAuthorizable {
  return p.Authorizables
}
func (p *TListSentryPrivilegesRequest) IsSetAuthorizables() bool {
  return p.Authorizables != nil
}

func (p *TListSentryPrivilegesRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetProtocolVersion bool = false;
  var issetRequestorUserName bool = false;
  var issetRoleName bool = false;
  var issetComponent bool = false;
  var issetServiceName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProtocolVersion = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRequestorUserName = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRoleName = true
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetComponent = true
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetServiceName = true
    case 6:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetProtocolVersion{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"));
  }
  if !issetRequestorUserName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"));
  }
  if !issetRoleName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoleName is not set"));
  }
  if !issetComponent{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Component is not set"));
  }
  if !issetServiceName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ServiceName is not set"));
  }
  return nil
}

func (p *TListSentryPrivilegesRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ProtocolVersion = v
}
  return nil
}

func (p *TListSentryPrivilegesRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RequestorUserName = v
}
  return nil
}

func (p *TListSentryPrivilegesRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RoleName = v
}
  return nil
}

func (p *TListSentryPrivilegesRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Component = v
}
  return nil
}

func (p *TListSentryPrivilegesRequest)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ServiceName = v
}
  return nil
}

func (p *TListSentryPrivilegesRequest)  ReadField6(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TAuthorizable, 0, size)
  p.Authorizables =  tSlice
  for i := 0; i < size; i ++ {
    _elem5 := &TAuthorizable{}
    if err := _elem5.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem5), err)
    }
    p.Authorizables = append(p.Authorizables, _elem5)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TListSentryPrivilegesRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TListSentryPrivilegesRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TListSentryPrivilegesRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err) }
  return err
}

func (p *TListSentryPrivilegesRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err) }
  if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err) }
  return err
}

func (p *TListSentryPrivilegesRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("roleName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roleName: ", p), err) }
  if err := oprot.WriteString(string(p.RoleName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.roleName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roleName: ", p), err) }
  return err
}

func (p *TListSentryPrivilegesRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("component", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:component: ", p), err) }
  if err := oprot.WriteString(string(p.Component)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.component (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:component: ", p), err) }
  return err
}

func (p *TListSentryPrivilegesRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("serviceName", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:serviceName: ", p), err) }
  if err := oprot.WriteString(string(p.ServiceName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.serviceName (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:serviceName: ", p), err) }
  return err
}

func (p *TListSentryPrivilegesRequest) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetAuthorizables() {
    if err := oprot.WriteFieldBegin("authorizables", thrift.LIST, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:authorizables: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Authorizables)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Authorizables {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:authorizables: ", p), err) }
  }
  return err
}

func (p *TListSentryPrivilegesRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TListSentryPrivilegesRequest(%+v)", *p)
}

// Attributes:
//  - Status
//  - Privileges
type TListSentryPrivilegesResponse struct {
  Status *TSentryResponseStatus `thrift:"status,1,required" db:"status" json:"status"`
  Privileges []*TSentryPrivilege `thrift:"privileges,2" db:"privileges" json:"privileges,omitempty"`
}

func NewTListSentryPrivilegesResponse() *TListSentryPrivilegesResponse {
  return &TListSentryPrivilegesResponse{}
}

var TListSentryPrivilegesResponse_Status_DEFAULT TSentryResponseStatus
func (p *TListSentryPrivilegesResponse) GetStatus() TSentryResponseStatus {
  if !p.IsSetStatus() {
    return TListSentryPrivilegesResponse_Status_DEFAULT
  }
return *p.Status
}
var TListSentryPrivilegesResponse_Privileges_DEFAULT []*TSentryPrivilege

func (p *TListSentryPrivilegesResponse) GetPrivileges() []*TSentryPrivilege {
  return p.Privileges
}
func (p *TListSentryPrivilegesResponse) IsSetStatus() bool {
  return p.Status != nil
}

func (p *TListSentryPrivilegesResponse) IsSetPrivileges() bool {
  return p.Privileges != nil
}

func (p *TListSentryPrivilegesResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetStatus bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetStatus = true
    case 2:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetStatus{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"));
  }
  return nil
}

func (p *TListSentryPrivilegesResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &sentry_common_service.TSentryResponseStatus{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *TListSentryPrivilegesResponse)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]*TSentryPrivilege, 0, size)
  p.Privileges =  tSet
  for i := 0; i < size; i ++ {
    _elem6 := &TSentryPrivilege{
    GrantOption:     0,
}
    if err := _elem6.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
    }
    p.Privileges = append(p.Privileges, _elem6)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TListSentryPrivilegesResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TListSentryPrivilegesResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TListSentryPrivilegesResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *TListSentryPrivilegesResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetPrivileges() {
    if err := oprot.WriteFieldBegin("privileges", thrift.SET, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:privileges: ", p), err) }
    if err := oprot.WriteSetBegin(thrift.STRUCT, len(p.Privileges)); err != nil {
      return thrift.PrependError("error writing set begin: ", err)
    }
    for i := 0; i<len(p.Privileges); i++ {
      for j := i+1; j<len(p.Privileges); j++ {
        if reflect.DeepEqual(p.Privileges[i],p.Privileges[j]) { 
          return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Privileges[i]))
        }
      }
    }
    for _, v := range p.Privileges {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteSetEnd(); err != nil {
      return thrift.PrependError("error writing set end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:privileges: ", p), err) }
  }
  return err
}

func (p *TListSentryPrivilegesResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TListSentryPrivilegesResponse(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - Privilege
//  - Component
type TDropPrivilegesRequest struct {
  ProtocolVersion int32 `thrift:"protocol_version,1,required" db:"protocol_version" json:"protocol_version"`
  RequestorUserName string `thrift:"requestorUserName,2,required" db:"requestorUserName" json:"requestorUserName"`
  Privilege *TSentryPrivilege `thrift:"privilege,3,required" db:"privilege" json:"privilege"`
  Component string `thrift:"component,4,required" db:"component" json:"component"`
}

func NewTDropPrivilegesRequest() *TDropPrivilegesRequest {
  return &TDropPrivilegesRequest{
ProtocolVersion: 2,
}
}


func (p *TDropPrivilegesRequest) GetProtocolVersion() int32 {
  return p.ProtocolVersion
}

func (p *TDropPrivilegesRequest) GetRequestorUserName() string {
  return p.RequestorUserName
}
var TDropPrivilegesRequest_Privilege_DEFAULT *TSentryPrivilege
func (p *TDropPrivilegesRequest) GetPrivilege() *TSentryPrivilege {
  if !p.IsSetPrivilege() {
    return TDropPrivilegesRequest_Privilege_DEFAULT
  }
return p.Privilege
}

func (p *TDropPrivilegesRequest) GetComponent() string {
  return p.Component
}
func (p *TDropPrivilegesRequest) IsSetPrivilege() bool {
  return p.Privilege != nil
}

func (p *TDropPrivilegesRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetProtocolVersion bool = false;
  var issetRequestorUserName bool = false;
  var issetPrivilege bool = false;
  var issetComponent bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProtocolVersion = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRequestorUserName = true
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetPrivilege = true
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetComponent = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetProtocolVersion{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"));
  }
  if !issetRequestorUserName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"));
  }
  if !issetPrivilege{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Privilege is not set"));
  }
  if !issetComponent{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Component is not set"));
  }
  return nil
}

func (p *TDropPrivilegesRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ProtocolVersion = v
}
  return nil
}

func (p *TDropPrivilegesRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RequestorUserName = v
}
  return nil
}

func (p *TDropPrivilegesRequest)  ReadField3(iprot thrift.TProtocol) error {
  p.Privilege = &TSentryPrivilege{
  GrantOption:   0,
}
  if err := p.Privilege.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Privilege), err)
  }
  return nil
}

func (p *TDropPrivilegesRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Component = v
}
  return nil
}

func (p *TDropPrivilegesRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TDropPrivilegesRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDropPrivilegesRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err) }
  return err
}

func (p *TDropPrivilegesRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err) }
  if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err) }
  return err
}

func (p *TDropPrivilegesRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privilege", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:privilege: ", p), err) }
  if err := p.Privilege.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Privilege), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:privilege: ", p), err) }
  return err
}

func (p *TDropPrivilegesRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("component", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:component: ", p), err) }
  if err := oprot.WriteString(string(p.Component)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.component (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:component: ", p), err) }
  return err
}

func (p *TDropPrivilegesRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDropPrivilegesRequest(%+v)", *p)
}

// Attributes:
//  - Status
type TDropPrivilegesResponse struct {
  Status *TSentryResponseStatus `thrift:"status,1,required" db:"status" json:"status"`
}

func NewTDropPrivilegesResponse() *TDropPrivilegesResponse {
  return &TDropPrivilegesResponse{}
}

var TDropPrivilegesResponse_Status_DEFAULT TSentryResponseStatus
func (p *TDropPrivilegesResponse) GetStatus() TSentryResponseStatus {
  if !p.IsSetStatus() {
    return TDropPrivilegesResponse_Status_DEFAULT
  }
return *p.Status
}
func (p *TDropPrivilegesResponse) IsSetStatus() bool {
  return p.Status != nil
}

func (p *TDropPrivilegesResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetStatus bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetStatus = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetStatus{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"));
  }
  return nil
}

func (p *TDropPrivilegesResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &sentry_common_service.TSentryResponseStatus{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *TDropPrivilegesResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TDropPrivilegesResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDropPrivilegesResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *TDropPrivilegesResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDropPrivilegesResponse(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - Component
//  - ServiceName
//  - OldAuthorizables
//  - NewAuthorizables_
type TRenamePrivilegesRequest struct {
  ProtocolVersion int32 `thrift:"protocol_version,1,required" db:"protocol_version" json:"protocol_version"`
  RequestorUserName string `thrift:"requestorUserName,2,required" db:"requestorUserName" json:"requestorUserName"`
  Component string `thrift:"component,3,required" db:"component" json:"component"`
  ServiceName string `thrift:"serviceName,4,required" db:"serviceName" json:"serviceName"`
  OldAuthorizables []*TAuthorizable `thrift:"oldAuthorizables,5,required" db:"oldAuthorizables" json:"oldAuthorizables"`
  NewAuthorizables_ []*TAuthorizable `thrift:"newAuthorizables,6,required" db:"newAuthorizables" json:"newAuthorizables"`
}

func NewTRenamePrivilegesRequest() *TRenamePrivilegesRequest {
  return &TRenamePrivilegesRequest{
ProtocolVersion: 2,
}
}


func (p *TRenamePrivilegesRequest) GetProtocolVersion() int32 {
  return p.ProtocolVersion
}

func (p *TRenamePrivilegesRequest) GetRequestorUserName() string {
  return p.RequestorUserName
}

func (p *TRenamePrivilegesRequest) GetComponent() string {
  return p.Component
}

func (p *TRenamePrivilegesRequest) GetServiceName() string {
  return p.ServiceName
}

func (p *TRenamePrivilegesRequest) GetOldAuthorizables() []*TAuthorizable {
  return p.OldAuthorizables
}

func (p *TRenamePrivilegesRequest) GetNewAuthorizables_() []*TAuthorizable {
  return p.NewAuthorizables_
}
func (p *TRenamePrivilegesRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetProtocolVersion bool = false;
  var issetRequestorUserName bool = false;
  var issetComponent bool = false;
  var issetServiceName bool = false;
  var issetOldAuthorizables bool = false;
  var issetNewAuthorizables_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProtocolVersion = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRequestorUserName = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetComponent = true
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetServiceName = true
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetOldAuthorizables = true
    case 6:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetNewAuthorizables_ = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetProtocolVersion{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"));
  }
  if !issetRequestorUserName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"));
  }
  if !issetComponent{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Component is not set"));
  }
  if !issetServiceName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ServiceName is not set"));
  }
  if !issetOldAuthorizables{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field OldAuthorizables is not set"));
  }
  if !issetNewAuthorizables_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NewAuthorizables_ is not set"));
  }
  return nil
}

func (p *TRenamePrivilegesRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ProtocolVersion = v
}
  return nil
}

func (p *TRenamePrivilegesRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RequestorUserName = v
}
  return nil
}

func (p *TRenamePrivilegesRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Component = v
}
  return nil
}

func (p *TRenamePrivilegesRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ServiceName = v
}
  return nil
}

func (p *TRenamePrivilegesRequest)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TAuthorizable, 0, size)
  p.OldAuthorizables =  tSlice
  for i := 0; i < size; i ++ {
    _elem7 := &TAuthorizable{}
    if err := _elem7.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem7), err)
    }
    p.OldAuthorizables = append(p.OldAuthorizables, _elem7)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TRenamePrivilegesRequest)  ReadField6(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TAuthorizable, 0, size)
  p.NewAuthorizables_ =  tSlice
  for i := 0; i < size; i ++ {
    _elem8 := &TAuthorizable{}
    if err := _elem8.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem8), err)
    }
    p.NewAuthorizables_ = append(p.NewAuthorizables_, _elem8)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TRenamePrivilegesRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TRenamePrivilegesRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TRenamePrivilegesRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err) }
  return err
}

func (p *TRenamePrivilegesRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err) }
  if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err) }
  return err
}

func (p *TRenamePrivilegesRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("component", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:component: ", p), err) }
  if err := oprot.WriteString(string(p.Component)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.component (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:component: ", p), err) }
  return err
}

func (p *TRenamePrivilegesRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("serviceName", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:serviceName: ", p), err) }
  if err := oprot.WriteString(string(p.ServiceName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.serviceName (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:serviceName: ", p), err) }
  return err
}

func (p *TRenamePrivilegesRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("oldAuthorizables", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:oldAuthorizables: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.OldAuthorizables)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.OldAuthorizables {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:oldAuthorizables: ", p), err) }
  return err
}

func (p *TRenamePrivilegesRequest) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("newAuthorizables", thrift.LIST, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:newAuthorizables: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.NewAuthorizables_)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.NewAuthorizables_ {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:newAuthorizables: ", p), err) }
  return err
}

func (p *TRenamePrivilegesRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TRenamePrivilegesRequest(%+v)", *p)
}

// Attributes:
//  - Status
type TRenamePrivilegesResponse struct {
  Status *TSentryResponseStatus `thrift:"status,1,required" db:"status" json:"status"`
}

func NewTRenamePrivilegesResponse() *TRenamePrivilegesResponse {
  return &TRenamePrivilegesResponse{}
}

var TRenamePrivilegesResponse_Status_DEFAULT TSentryResponseStatus
func (p *TRenamePrivilegesResponse) GetStatus() TSentryResponseStatus {
  if !p.IsSetStatus() {
    return TRenamePrivilegesResponse_Status_DEFAULT
  }
return *p.Status
}
func (p *TRenamePrivilegesResponse) IsSetStatus() bool {
  return p.Status != nil
}

func (p *TRenamePrivilegesResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetStatus bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetStatus = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetStatus{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"));
  }
  return nil
}

func (p *TRenamePrivilegesResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &sentry_common_service.TSentryResponseStatus{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *TRenamePrivilegesResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TRenamePrivilegesResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TRenamePrivilegesResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *TRenamePrivilegesResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TRenamePrivilegesResponse(%+v)", *p)
}

// Attributes:
//  - All
//  - Roles
type TSentryActiveRoleSet struct {
  All bool `thrift:"all,1,required" db:"all" json:"all"`
  Roles []string `thrift:"roles,2,required" db:"roles" json:"roles"`
}

func NewTSentryActiveRoleSet() *TSentryActiveRoleSet {
  return &TSentryActiveRoleSet{}
}


func (p *TSentryActiveRoleSet) GetAll() bool {
  return p.All
}

func (p *TSentryActiveRoleSet) GetRoles() []string {
  return p.Roles
}
func (p *TSentryActiveRoleSet) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAll bool = false;
  var issetRoles bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAll = true
    case 2:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRoles = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAll{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field All is not set"));
  }
  if !issetRoles{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Roles is not set"));
  }
  return nil
}

func (p *TSentryActiveRoleSet)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.All = v
}
  return nil
}

func (p *TSentryActiveRoleSet)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Roles =  tSet
  for i := 0; i < size; i ++ {
var _elem9 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem9 = v
}
    p.Roles = append(p.Roles, _elem9)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TSentryActiveRoleSet) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TSentryActiveRoleSet"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSentryActiveRoleSet) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("all", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:all: ", p), err) }
  if err := oprot.WriteBool(bool(p.All)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.all (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:all: ", p), err) }
  return err
}

func (p *TSentryActiveRoleSet) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("roles", thrift.SET, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:roles: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.STRING, len(p.Roles)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.Roles); i++ {
    for j := i+1; j<len(p.Roles); j++ {
      if reflect.DeepEqual(p.Roles[i],p.Roles[j]) { 
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Roles[i]))
      }
    }
  }
  for _, v := range p.Roles {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:roles: ", p), err) }
  return err
}

func (p *TSentryActiveRoleSet) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSentryActiveRoleSet(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - Component
//  - ServiceName
//  - Groups
//  - RoleSet
//  - Authorizables
type TListSentryPrivilegesForProviderRequest struct {
  ProtocolVersion int32 `thrift:"protocol_version,1,required" db:"protocol_version" json:"protocol_version"`
  Component string `thrift:"component,2,required" db:"component" json:"component"`
  ServiceName string `thrift:"serviceName,3,required" db:"serviceName" json:"serviceName"`
  Groups []string `thrift:"groups,4,required" db:"groups" json:"groups"`
  RoleSet *TSentryActiveRoleSet `thrift:"roleSet,5,required" db:"roleSet" json:"roleSet"`
  Authorizables []*TAuthorizable `thrift:"authorizables,6" db:"authorizables" json:"authorizables,omitempty"`
}

func NewTListSentryPrivilegesForProviderRequest() *TListSentryPrivilegesForProviderRequest {
  return &TListSentryPrivilegesForProviderRequest{
ProtocolVersion: 2,
}
}


func (p *TListSentryPrivilegesForProviderRequest) GetProtocolVersion() int32 {
  return p.ProtocolVersion
}

func (p *TListSentryPrivilegesForProviderRequest) GetComponent() string {
  return p.Component
}

func (p *TListSentryPrivilegesForProviderRequest) GetServiceName() string {
  return p.ServiceName
}

func (p *TListSentryPrivilegesForProviderRequest) GetGroups() []string {
  return p.Groups
}
var TListSentryPrivilegesForProviderRequest_RoleSet_DEFAULT *TSentryActiveRoleSet
func (p *TListSentryPrivilegesForProviderRequest) GetRoleSet() *TSentryActiveRoleSet {
  if !p.IsSetRoleSet() {
    return TListSentryPrivilegesForProviderRequest_RoleSet_DEFAULT
  }
return p.RoleSet
}
var TListSentryPrivilegesForProviderRequest_Authorizables_DEFAULT []*TAuthorizable

func (p *TListSentryPrivilegesForProviderRequest) GetAuthorizables() []*TAuthorizable {
  return p.Authorizables
}
func (p *TListSentryPrivilegesForProviderRequest) IsSetRoleSet() bool {
  return p.RoleSet != nil
}

func (p *TListSentryPrivilegesForProviderRequest) IsSetAuthorizables() bool {
  return p.Authorizables != nil
}

func (p *TListSentryPrivilegesForProviderRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetProtocolVersion bool = false;
  var issetComponent bool = false;
  var issetServiceName bool = false;
  var issetGroups bool = false;
  var issetRoleSet bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProtocolVersion = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetComponent = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetServiceName = true
    case 4:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGroups = true
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRoleSet = true
    case 6:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetProtocolVersion{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"));
  }
  if !issetComponent{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Component is not set"));
  }
  if !issetServiceName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ServiceName is not set"));
  }
  if !issetGroups{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Groups is not set"));
  }
  if !issetRoleSet{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoleSet is not set"));
  }
  return nil
}

func (p *TListSentryPrivilegesForProviderRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ProtocolVersion = v
}
  return nil
}

func (p *TListSentryPrivilegesForProviderRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Component = v
}
  return nil
}

func (p *TListSentryPrivilegesForProviderRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ServiceName = v
}
  return nil
}

func (p *TListSentryPrivilegesForProviderRequest)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Groups =  tSet
  for i := 0; i < size; i ++ {
var _elem10 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem10 = v
}
    p.Groups = append(p.Groups, _elem10)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TListSentryPrivilegesForProviderRequest)  ReadField5(iprot thrift.TProtocol) error {
  p.RoleSet = &TSentryActiveRoleSet{}
  if err := p.RoleSet.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RoleSet), err)
  }
  return nil
}

func (p *TListSentryPrivilegesForProviderRequest)  ReadField6(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TAuthorizable, 0, size)
  p.Authorizables =  tSlice
  for i := 0; i < size; i ++ {
    _elem11 := &TAuthorizable{}
    if err := _elem11.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem11), err)
    }
    p.Authorizables = append(p.Authorizables, _elem11)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TListSentryPrivilegesForProviderRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TListSentryPrivilegesForProviderRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TListSentryPrivilegesForProviderRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err) }
  return err
}

func (p *TListSentryPrivilegesForProviderRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("component", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:component: ", p), err) }
  if err := oprot.WriteString(string(p.Component)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.component (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:component: ", p), err) }
  return err
}

func (p *TListSentryPrivilegesForProviderRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("serviceName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:serviceName: ", p), err) }
  if err := oprot.WriteString(string(p.ServiceName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.serviceName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:serviceName: ", p), err) }
  return err
}

func (p *TListSentryPrivilegesForProviderRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("groups", thrift.SET, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:groups: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.STRING, len(p.Groups)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.Groups); i++ {
    for j := i+1; j<len(p.Groups); j++ {
      if reflect.DeepEqual(p.Groups[i],p.Groups[j]) { 
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Groups[i]))
      }
    }
  }
  for _, v := range p.Groups {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:groups: ", p), err) }
  return err
}

func (p *TListSentryPrivilegesForProviderRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("roleSet", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:roleSet: ", p), err) }
  if err := p.RoleSet.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RoleSet), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:roleSet: ", p), err) }
  return err
}

func (p *TListSentryPrivilegesForProviderRequest) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetAuthorizables() {
    if err := oprot.WriteFieldBegin("authorizables", thrift.LIST, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:authorizables: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Authorizables)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Authorizables {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:authorizables: ", p), err) }
  }
  return err
}

func (p *TListSentryPrivilegesForProviderRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TListSentryPrivilegesForProviderRequest(%+v)", *p)
}

// Attributes:
//  - Status
//  - Privileges
type TListSentryPrivilegesForProviderResponse struct {
  Status *TSentryResponseStatus `thrift:"status,1,required" db:"status" json:"status"`
  Privileges []string `thrift:"privileges,2,required" db:"privileges" json:"privileges"`
}

func NewTListSentryPrivilegesForProviderResponse() *TListSentryPrivilegesForProviderResponse {
  return &TListSentryPrivilegesForProviderResponse{}
}

var TListSentryPrivilegesForProviderResponse_Status_DEFAULT TSentryResponseStatus
func (p *TListSentryPrivilegesForProviderResponse) GetStatus() TSentryResponseStatus {
  if !p.IsSetStatus() {
    return TListSentryPrivilegesForProviderResponse_Status_DEFAULT
  }
return *p.Status
}

func (p *TListSentryPrivilegesForProviderResponse) GetPrivileges() []string {
  return p.Privileges
}
func (p *TListSentryPrivilegesForProviderResponse) IsSetStatus() bool {
  return p.Status != nil
}

func (p *TListSentryPrivilegesForProviderResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetStatus bool = false;
  var issetPrivileges bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetStatus = true
    case 2:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetPrivileges = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetStatus{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"));
  }
  if !issetPrivileges{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Privileges is not set"));
  }
  return nil
}

func (p *TListSentryPrivilegesForProviderResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &sentry_common_service.TSentryResponseStatus{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *TListSentryPrivilegesForProviderResponse)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Privileges =  tSet
  for i := 0; i < size; i ++ {
var _elem12 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem12 = v
}
    p.Privileges = append(p.Privileges, _elem12)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TListSentryPrivilegesForProviderResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TListSentryPrivilegesForProviderResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TListSentryPrivilegesForProviderResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *TListSentryPrivilegesForProviderResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privileges", thrift.SET, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:privileges: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.STRING, len(p.Privileges)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.Privileges); i++ {
    for j := i+1; j<len(p.Privileges); j++ {
      if reflect.DeepEqual(p.Privileges[i],p.Privileges[j]) { 
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Privileges[i]))
      }
    }
  }
  for _, v := range p.Privileges {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:privileges: ", p), err) }
  return err
}

func (p *TListSentryPrivilegesForProviderResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TListSentryPrivilegesForProviderResponse(%+v)", *p)
}

// Attributes:
//  - PrivilegeMap
type TSentryPrivilegeMap struct {
  PrivilegeMap map[string][]*TSentryPrivilege `thrift:"privilegeMap,1,required" db:"privilegeMap" json:"privilegeMap"`
}

func NewTSentryPrivilegeMap() *TSentryPrivilegeMap {
  return &TSentryPrivilegeMap{}
}


func (p *TSentryPrivilegeMap) GetPrivilegeMap() map[string][]*TSentryPrivilege {
  return p.PrivilegeMap
}
func (p *TSentryPrivilegeMap) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetPrivilegeMap bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetPrivilegeMap = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetPrivilegeMap{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PrivilegeMap is not set"));
  }
  return nil
}

func (p *TSentryPrivilegeMap)  ReadField1(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]*TSentryPrivilege, size)
  p.PrivilegeMap =  tMap
  for i := 0; i < size; i ++ {
var _key13 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key13 = v
}
    _, size, err := iprot.ReadSetBegin()
    if err != nil {
      return thrift.PrependError("error reading set begin: ", err)
    }
    tSet := make([]*TSentryPrivilege, 0, size)
    _val14 :=  tSet
    for i := 0; i < size; i ++ {
      _elem15 := &TSentryPrivilege{
      GrantOption:       0,
}
      if err := _elem15.Read(iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem15), err)
      }
      _val14 = append(_val14, _elem15)
    }
    if err := iprot.ReadSetEnd(); err != nil {
      return thrift.PrependError("error reading set end: ", err)
    }
    p.PrivilegeMap[_key13] = _val14
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TSentryPrivilegeMap) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TSentryPrivilegeMap"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSentryPrivilegeMap) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privilegeMap", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:privilegeMap: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.SET, len(p.PrivilegeMap)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.PrivilegeMap {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteSetBegin(thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing set begin: ", err)
    }
    for i := 0; i<len(v); i++ {
      for j := i+1; j<len(v); j++ {
        if reflect.DeepEqual(v[i],v[j]) { 
          return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v[i]))
        }
      }
    }
    for _, v := range v {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteSetEnd(); err != nil {
      return thrift.PrependError("error writing set end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:privilegeMap: ", p), err) }
  return err
}

func (p *TSentryPrivilegeMap) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSentryPrivilegeMap(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - Component
//  - ServiceName
//  - AuthorizablesSet
//  - Groups
//  - RoleSet
type TListSentryPrivilegesByAuthRequest struct {
  ProtocolVersion int32 `thrift:"protocol_version,1,required" db:"protocol_version" json:"protocol_version"`
  RequestorUserName string `thrift:"requestorUserName,2,required" db:"requestorUserName" json:"requestorUserName"`
  Component string `thrift:"component,3,required" db:"component" json:"component"`
  ServiceName string `thrift:"serviceName,4,required" db:"serviceName" json:"serviceName"`
  AuthorizablesSet []string `thrift:"authorizablesSet,5,required" db:"authorizablesSet" json:"authorizablesSet"`
  Groups []string `thrift:"groups,6" db:"groups" json:"groups,omitempty"`
  RoleSet *TSentryActiveRoleSet `thrift:"roleSet,7" db:"roleSet" json:"roleSet,omitempty"`
}

func NewTListSentryPrivilegesByAuthRequest() *TListSentryPrivilegesByAuthRequest {
  return &TListSentryPrivilegesByAuthRequest{
ProtocolVersion: 2,
}
}


func (p *TListSentryPrivilegesByAuthRequest) GetProtocolVersion() int32 {
  return p.ProtocolVersion
}

func (p *TListSentryPrivilegesByAuthRequest) GetRequestorUserName() string {
  return p.RequestorUserName
}

func (p *TListSentryPrivilegesByAuthRequest) GetComponent() string {
  return p.Component
}

func (p *TListSentryPrivilegesByAuthRequest) GetServiceName() string {
  return p.ServiceName
}

func (p *TListSentryPrivilegesByAuthRequest) GetAuthorizablesSet() []string {
  return p.AuthorizablesSet
}
var TListSentryPrivilegesByAuthRequest_Groups_DEFAULT []string

func (p *TListSentryPrivilegesByAuthRequest) GetGroups() []string {
  return p.Groups
}
var TListSentryPrivilegesByAuthRequest_RoleSet_DEFAULT *TSentryActiveRoleSet
func (p *TListSentryPrivilegesByAuthRequest) GetRoleSet() *TSentryActiveRoleSet {
  if !p.IsSetRoleSet() {
    return TListSentryPrivilegesByAuthRequest_RoleSet_DEFAULT
  }
return p.RoleSet
}
func (p *TListSentryPrivilegesByAuthRequest) IsSetGroups() bool {
  return p.Groups != nil
}

func (p *TListSentryPrivilegesByAuthRequest) IsSetRoleSet() bool {
  return p.RoleSet != nil
}

func (p *TListSentryPrivilegesByAuthRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetProtocolVersion bool = false;
  var issetRequestorUserName bool = false;
  var issetComponent bool = false;
  var issetServiceName bool = false;
  var issetAuthorizablesSet bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProtocolVersion = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRequestorUserName = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetComponent = true
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetServiceName = true
    case 5:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthorizablesSet = true
    case 6:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetProtocolVersion{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"));
  }
  if !issetRequestorUserName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"));
  }
  if !issetComponent{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Component is not set"));
  }
  if !issetServiceName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ServiceName is not set"));
  }
  if !issetAuthorizablesSet{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthorizablesSet is not set"));
  }
  return nil
}

func (p *TListSentryPrivilegesByAuthRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ProtocolVersion = v
}
  return nil
}

func (p *TListSentryPrivilegesByAuthRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RequestorUserName = v
}
  return nil
}

func (p *TListSentryPrivilegesByAuthRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Component = v
}
  return nil
}

func (p *TListSentryPrivilegesByAuthRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ServiceName = v
}
  return nil
}

func (p *TListSentryPrivilegesByAuthRequest)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.AuthorizablesSet =  tSet
  for i := 0; i < size; i ++ {
var _elem16 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem16 = v
}
    p.AuthorizablesSet = append(p.AuthorizablesSet, _elem16)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TListSentryPrivilegesByAuthRequest)  ReadField6(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Groups =  tSet
  for i := 0; i < size; i ++ {
var _elem17 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem17 = v
}
    p.Groups = append(p.Groups, _elem17)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TListSentryPrivilegesByAuthRequest)  ReadField7(iprot thrift.TProtocol) error {
  p.RoleSet = &TSentryActiveRoleSet{}
  if err := p.RoleSet.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RoleSet), err)
  }
  return nil
}

func (p *TListSentryPrivilegesByAuthRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TListSentryPrivilegesByAuthRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TListSentryPrivilegesByAuthRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err) }
  return err
}

func (p *TListSentryPrivilegesByAuthRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err) }
  if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err) }
  return err
}

func (p *TListSentryPrivilegesByAuthRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("component", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:component: ", p), err) }
  if err := oprot.WriteString(string(p.Component)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.component (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:component: ", p), err) }
  return err
}

func (p *TListSentryPrivilegesByAuthRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("serviceName", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:serviceName: ", p), err) }
  if err := oprot.WriteString(string(p.ServiceName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.serviceName (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:serviceName: ", p), err) }
  return err
}

func (p *TListSentryPrivilegesByAuthRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authorizablesSet", thrift.SET, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:authorizablesSet: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.STRING, len(p.AuthorizablesSet)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.AuthorizablesSet); i++ {
    for j := i+1; j<len(p.AuthorizablesSet); j++ {
      if reflect.DeepEqual(p.AuthorizablesSet[i],p.AuthorizablesSet[j]) { 
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.AuthorizablesSet[i]))
      }
    }
  }
  for _, v := range p.AuthorizablesSet {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:authorizablesSet: ", p), err) }
  return err
}

func (p *TListSentryPrivilegesByAuthRequest) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetGroups() {
    if err := oprot.WriteFieldBegin("groups", thrift.SET, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:groups: ", p), err) }
    if err := oprot.WriteSetBegin(thrift.STRING, len(p.Groups)); err != nil {
      return thrift.PrependError("error writing set begin: ", err)
    }
    for i := 0; i<len(p.Groups); i++ {
      for j := i+1; j<len(p.Groups); j++ {
        if reflect.DeepEqual(p.Groups[i],p.Groups[j]) { 
          return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Groups[i]))
        }
      }
    }
    for _, v := range p.Groups {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteSetEnd(); err != nil {
      return thrift.PrependError("error writing set end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:groups: ", p), err) }
  }
  return err
}

func (p *TListSentryPrivilegesByAuthRequest) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetRoleSet() {
    if err := oprot.WriteFieldBegin("roleSet", thrift.STRUCT, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:roleSet: ", p), err) }
    if err := p.RoleSet.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RoleSet), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:roleSet: ", p), err) }
  }
  return err
}

func (p *TListSentryPrivilegesByAuthRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TListSentryPrivilegesByAuthRequest(%+v)", *p)
}

// Attributes:
//  - Status
//  - PrivilegesMapByAuth
type TListSentryPrivilegesByAuthResponse struct {
  Status *sentry_common_service.TSentryResponseStatus `thrift:"status,1,required" db:"status" json:"status"`
  PrivilegesMapByAuth map[string]*TSentryPrivilegeMap `thrift:"privilegesMapByAuth,2" db:"privilegesMapByAuth" json:"privilegesMapByAuth,omitempty"`
}

func NewTListSentryPrivilegesByAuthResponse() *TListSentryPrivilegesByAuthResponse {
  return &TListSentryPrivilegesByAuthResponse{}
}

var TListSentryPrivilegesByAuthResponse_Status_DEFAULT *sentry_common_service.TSentryResponseStatus
func (p *TListSentryPrivilegesByAuthResponse) GetStatus() *sentry_common_service.TSentryResponseStatus {
  if !p.IsSetStatus() {
    return TListSentryPrivilegesByAuthResponse_Status_DEFAULT
  }
return p.Status
}
var TListSentryPrivilegesByAuthResponse_PrivilegesMapByAuth_DEFAULT map[string]*TSentryPrivilegeMap

func (p *TListSentryPrivilegesByAuthResponse) GetPrivilegesMapByAuth() map[string]*TSentryPrivilegeMap {
  return p.PrivilegesMapByAuth
}
func (p *TListSentryPrivilegesByAuthResponse) IsSetStatus() bool {
  return p.Status != nil
}

func (p *TListSentryPrivilegesByAuthResponse) IsSetPrivilegesMapByAuth() bool {
  return p.PrivilegesMapByAuth != nil
}

func (p *TListSentryPrivilegesByAuthResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetStatus bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetStatus = true
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetStatus{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"));
  }
  return nil
}

func (p *TListSentryPrivilegesByAuthResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &sentry_common_service.TSentryResponseStatus{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *TListSentryPrivilegesByAuthResponse)  ReadField2(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*TSentryPrivilegeMap, size)
  p.PrivilegesMapByAuth =  tMap
  for i := 0; i < size; i ++ {
var _key18 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key18 = v
}
    _val19 := &TSentryPrivilegeMap{}
    if err := _val19.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val19), err)
    }
    p.PrivilegesMapByAuth[_key18] = _val19
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TListSentryPrivilegesByAuthResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TListSentryPrivilegesByAuthResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TListSentryPrivilegesByAuthResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *TListSentryPrivilegesByAuthResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetPrivilegesMapByAuth() {
    if err := oprot.WriteFieldBegin("privilegesMapByAuth", thrift.MAP, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:privilegesMapByAuth: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.PrivilegesMapByAuth)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.PrivilegesMapByAuth {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:privilegesMapByAuth: ", p), err) }
  }
  return err
}

func (p *TListSentryPrivilegesByAuthResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TListSentryPrivilegesByAuthResponse(%+v)", *p)
}

type SentryGenericPolicyService interface {
  // Parameters:
  //  - Request
  CreateSentryRole(ctx context.Context, request *TCreateSentryRoleRequest) (r *TCreateSentryRoleResponse, err error)
  // Parameters:
  //  - Request
  DropSentryRole(ctx context.Context, request *TDropSentryRoleRequest) (r *TDropSentryRoleResponse, err error)
  // Parameters:
  //  - Request
  AlterSentryRoleGrantPrivilege(ctx context.Context, request *TAlterSentryRoleGrantPrivilegeRequest) (r *TAlterSentryRoleGrantPrivilegeResponse, err error)
  // Parameters:
  //  - Request
  AlterSentryRoleRevokePrivilege(ctx context.Context, request *TAlterSentryRoleRevokePrivilegeRequest) (r *TAlterSentryRoleRevokePrivilegeResponse, err error)
  // Parameters:
  //  - Request
  AlterSentryRoleAddGroups(ctx context.Context, request *TAlterSentryRoleAddGroupsRequest) (r *TAlterSentryRoleAddGroupsResponse, err error)
  // Parameters:
  //  - Request
  AlterSentryRoleDeleteGroups(ctx context.Context, request *TAlterSentryRoleDeleteGroupsRequest) (r *TAlterSentryRoleDeleteGroupsResponse, err error)
  // Parameters:
  //  - Request
  ListSentryRolesByGroup(ctx context.Context, request *TListSentryRolesRequest) (r *TListSentryRolesResponse, err error)
  // Parameters:
  //  - Request
  ListSentryPrivilegesByRole(ctx context.Context, request *TListSentryPrivilegesRequest) (r *TListSentryPrivilegesResponse, err error)
  // Parameters:
  //  - Request
  ListSentryPrivilegesForProvider(ctx context.Context, request *TListSentryPrivilegesForProviderRequest) (r *TListSentryPrivilegesForProviderResponse, err error)
  // Parameters:
  //  - Request
  ListSentryPrivilegesByAuthorizable(ctx context.Context, request *TListSentryPrivilegesByAuthRequest) (r *TListSentryPrivilegesByAuthResponse, err error)
  // Parameters:
  //  - Request
  DropSentryPrivilege(ctx context.Context, request *TDropPrivilegesRequest) (r *TDropPrivilegesResponse, err error)
  // Parameters:
  //  - Request
  RenameSentryPrivilege(ctx context.Context, request *TRenamePrivilegesRequest) (r *TRenamePrivilegesResponse, err error)
}

type SentryGenericPolicyServiceClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewSentryGenericPolicyServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *SentryGenericPolicyServiceClient {
  return &SentryGenericPolicyServiceClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewSentryGenericPolicyServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *SentryGenericPolicyServiceClient {
  return &SentryGenericPolicyServiceClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// Parameters:
//  - Request
func (p *SentryGenericPolicyServiceClient) CreateSentryRole(ctx context.Context, request *TCreateSentryRoleRequest) (r *TCreateSentryRoleResponse, err error) {
  if err = p.sendCreateSentryRole(request); err != nil { return }
  return p.recvCreateSentryRole()
}

func (p *SentryGenericPolicyServiceClient) sendCreateSentryRole(request *TCreateSentryRoleRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("create_sentry_role", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SentryGenericPolicyServiceCreateSentryRoleArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SentryGenericPolicyServiceClient) recvCreateSentryRole() (value *TCreateSentryRoleResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "create_sentry_role" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "create_sentry_role failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "create_sentry_role failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error20 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error21 error
    error21, err = error20.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error21
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "create_sentry_role failed: invalid message type")
    return
  }
  result := SentryGenericPolicyServiceCreateSentryRoleResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Request
func (p *SentryGenericPolicyServiceClient) DropSentryRole(ctx context.Context, request *TDropSentryRoleRequest) (r *TDropSentryRoleResponse, err error) {
  if err = p.sendDropSentryRole(request); err != nil { return }
  return p.recvDropSentryRole()
}

func (p *SentryGenericPolicyServiceClient) sendDropSentryRole(request *TDropSentryRoleRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("drop_sentry_role", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SentryGenericPolicyServiceDropSentryRoleArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SentryGenericPolicyServiceClient) recvDropSentryRole() (value *TDropSentryRoleResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "drop_sentry_role" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "drop_sentry_role failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "drop_sentry_role failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error22 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error23 error
    error23, err = error22.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error23
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "drop_sentry_role failed: invalid message type")
    return
  }
  result := SentryGenericPolicyServiceDropSentryRoleResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Request
func (p *SentryGenericPolicyServiceClient) AlterSentryRoleGrantPrivilege(ctx context.Context, request *TAlterSentryRoleGrantPrivilegeRequest) (r *TAlterSentryRoleGrantPrivilegeResponse, err error) {
  if err = p.sendAlterSentryRoleGrantPrivilege(request); err != nil { return }
  return p.recvAlterSentryRoleGrantPrivilege()
}

func (p *SentryGenericPolicyServiceClient) sendAlterSentryRoleGrantPrivilege(request *TAlterSentryRoleGrantPrivilegeRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("alter_sentry_role_grant_privilege", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SentryGenericPolicyServiceClient) recvAlterSentryRoleGrantPrivilege() (value *TAlterSentryRoleGrantPrivilegeResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "alter_sentry_role_grant_privilege" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "alter_sentry_role_grant_privilege failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "alter_sentry_role_grant_privilege failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error24 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error25 error
    error25, err = error24.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error25
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "alter_sentry_role_grant_privilege failed: invalid message type")
    return
  }
  result := SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Request
func (p *SentryGenericPolicyServiceClient) AlterSentryRoleRevokePrivilege(ctx context.Context, request *TAlterSentryRoleRevokePrivilegeRequest) (r *TAlterSentryRoleRevokePrivilegeResponse, err error) {
  if err = p.sendAlterSentryRoleRevokePrivilege(request); err != nil { return }
  return p.recvAlterSentryRoleRevokePrivilege()
}

func (p *SentryGenericPolicyServiceClient) sendAlterSentryRoleRevokePrivilege(request *TAlterSentryRoleRevokePrivilegeRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("alter_sentry_role_revoke_privilege", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SentryGenericPolicyServiceClient) recvAlterSentryRoleRevokePrivilege() (value *TAlterSentryRoleRevokePrivilegeResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "alter_sentry_role_revoke_privilege" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "alter_sentry_role_revoke_privilege failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "alter_sentry_role_revoke_privilege failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error26 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error27 error
    error27, err = error26.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error27
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "alter_sentry_role_revoke_privilege failed: invalid message type")
    return
  }
  result := SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Request
func (p *SentryGenericPolicyServiceClient) AlterSentryRoleAddGroups(ctx context.Context, request *TAlterSentryRoleAddGroupsRequest) (r *TAlterSentryRoleAddGroupsResponse, err error) {
  if err = p.sendAlterSentryRoleAddGroups(request); err != nil { return }
  return p.recvAlterSentryRoleAddGroups()
}

func (p *SentryGenericPolicyServiceClient) sendAlterSentryRoleAddGroups(request *TAlterSentryRoleAddGroupsRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("alter_sentry_role_add_groups", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SentryGenericPolicyServiceAlterSentryRoleAddGroupsArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SentryGenericPolicyServiceClient) recvAlterSentryRoleAddGroups() (value *TAlterSentryRoleAddGroupsResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "alter_sentry_role_add_groups" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "alter_sentry_role_add_groups failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "alter_sentry_role_add_groups failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error28 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error29 error
    error29, err = error28.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error29
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "alter_sentry_role_add_groups failed: invalid message type")
    return
  }
  result := SentryGenericPolicyServiceAlterSentryRoleAddGroupsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Request
func (p *SentryGenericPolicyServiceClient) AlterSentryRoleDeleteGroups(ctx context.Context, request *TAlterSentryRoleDeleteGroupsRequest) (r *TAlterSentryRoleDeleteGroupsResponse, err error) {
  if err = p.sendAlterSentryRoleDeleteGroups(request); err != nil { return }
  return p.recvAlterSentryRoleDeleteGroups()
}

func (p *SentryGenericPolicyServiceClient) sendAlterSentryRoleDeleteGroups(request *TAlterSentryRoleDeleteGroupsRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("alter_sentry_role_delete_groups", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SentryGenericPolicyServiceClient) recvAlterSentryRoleDeleteGroups() (value *TAlterSentryRoleDeleteGroupsResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "alter_sentry_role_delete_groups" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "alter_sentry_role_delete_groups failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "alter_sentry_role_delete_groups failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error30 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error31 error
    error31, err = error30.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error31
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "alter_sentry_role_delete_groups failed: invalid message type")
    return
  }
  result := SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Request
func (p *SentryGenericPolicyServiceClient) ListSentryRolesByGroup(ctx context.Context, request *TListSentryRolesRequest) (r *TListSentryRolesResponse, err error) {
  if err = p.sendListSentryRolesByGroup(request); err != nil { return }
  return p.recvListSentryRolesByGroup()
}

func (p *SentryGenericPolicyServiceClient) sendListSentryRolesByGroup(request *TListSentryRolesRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("list_sentry_roles_by_group", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SentryGenericPolicyServiceListSentryRolesByGroupArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SentryGenericPolicyServiceClient) recvListSentryRolesByGroup() (value *TListSentryRolesResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "list_sentry_roles_by_group" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "list_sentry_roles_by_group failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "list_sentry_roles_by_group failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error32 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error33 error
    error33, err = error32.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error33
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "list_sentry_roles_by_group failed: invalid message type")
    return
  }
  result := SentryGenericPolicyServiceListSentryRolesByGroupResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Request
func (p *SentryGenericPolicyServiceClient) ListSentryPrivilegesByRole(ctx context.Context, request *TListSentryPrivilegesRequest) (r *TListSentryPrivilegesResponse, err error) {
  if err = p.sendListSentryPrivilegesByRole(request); err != nil { return }
  return p.recvListSentryPrivilegesByRole()
}

func (p *SentryGenericPolicyServiceClient) sendListSentryPrivilegesByRole(request *TListSentryPrivilegesRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("list_sentry_privileges_by_role", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SentryGenericPolicyServiceListSentryPrivilegesByRoleArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SentryGenericPolicyServiceClient) recvListSentryPrivilegesByRole() (value *TListSentryPrivilegesResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "list_sentry_privileges_by_role" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "list_sentry_privileges_by_role failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "list_sentry_privileges_by_role failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error34 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error35 error
    error35, err = error34.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error35
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "list_sentry_privileges_by_role failed: invalid message type")
    return
  }
  result := SentryGenericPolicyServiceListSentryPrivilegesByRoleResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Request
func (p *SentryGenericPolicyServiceClient) ListSentryPrivilegesForProvider(ctx context.Context, request *TListSentryPrivilegesForProviderRequest) (r *TListSentryPrivilegesForProviderResponse, err error) {
  if err = p.sendListSentryPrivilegesForProvider(request); err != nil { return }
  return p.recvListSentryPrivilegesForProvider()
}

func (p *SentryGenericPolicyServiceClient) sendListSentryPrivilegesForProvider(request *TListSentryPrivilegesForProviderRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("list_sentry_privileges_for_provider", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SentryGenericPolicyServiceListSentryPrivilegesForProviderArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SentryGenericPolicyServiceClient) recvListSentryPrivilegesForProvider() (value *TListSentryPrivilegesForProviderResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "list_sentry_privileges_for_provider" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "list_sentry_privileges_for_provider failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "list_sentry_privileges_for_provider failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error36 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error37 error
    error37, err = error36.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error37
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "list_sentry_privileges_for_provider failed: invalid message type")
    return
  }
  result := SentryGenericPolicyServiceListSentryPrivilegesForProviderResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Request
func (p *SentryGenericPolicyServiceClient) ListSentryPrivilegesByAuthorizable(ctx context.Context, request *TListSentryPrivilegesByAuthRequest) (r *TListSentryPrivilegesByAuthResponse, err error) {
  if err = p.sendListSentryPrivilegesByAuthorizable(request); err != nil { return }
  return p.recvListSentryPrivilegesByAuthorizable()
}

func (p *SentryGenericPolicyServiceClient) sendListSentryPrivilegesByAuthorizable(request *TListSentryPrivilegesByAuthRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("list_sentry_privileges_by_authorizable", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SentryGenericPolicyServiceClient) recvListSentryPrivilegesByAuthorizable() (value *TListSentryPrivilegesByAuthResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "list_sentry_privileges_by_authorizable" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "list_sentry_privileges_by_authorizable failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "list_sentry_privileges_by_authorizable failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error38 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error39 error
    error39, err = error38.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error39
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "list_sentry_privileges_by_authorizable failed: invalid message type")
    return
  }
  result := SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Request
func (p *SentryGenericPolicyServiceClient) DropSentryPrivilege(ctx context.Context, request *TDropPrivilegesRequest) (r *TDropPrivilegesResponse, err error) {
  if err = p.sendDropSentryPrivilege(request); err != nil { return }
  return p.recvDropSentryPrivilege()
}

func (p *SentryGenericPolicyServiceClient) sendDropSentryPrivilege(request *TDropPrivilegesRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("drop_sentry_privilege", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SentryGenericPolicyServiceDropSentryPrivilegeArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SentryGenericPolicyServiceClient) recvDropSentryPrivilege() (value *TDropPrivilegesResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "drop_sentry_privilege" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "drop_sentry_privilege failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "drop_sentry_privilege failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error40 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error41 error
    error41, err = error40.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error41
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "drop_sentry_privilege failed: invalid message type")
    return
  }
  result := SentryGenericPolicyServiceDropSentryPrivilegeResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Request
func (p *SentryGenericPolicyServiceClient) RenameSentryPrivilege(ctx context.Context, request *TRenamePrivilegesRequest) (r *TRenamePrivilegesResponse, err error) {
  if err = p.sendRenameSentryPrivilege(request); err != nil { return }
  return p.recvRenameSentryPrivilege()
}

func (p *SentryGenericPolicyServiceClient) sendRenameSentryPrivilege(request *TRenamePrivilegesRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("rename_sentry_privilege", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SentryGenericPolicyServiceRenameSentryPrivilegeArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SentryGenericPolicyServiceClient) recvRenameSentryPrivilege() (value *TRenamePrivilegesResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "rename_sentry_privilege" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rename_sentry_privilege failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rename_sentry_privilege failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error42 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error43 error
    error43, err = error42.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error43
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rename_sentry_privilege failed: invalid message type")
    return
  }
  result := SentryGenericPolicyServiceRenameSentryPrivilegeResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}


type SentryGenericPolicyServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler SentryGenericPolicyService
}

func (p *SentryGenericPolicyServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *SentryGenericPolicyServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *SentryGenericPolicyServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewSentryGenericPolicyServiceProcessor(handler SentryGenericPolicyService) *SentryGenericPolicyServiceProcessor {

  self44 := &SentryGenericPolicyServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self44.processorMap["create_sentry_role"] = &sentryGenericPolicyServiceProcessorCreateSentryRole{handler:handler}
  self44.processorMap["drop_sentry_role"] = &sentryGenericPolicyServiceProcessorDropSentryRole{handler:handler}
  self44.processorMap["alter_sentry_role_grant_privilege"] = &sentryGenericPolicyServiceProcessorAlterSentryRoleGrantPrivilege{handler:handler}
  self44.processorMap["alter_sentry_role_revoke_privilege"] = &sentryGenericPolicyServiceProcessorAlterSentryRoleRevokePrivilege{handler:handler}
  self44.processorMap["alter_sentry_role_add_groups"] = &sentryGenericPolicyServiceProcessorAlterSentryRoleAddGroups{handler:handler}
  self44.processorMap["alter_sentry_role_delete_groups"] = &sentryGenericPolicyServiceProcessorAlterSentryRoleDeleteGroups{handler:handler}
  self44.processorMap["list_sentry_roles_by_group"] = &sentryGenericPolicyServiceProcessorListSentryRolesByGroup{handler:handler}
  self44.processorMap["list_sentry_privileges_by_role"] = &sentryGenericPolicyServiceProcessorListSentryPrivilegesByRole{handler:handler}
  self44.processorMap["list_sentry_privileges_for_provider"] = &sentryGenericPolicyServiceProcessorListSentryPrivilegesForProvider{handler:handler}
  self44.processorMap["list_sentry_privileges_by_authorizable"] = &sentryGenericPolicyServiceProcessorListSentryPrivilegesByAuthorizable{handler:handler}
  self44.processorMap["drop_sentry_privilege"] = &sentryGenericPolicyServiceProcessorDropSentryPrivilege{handler:handler}
  self44.processorMap["rename_sentry_privilege"] = &sentryGenericPolicyServiceProcessorRenameSentryPrivilege{handler:handler}
return self44
}

func (p *SentryGenericPolicyServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x45 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x45.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x45

}

type sentryGenericPolicyServiceProcessorCreateSentryRole struct {
  handler SentryGenericPolicyService
}

func (p *sentryGenericPolicyServiceProcessorCreateSentryRole) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SentryGenericPolicyServiceCreateSentryRoleArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("create_sentry_role", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SentryGenericPolicyServiceCreateSentryRoleResult{}
var retval *TCreateSentryRoleResponse
  var err2 error
  if retval, err2 = p.handler.CreateSentryRole(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_sentry_role: " + err2.Error())
    oprot.WriteMessageBegin("create_sentry_role", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("create_sentry_role", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type sentryGenericPolicyServiceProcessorDropSentryRole struct {
  handler SentryGenericPolicyService
}

func (p *sentryGenericPolicyServiceProcessorDropSentryRole) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SentryGenericPolicyServiceDropSentryRoleArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("drop_sentry_role", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SentryGenericPolicyServiceDropSentryRoleResult{}
var retval *TDropSentryRoleResponse
  var err2 error
  if retval, err2 = p.handler.DropSentryRole(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_sentry_role: " + err2.Error())
    oprot.WriteMessageBegin("drop_sentry_role", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("drop_sentry_role", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type sentryGenericPolicyServiceProcessorAlterSentryRoleGrantPrivilege struct {
  handler SentryGenericPolicyService
}

func (p *sentryGenericPolicyServiceProcessorAlterSentryRoleGrantPrivilege) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("alter_sentry_role_grant_privilege", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeResult{}
var retval *TAlterSentryRoleGrantPrivilegeResponse
  var err2 error
  if retval, err2 = p.handler.AlterSentryRoleGrantPrivilege(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_sentry_role_grant_privilege: " + err2.Error())
    oprot.WriteMessageBegin("alter_sentry_role_grant_privilege", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("alter_sentry_role_grant_privilege", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type sentryGenericPolicyServiceProcessorAlterSentryRoleRevokePrivilege struct {
  handler SentryGenericPolicyService
}

func (p *sentryGenericPolicyServiceProcessorAlterSentryRoleRevokePrivilege) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("alter_sentry_role_revoke_privilege", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeResult{}
var retval *TAlterSentryRoleRevokePrivilegeResponse
  var err2 error
  if retval, err2 = p.handler.AlterSentryRoleRevokePrivilege(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_sentry_role_revoke_privilege: " + err2.Error())
    oprot.WriteMessageBegin("alter_sentry_role_revoke_privilege", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("alter_sentry_role_revoke_privilege", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type sentryGenericPolicyServiceProcessorAlterSentryRoleAddGroups struct {
  handler SentryGenericPolicyService
}

func (p *sentryGenericPolicyServiceProcessorAlterSentryRoleAddGroups) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SentryGenericPolicyServiceAlterSentryRoleAddGroupsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("alter_sentry_role_add_groups", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SentryGenericPolicyServiceAlterSentryRoleAddGroupsResult{}
var retval *TAlterSentryRoleAddGroupsResponse
  var err2 error
  if retval, err2 = p.handler.AlterSentryRoleAddGroups(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_sentry_role_add_groups: " + err2.Error())
    oprot.WriteMessageBegin("alter_sentry_role_add_groups", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("alter_sentry_role_add_groups", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type sentryGenericPolicyServiceProcessorAlterSentryRoleDeleteGroups struct {
  handler SentryGenericPolicyService
}

func (p *sentryGenericPolicyServiceProcessorAlterSentryRoleDeleteGroups) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("alter_sentry_role_delete_groups", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsResult{}
var retval *TAlterSentryRoleDeleteGroupsResponse
  var err2 error
  if retval, err2 = p.handler.AlterSentryRoleDeleteGroups(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_sentry_role_delete_groups: " + err2.Error())
    oprot.WriteMessageBegin("alter_sentry_role_delete_groups", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("alter_sentry_role_delete_groups", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type sentryGenericPolicyServiceProcessorListSentryRolesByGroup struct {
  handler SentryGenericPolicyService
}

func (p *sentryGenericPolicyServiceProcessorListSentryRolesByGroup) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SentryGenericPolicyServiceListSentryRolesByGroupArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("list_sentry_roles_by_group", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SentryGenericPolicyServiceListSentryRolesByGroupResult{}
var retval *TListSentryRolesResponse
  var err2 error
  if retval, err2 = p.handler.ListSentryRolesByGroup(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing list_sentry_roles_by_group: " + err2.Error())
    oprot.WriteMessageBegin("list_sentry_roles_by_group", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("list_sentry_roles_by_group", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type sentryGenericPolicyServiceProcessorListSentryPrivilegesByRole struct {
  handler SentryGenericPolicyService
}

func (p *sentryGenericPolicyServiceProcessorListSentryPrivilegesByRole) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SentryGenericPolicyServiceListSentryPrivilegesByRoleArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("list_sentry_privileges_by_role", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SentryGenericPolicyServiceListSentryPrivilegesByRoleResult{}
var retval *TListSentryPrivilegesResponse
  var err2 error
  if retval, err2 = p.handler.ListSentryPrivilegesByRole(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing list_sentry_privileges_by_role: " + err2.Error())
    oprot.WriteMessageBegin("list_sentry_privileges_by_role", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("list_sentry_privileges_by_role", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type sentryGenericPolicyServiceProcessorListSentryPrivilegesForProvider struct {
  handler SentryGenericPolicyService
}

func (p *sentryGenericPolicyServiceProcessorListSentryPrivilegesForProvider) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SentryGenericPolicyServiceListSentryPrivilegesForProviderArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("list_sentry_privileges_for_provider", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SentryGenericPolicyServiceListSentryPrivilegesForProviderResult{}
var retval *TListSentryPrivilegesForProviderResponse
  var err2 error
  if retval, err2 = p.handler.ListSentryPrivilegesForProvider(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing list_sentry_privileges_for_provider: " + err2.Error())
    oprot.WriteMessageBegin("list_sentry_privileges_for_provider", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("list_sentry_privileges_for_provider", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type sentryGenericPolicyServiceProcessorListSentryPrivilegesByAuthorizable struct {
  handler SentryGenericPolicyService
}

func (p *sentryGenericPolicyServiceProcessorListSentryPrivilegesByAuthorizable) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("list_sentry_privileges_by_authorizable", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableResult{}
var retval *TListSentryPrivilegesByAuthResponse
  var err2 error
  if retval, err2 = p.handler.ListSentryPrivilegesByAuthorizable(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing list_sentry_privileges_by_authorizable: " + err2.Error())
    oprot.WriteMessageBegin("list_sentry_privileges_by_authorizable", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("list_sentry_privileges_by_authorizable", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type sentryGenericPolicyServiceProcessorDropSentryPrivilege struct {
  handler SentryGenericPolicyService
}

func (p *sentryGenericPolicyServiceProcessorDropSentryPrivilege) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SentryGenericPolicyServiceDropSentryPrivilegeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("drop_sentry_privilege", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SentryGenericPolicyServiceDropSentryPrivilegeResult{}
var retval *TDropPrivilegesResponse
  var err2 error
  if retval, err2 = p.handler.DropSentryPrivilege(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_sentry_privilege: " + err2.Error())
    oprot.WriteMessageBegin("drop_sentry_privilege", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("drop_sentry_privilege", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type sentryGenericPolicyServiceProcessorRenameSentryPrivilege struct {
  handler SentryGenericPolicyService
}

func (p *sentryGenericPolicyServiceProcessorRenameSentryPrivilege) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SentryGenericPolicyServiceRenameSentryPrivilegeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("rename_sentry_privilege", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SentryGenericPolicyServiceRenameSentryPrivilegeResult{}
var retval *TRenamePrivilegesResponse
  var err2 error
  if retval, err2 = p.handler.RenameSentryPrivilege(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rename_sentry_privilege: " + err2.Error())
    oprot.WriteMessageBegin("rename_sentry_privilege", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("rename_sentry_privilege", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Request
type SentryGenericPolicyServiceCreateSentryRoleArgs struct {
  Request *TCreateSentryRoleRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSentryGenericPolicyServiceCreateSentryRoleArgs() *SentryGenericPolicyServiceCreateSentryRoleArgs {
  return &SentryGenericPolicyServiceCreateSentryRoleArgs{}
}

var SentryGenericPolicyServiceCreateSentryRoleArgs_Request_DEFAULT *TCreateSentryRoleRequest
func (p *SentryGenericPolicyServiceCreateSentryRoleArgs) GetRequest() *TCreateSentryRoleRequest {
  if !p.IsSetRequest() {
    return SentryGenericPolicyServiceCreateSentryRoleArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SentryGenericPolicyServiceCreateSentryRoleArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SentryGenericPolicyServiceCreateSentryRoleArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryGenericPolicyServiceCreateSentryRoleArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &TCreateSentryRoleRequest{
  ProtocolVersion: 2,
}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SentryGenericPolicyServiceCreateSentryRoleArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("create_sentry_role_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryGenericPolicyServiceCreateSentryRoleArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SentryGenericPolicyServiceCreateSentryRoleArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryGenericPolicyServiceCreateSentryRoleArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryGenericPolicyServiceCreateSentryRoleResult struct {
  Success *TCreateSentryRoleResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSentryGenericPolicyServiceCreateSentryRoleResult() *SentryGenericPolicyServiceCreateSentryRoleResult {
  return &SentryGenericPolicyServiceCreateSentryRoleResult{}
}

var SentryGenericPolicyServiceCreateSentryRoleResult_Success_DEFAULT *TCreateSentryRoleResponse
func (p *SentryGenericPolicyServiceCreateSentryRoleResult) GetSuccess() *TCreateSentryRoleResponse {
  if !p.IsSetSuccess() {
    return SentryGenericPolicyServiceCreateSentryRoleResult_Success_DEFAULT
  }
return p.Success
}
func (p *SentryGenericPolicyServiceCreateSentryRoleResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SentryGenericPolicyServiceCreateSentryRoleResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryGenericPolicyServiceCreateSentryRoleResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TCreateSentryRoleResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SentryGenericPolicyServiceCreateSentryRoleResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("create_sentry_role_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryGenericPolicyServiceCreateSentryRoleResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SentryGenericPolicyServiceCreateSentryRoleResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryGenericPolicyServiceCreateSentryRoleResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryGenericPolicyServiceDropSentryRoleArgs struct {
  Request *TDropSentryRoleRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSentryGenericPolicyServiceDropSentryRoleArgs() *SentryGenericPolicyServiceDropSentryRoleArgs {
  return &SentryGenericPolicyServiceDropSentryRoleArgs{}
}

var SentryGenericPolicyServiceDropSentryRoleArgs_Request_DEFAULT *TDropSentryRoleRequest
func (p *SentryGenericPolicyServiceDropSentryRoleArgs) GetRequest() *TDropSentryRoleRequest {
  if !p.IsSetRequest() {
    return SentryGenericPolicyServiceDropSentryRoleArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SentryGenericPolicyServiceDropSentryRoleArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SentryGenericPolicyServiceDropSentryRoleArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryGenericPolicyServiceDropSentryRoleArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &TDropSentryRoleRequest{
  ProtocolVersion: 2,
}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SentryGenericPolicyServiceDropSentryRoleArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("drop_sentry_role_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryGenericPolicyServiceDropSentryRoleArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SentryGenericPolicyServiceDropSentryRoleArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryGenericPolicyServiceDropSentryRoleArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryGenericPolicyServiceDropSentryRoleResult struct {
  Success *TDropSentryRoleResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSentryGenericPolicyServiceDropSentryRoleResult() *SentryGenericPolicyServiceDropSentryRoleResult {
  return &SentryGenericPolicyServiceDropSentryRoleResult{}
}

var SentryGenericPolicyServiceDropSentryRoleResult_Success_DEFAULT *TDropSentryRoleResponse
func (p *SentryGenericPolicyServiceDropSentryRoleResult) GetSuccess() *TDropSentryRoleResponse {
  if !p.IsSetSuccess() {
    return SentryGenericPolicyServiceDropSentryRoleResult_Success_DEFAULT
  }
return p.Success
}
func (p *SentryGenericPolicyServiceDropSentryRoleResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SentryGenericPolicyServiceDropSentryRoleResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryGenericPolicyServiceDropSentryRoleResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TDropSentryRoleResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SentryGenericPolicyServiceDropSentryRoleResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("drop_sentry_role_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryGenericPolicyServiceDropSentryRoleResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SentryGenericPolicyServiceDropSentryRoleResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryGenericPolicyServiceDropSentryRoleResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeArgs struct {
  Request *TAlterSentryRoleGrantPrivilegeRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeArgs() *SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeArgs {
  return &SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeArgs{}
}

var SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeArgs_Request_DEFAULT *TAlterSentryRoleGrantPrivilegeRequest
func (p *SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeArgs) GetRequest() *TAlterSentryRoleGrantPrivilegeRequest {
  if !p.IsSetRequest() {
    return SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &TAlterSentryRoleGrantPrivilegeRequest{
  ProtocolVersion: 2,
}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("alter_sentry_role_grant_privilege_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeResult struct {
  Success *TAlterSentryRoleGrantPrivilegeResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeResult() *SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeResult {
  return &SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeResult{}
}

var SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeResult_Success_DEFAULT *TAlterSentryRoleGrantPrivilegeResponse
func (p *SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeResult) GetSuccess() *TAlterSentryRoleGrantPrivilegeResponse {
  if !p.IsSetSuccess() {
    return SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeResult_Success_DEFAULT
  }
return p.Success
}
func (p *SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TAlterSentryRoleGrantPrivilegeResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("alter_sentry_role_grant_privilege_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeArgs struct {
  Request *TAlterSentryRoleRevokePrivilegeRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeArgs() *SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeArgs {
  return &SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeArgs{}
}

var SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeArgs_Request_DEFAULT *TAlterSentryRoleRevokePrivilegeRequest
func (p *SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeArgs) GetRequest() *TAlterSentryRoleRevokePrivilegeRequest {
  if !p.IsSetRequest() {
    return SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &TAlterSentryRoleRevokePrivilegeRequest{
  ProtocolVersion: 2,
}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("alter_sentry_role_revoke_privilege_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeResult struct {
  Success *TAlterSentryRoleRevokePrivilegeResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeResult() *SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeResult {
  return &SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeResult{}
}

var SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeResult_Success_DEFAULT *TAlterSentryRoleRevokePrivilegeResponse
func (p *SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeResult) GetSuccess() *TAlterSentryRoleRevokePrivilegeResponse {
  if !p.IsSetSuccess() {
    return SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeResult_Success_DEFAULT
  }
return p.Success
}
func (p *SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TAlterSentryRoleRevokePrivilegeResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("alter_sentry_role_revoke_privilege_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryGenericPolicyServiceAlterSentryRoleAddGroupsArgs struct {
  Request *TAlterSentryRoleAddGroupsRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSentryGenericPolicyServiceAlterSentryRoleAddGroupsArgs() *SentryGenericPolicyServiceAlterSentryRoleAddGroupsArgs {
  return &SentryGenericPolicyServiceAlterSentryRoleAddGroupsArgs{}
}

var SentryGenericPolicyServiceAlterSentryRoleAddGroupsArgs_Request_DEFAULT *TAlterSentryRoleAddGroupsRequest
func (p *SentryGenericPolicyServiceAlterSentryRoleAddGroupsArgs) GetRequest() *TAlterSentryRoleAddGroupsRequest {
  if !p.IsSetRequest() {
    return SentryGenericPolicyServiceAlterSentryRoleAddGroupsArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SentryGenericPolicyServiceAlterSentryRoleAddGroupsArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleAddGroupsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleAddGroupsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &TAlterSentryRoleAddGroupsRequest{
  ProtocolVersion: 2,
}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleAddGroupsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("alter_sentry_role_add_groups_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleAddGroupsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SentryGenericPolicyServiceAlterSentryRoleAddGroupsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryGenericPolicyServiceAlterSentryRoleAddGroupsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryGenericPolicyServiceAlterSentryRoleAddGroupsResult struct {
  Success *TAlterSentryRoleAddGroupsResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSentryGenericPolicyServiceAlterSentryRoleAddGroupsResult() *SentryGenericPolicyServiceAlterSentryRoleAddGroupsResult {
  return &SentryGenericPolicyServiceAlterSentryRoleAddGroupsResult{}
}

var SentryGenericPolicyServiceAlterSentryRoleAddGroupsResult_Success_DEFAULT *TAlterSentryRoleAddGroupsResponse
func (p *SentryGenericPolicyServiceAlterSentryRoleAddGroupsResult) GetSuccess() *TAlterSentryRoleAddGroupsResponse {
  if !p.IsSetSuccess() {
    return SentryGenericPolicyServiceAlterSentryRoleAddGroupsResult_Success_DEFAULT
  }
return p.Success
}
func (p *SentryGenericPolicyServiceAlterSentryRoleAddGroupsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleAddGroupsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleAddGroupsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TAlterSentryRoleAddGroupsResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleAddGroupsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("alter_sentry_role_add_groups_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleAddGroupsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SentryGenericPolicyServiceAlterSentryRoleAddGroupsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryGenericPolicyServiceAlterSentryRoleAddGroupsResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsArgs struct {
  Request *TAlterSentryRoleDeleteGroupsRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSentryGenericPolicyServiceAlterSentryRoleDeleteGroupsArgs() *SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsArgs {
  return &SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsArgs{}
}

var SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsArgs_Request_DEFAULT *TAlterSentryRoleDeleteGroupsRequest
func (p *SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsArgs) GetRequest() *TAlterSentryRoleDeleteGroupsRequest {
  if !p.IsSetRequest() {
    return SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &TAlterSentryRoleDeleteGroupsRequest{
  ProtocolVersion: 2,
}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("alter_sentry_role_delete_groups_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsResult struct {
  Success *TAlterSentryRoleDeleteGroupsResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSentryGenericPolicyServiceAlterSentryRoleDeleteGroupsResult() *SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsResult {
  return &SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsResult{}
}

var SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsResult_Success_DEFAULT *TAlterSentryRoleDeleteGroupsResponse
func (p *SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsResult) GetSuccess() *TAlterSentryRoleDeleteGroupsResponse {
  if !p.IsSetSuccess() {
    return SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsResult_Success_DEFAULT
  }
return p.Success
}
func (p *SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TAlterSentryRoleDeleteGroupsResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("alter_sentry_role_delete_groups_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryGenericPolicyServiceListSentryRolesByGroupArgs struct {
  Request *TListSentryRolesRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSentryGenericPolicyServiceListSentryRolesByGroupArgs() *SentryGenericPolicyServiceListSentryRolesByGroupArgs {
  return &SentryGenericPolicyServiceListSentryRolesByGroupArgs{}
}

var SentryGenericPolicyServiceListSentryRolesByGroupArgs_Request_DEFAULT *TListSentryRolesRequest
func (p *SentryGenericPolicyServiceListSentryRolesByGroupArgs) GetRequest() *TListSentryRolesRequest {
  if !p.IsSetRequest() {
    return SentryGenericPolicyServiceListSentryRolesByGroupArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SentryGenericPolicyServiceListSentryRolesByGroupArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SentryGenericPolicyServiceListSentryRolesByGroupArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryGenericPolicyServiceListSentryRolesByGroupArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &TListSentryRolesRequest{
  ProtocolVersion: 2,
}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SentryGenericPolicyServiceListSentryRolesByGroupArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("list_sentry_roles_by_group_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryGenericPolicyServiceListSentryRolesByGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SentryGenericPolicyServiceListSentryRolesByGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryGenericPolicyServiceListSentryRolesByGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryGenericPolicyServiceListSentryRolesByGroupResult struct {
  Success *TListSentryRolesResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSentryGenericPolicyServiceListSentryRolesByGroupResult() *SentryGenericPolicyServiceListSentryRolesByGroupResult {
  return &SentryGenericPolicyServiceListSentryRolesByGroupResult{}
}

var SentryGenericPolicyServiceListSentryRolesByGroupResult_Success_DEFAULT *TListSentryRolesResponse
func (p *SentryGenericPolicyServiceListSentryRolesByGroupResult) GetSuccess() *TListSentryRolesResponse {
  if !p.IsSetSuccess() {
    return SentryGenericPolicyServiceListSentryRolesByGroupResult_Success_DEFAULT
  }
return p.Success
}
func (p *SentryGenericPolicyServiceListSentryRolesByGroupResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SentryGenericPolicyServiceListSentryRolesByGroupResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryGenericPolicyServiceListSentryRolesByGroupResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TListSentryRolesResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SentryGenericPolicyServiceListSentryRolesByGroupResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("list_sentry_roles_by_group_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryGenericPolicyServiceListSentryRolesByGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SentryGenericPolicyServiceListSentryRolesByGroupResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryGenericPolicyServiceListSentryRolesByGroupResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryGenericPolicyServiceListSentryPrivilegesByRoleArgs struct {
  Request *TListSentryPrivilegesRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSentryGenericPolicyServiceListSentryPrivilegesByRoleArgs() *SentryGenericPolicyServiceListSentryPrivilegesByRoleArgs {
  return &SentryGenericPolicyServiceListSentryPrivilegesByRoleArgs{}
}

var SentryGenericPolicyServiceListSentryPrivilegesByRoleArgs_Request_DEFAULT *TListSentryPrivilegesRequest
func (p *SentryGenericPolicyServiceListSentryPrivilegesByRoleArgs) GetRequest() *TListSentryPrivilegesRequest {
  if !p.IsSetRequest() {
    return SentryGenericPolicyServiceListSentryPrivilegesByRoleArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SentryGenericPolicyServiceListSentryPrivilegesByRoleArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesByRoleArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesByRoleArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &TListSentryPrivilegesRequest{
  ProtocolVersion: 2,
}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesByRoleArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("list_sentry_privileges_by_role_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesByRoleArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesByRoleArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryGenericPolicyServiceListSentryPrivilegesByRoleArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryGenericPolicyServiceListSentryPrivilegesByRoleResult struct {
  Success *TListSentryPrivilegesResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSentryGenericPolicyServiceListSentryPrivilegesByRoleResult() *SentryGenericPolicyServiceListSentryPrivilegesByRoleResult {
  return &SentryGenericPolicyServiceListSentryPrivilegesByRoleResult{}
}

var SentryGenericPolicyServiceListSentryPrivilegesByRoleResult_Success_DEFAULT *TListSentryPrivilegesResponse
func (p *SentryGenericPolicyServiceListSentryPrivilegesByRoleResult) GetSuccess() *TListSentryPrivilegesResponse {
  if !p.IsSetSuccess() {
    return SentryGenericPolicyServiceListSentryPrivilegesByRoleResult_Success_DEFAULT
  }
return p.Success
}
func (p *SentryGenericPolicyServiceListSentryPrivilegesByRoleResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesByRoleResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesByRoleResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TListSentryPrivilegesResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesByRoleResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("list_sentry_privileges_by_role_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesByRoleResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesByRoleResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryGenericPolicyServiceListSentryPrivilegesByRoleResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryGenericPolicyServiceListSentryPrivilegesForProviderArgs struct {
  Request *TListSentryPrivilegesForProviderRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSentryGenericPolicyServiceListSentryPrivilegesForProviderArgs() *SentryGenericPolicyServiceListSentryPrivilegesForProviderArgs {
  return &SentryGenericPolicyServiceListSentryPrivilegesForProviderArgs{}
}

var SentryGenericPolicyServiceListSentryPrivilegesForProviderArgs_Request_DEFAULT *TListSentryPrivilegesForProviderRequest
func (p *SentryGenericPolicyServiceListSentryPrivilegesForProviderArgs) GetRequest() *TListSentryPrivilegesForProviderRequest {
  if !p.IsSetRequest() {
    return SentryGenericPolicyServiceListSentryPrivilegesForProviderArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SentryGenericPolicyServiceListSentryPrivilegesForProviderArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesForProviderArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesForProviderArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &TListSentryPrivilegesForProviderRequest{
  ProtocolVersion: 2,
}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesForProviderArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("list_sentry_privileges_for_provider_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesForProviderArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesForProviderArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryGenericPolicyServiceListSentryPrivilegesForProviderArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryGenericPolicyServiceListSentryPrivilegesForProviderResult struct {
  Success *TListSentryPrivilegesForProviderResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSentryGenericPolicyServiceListSentryPrivilegesForProviderResult() *SentryGenericPolicyServiceListSentryPrivilegesForProviderResult {
  return &SentryGenericPolicyServiceListSentryPrivilegesForProviderResult{}
}

var SentryGenericPolicyServiceListSentryPrivilegesForProviderResult_Success_DEFAULT *TListSentryPrivilegesForProviderResponse
func (p *SentryGenericPolicyServiceListSentryPrivilegesForProviderResult) GetSuccess() *TListSentryPrivilegesForProviderResponse {
  if !p.IsSetSuccess() {
    return SentryGenericPolicyServiceListSentryPrivilegesForProviderResult_Success_DEFAULT
  }
return p.Success
}
func (p *SentryGenericPolicyServiceListSentryPrivilegesForProviderResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesForProviderResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesForProviderResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TListSentryPrivilegesForProviderResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesForProviderResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("list_sentry_privileges_for_provider_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesForProviderResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesForProviderResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryGenericPolicyServiceListSentryPrivilegesForProviderResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableArgs struct {
  Request *TListSentryPrivilegesByAuthRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSentryGenericPolicyServiceListSentryPrivilegesByAuthorizableArgs() *SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableArgs {
  return &SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableArgs{}
}

var SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableArgs_Request_DEFAULT *TListSentryPrivilegesByAuthRequest
func (p *SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableArgs) GetRequest() *TListSentryPrivilegesByAuthRequest {
  if !p.IsSetRequest() {
    return SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &TListSentryPrivilegesByAuthRequest{
  ProtocolVersion: 2,
}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("list_sentry_privileges_by_authorizable_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableResult struct {
  Success *TListSentryPrivilegesByAuthResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSentryGenericPolicyServiceListSentryPrivilegesByAuthorizableResult() *SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableResult {
  return &SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableResult{}
}

var SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableResult_Success_DEFAULT *TListSentryPrivilegesByAuthResponse
func (p *SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableResult) GetSuccess() *TListSentryPrivilegesByAuthResponse {
  if !p.IsSetSuccess() {
    return SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableResult_Success_DEFAULT
  }
return p.Success
}
func (p *SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TListSentryPrivilegesByAuthResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("list_sentry_privileges_by_authorizable_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryGenericPolicyServiceDropSentryPrivilegeArgs struct {
  Request *TDropPrivilegesRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSentryGenericPolicyServiceDropSentryPrivilegeArgs() *SentryGenericPolicyServiceDropSentryPrivilegeArgs {
  return &SentryGenericPolicyServiceDropSentryPrivilegeArgs{}
}

var SentryGenericPolicyServiceDropSentryPrivilegeArgs_Request_DEFAULT *TDropPrivilegesRequest
func (p *SentryGenericPolicyServiceDropSentryPrivilegeArgs) GetRequest() *TDropPrivilegesRequest {
  if !p.IsSetRequest() {
    return SentryGenericPolicyServiceDropSentryPrivilegeArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SentryGenericPolicyServiceDropSentryPrivilegeArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SentryGenericPolicyServiceDropSentryPrivilegeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryGenericPolicyServiceDropSentryPrivilegeArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &TDropPrivilegesRequest{
  ProtocolVersion: 2,
}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SentryGenericPolicyServiceDropSentryPrivilegeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("drop_sentry_privilege_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryGenericPolicyServiceDropSentryPrivilegeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SentryGenericPolicyServiceDropSentryPrivilegeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryGenericPolicyServiceDropSentryPrivilegeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryGenericPolicyServiceDropSentryPrivilegeResult struct {
  Success *TDropPrivilegesResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSentryGenericPolicyServiceDropSentryPrivilegeResult() *SentryGenericPolicyServiceDropSentryPrivilegeResult {
  return &SentryGenericPolicyServiceDropSentryPrivilegeResult{}
}

var SentryGenericPolicyServiceDropSentryPrivilegeResult_Success_DEFAULT *TDropPrivilegesResponse
func (p *SentryGenericPolicyServiceDropSentryPrivilegeResult) GetSuccess() *TDropPrivilegesResponse {
  if !p.IsSetSuccess() {
    return SentryGenericPolicyServiceDropSentryPrivilegeResult_Success_DEFAULT
  }
return p.Success
}
func (p *SentryGenericPolicyServiceDropSentryPrivilegeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SentryGenericPolicyServiceDropSentryPrivilegeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryGenericPolicyServiceDropSentryPrivilegeResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TDropPrivilegesResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SentryGenericPolicyServiceDropSentryPrivilegeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("drop_sentry_privilege_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryGenericPolicyServiceDropSentryPrivilegeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SentryGenericPolicyServiceDropSentryPrivilegeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryGenericPolicyServiceDropSentryPrivilegeResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryGenericPolicyServiceRenameSentryPrivilegeArgs struct {
  Request *TRenamePrivilegesRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSentryGenericPolicyServiceRenameSentryPrivilegeArgs() *SentryGenericPolicyServiceRenameSentryPrivilegeArgs {
  return &SentryGenericPolicyServiceRenameSentryPrivilegeArgs{}
}

var SentryGenericPolicyServiceRenameSentryPrivilegeArgs_Request_DEFAULT *TRenamePrivilegesRequest
func (p *SentryGenericPolicyServiceRenameSentryPrivilegeArgs) GetRequest() *TRenamePrivilegesRequest {
  if !p.IsSetRequest() {
    return SentryGenericPolicyServiceRenameSentryPrivilegeArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SentryGenericPolicyServiceRenameSentryPrivilegeArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SentryGenericPolicyServiceRenameSentryPrivilegeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryGenericPolicyServiceRenameSentryPrivilegeArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &TRenamePrivilegesRequest{
  ProtocolVersion: 2,
}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SentryGenericPolicyServiceRenameSentryPrivilegeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("rename_sentry_privilege_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryGenericPolicyServiceRenameSentryPrivilegeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SentryGenericPolicyServiceRenameSentryPrivilegeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryGenericPolicyServiceRenameSentryPrivilegeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryGenericPolicyServiceRenameSentryPrivilegeResult struct {
  Success *TRenamePrivilegesResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSentryGenericPolicyServiceRenameSentryPrivilegeResult() *SentryGenericPolicyServiceRenameSentryPrivilegeResult {
  return &SentryGenericPolicyServiceRenameSentryPrivilegeResult{}
}

var SentryGenericPolicyServiceRenameSentryPrivilegeResult_Success_DEFAULT *TRenamePrivilegesResponse
func (p *SentryGenericPolicyServiceRenameSentryPrivilegeResult) GetSuccess() *TRenamePrivilegesResponse {
  if !p.IsSetSuccess() {
    return SentryGenericPolicyServiceRenameSentryPrivilegeResult_Success_DEFAULT
  }
return p.Success
}
func (p *SentryGenericPolicyServiceRenameSentryPrivilegeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SentryGenericPolicyServiceRenameSentryPrivilegeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryGenericPolicyServiceRenameSentryPrivilegeResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TRenamePrivilegesResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SentryGenericPolicyServiceRenameSentryPrivilegeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("rename_sentry_privilege_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryGenericPolicyServiceRenameSentryPrivilegeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SentryGenericPolicyServiceRenameSentryPrivilegeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryGenericPolicyServiceRenameSentryPrivilegeResult(%+v)", *p)
}


