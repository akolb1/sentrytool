// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package sentry_policy_service

import (
	"bytes"
	"reflect"
	"database/sql/driver"
	"errors"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"github.com/akolb1/sentrytool/sentryapi/thrift/gen-go/sentry_common_service"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = sentry_common_service.GoUnusedProtection__
type TSentryGrantOption int64
const (
  TSentryGrantOption_TRUE TSentryGrantOption = 1
  TSentryGrantOption_FALSE TSentryGrantOption = 0
  TSentryGrantOption_UNSET TSentryGrantOption = -1
)

func (p TSentryGrantOption) String() string {
  switch p {
  case TSentryGrantOption_TRUE: return "TRUE"
  case TSentryGrantOption_FALSE: return "FALSE"
  case TSentryGrantOption_UNSET: return "UNSET"
  }
  return "<UNSET>"
}

func TSentryGrantOptionFromString(s string) (TSentryGrantOption, error) {
  switch s {
  case "TRUE": return TSentryGrantOption_TRUE, nil 
  case "FALSE": return TSentryGrantOption_FALSE, nil 
  case "UNSET": return TSentryGrantOption_UNSET, nil 
  }
  return TSentryGrantOption(0), fmt.Errorf("not a valid TSentryGrantOption string")
}


func TSentryGrantOptionPtr(v TSentryGrantOption) *TSentryGrantOption { return &v }

func (p TSentryGrantOption) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TSentryGrantOption) UnmarshalText(text []byte) error {
q, err := TSentryGrantOptionFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TSentryGrantOption) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TSentryGrantOption(v)
return nil
}

func (p * TSentryGrantOption) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - PrivilegeScope
//  - ServerName
//  - DbName
//  - TableName
//  - URI
//  - Action
//  - CreateTime
//  - GrantOption
//  - ColumnName
type TSentryPrivilege struct {
  PrivilegeScope string `thrift:"privilegeScope,1,required" db:"privilegeScope" json:"privilegeScope"`
  // unused field # 2
  ServerName string `thrift:"serverName,3,required" db:"serverName" json:"serverName"`
  DbName string `thrift:"dbName,4" db:"dbName" json:"dbName,omitempty"`
  TableName string `thrift:"tableName,5" db:"tableName" json:"tableName,omitempty"`
  URI string `thrift:"URI,6" db:"URI" json:"URI,omitempty"`
  Action string `thrift:"action,7,required" db:"action" json:"action"`
  CreateTime *int64 `thrift:"createTime,8" db:"createTime" json:"createTime,omitempty"`
  GrantOption TSentryGrantOption `thrift:"grantOption,9" db:"grantOption" json:"grantOption,omitempty"`
  ColumnName string `thrift:"columnName,10" db:"columnName" json:"columnName,omitempty"`
}

func NewTSentryPrivilege() *TSentryPrivilege {
  return &TSentryPrivilege{
GrantOption: 0,
}
}


func (p *TSentryPrivilege) GetPrivilegeScope() string {
  return p.PrivilegeScope
}

func (p *TSentryPrivilege) GetServerName() string {
  return p.ServerName
}
var TSentryPrivilege_DbName_DEFAULT string = ""

func (p *TSentryPrivilege) GetDbName() string {
  return p.DbName
}
var TSentryPrivilege_TableName_DEFAULT string = ""

func (p *TSentryPrivilege) GetTableName() string {
  return p.TableName
}
var TSentryPrivilege_URI_DEFAULT string = ""

func (p *TSentryPrivilege) GetURI() string {
  return p.URI
}

func (p *TSentryPrivilege) GetAction() string {
  return p.Action
}
var TSentryPrivilege_CreateTime_DEFAULT int64
func (p *TSentryPrivilege) GetCreateTime() int64 {
  if !p.IsSetCreateTime() {
    return TSentryPrivilege_CreateTime_DEFAULT
  }
return *p.CreateTime
}
var TSentryPrivilege_GrantOption_DEFAULT TSentryGrantOption = 0

func (p *TSentryPrivilege) GetGrantOption() TSentryGrantOption {
  return p.GrantOption
}
var TSentryPrivilege_ColumnName_DEFAULT string = ""

func (p *TSentryPrivilege) GetColumnName() string {
  return p.ColumnName
}
func (p *TSentryPrivilege) IsSetDbName() bool {
  return p.DbName != TSentryPrivilege_DbName_DEFAULT
}

func (p *TSentryPrivilege) IsSetTableName() bool {
  return p.TableName != TSentryPrivilege_TableName_DEFAULT
}

func (p *TSentryPrivilege) IsSetURI() bool {
  return p.URI != TSentryPrivilege_URI_DEFAULT
}

func (p *TSentryPrivilege) IsSetCreateTime() bool {
  return p.CreateTime != nil
}

func (p *TSentryPrivilege) IsSetGrantOption() bool {
  return p.GrantOption != TSentryPrivilege_GrantOption_DEFAULT
}

func (p *TSentryPrivilege) IsSetColumnName() bool {
  return p.ColumnName != TSentryPrivilege_ColumnName_DEFAULT
}

func (p *TSentryPrivilege) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetPrivilegeScope bool = false;
  var issetServerName bool = false;
  var issetAction bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetPrivilegeScope = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetServerName = true
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAction = true
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetPrivilegeScope{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PrivilegeScope is not set"));
  }
  if !issetServerName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ServerName is not set"));
  }
  if !issetAction{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Action is not set"));
  }
  return nil
}

func (p *TSentryPrivilege)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.PrivilegeScope = v
}
  return nil
}

func (p *TSentryPrivilege)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ServerName = v
}
  return nil
}

func (p *TSentryPrivilege)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *TSentryPrivilege)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.TableName = v
}
  return nil
}

func (p *TSentryPrivilege)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.URI = v
}
  return nil
}

func (p *TSentryPrivilege)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Action = v
}
  return nil
}

func (p *TSentryPrivilege)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.CreateTime = &v
}
  return nil
}

func (p *TSentryPrivilege)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  temp := TSentryGrantOption(v)
  p.GrantOption = temp
}
  return nil
}

func (p *TSentryPrivilege)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.ColumnName = v
}
  return nil
}

func (p *TSentryPrivilege) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TSentryPrivilege"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSentryPrivilege) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privilegeScope", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:privilegeScope: ", p), err) }
  if err := oprot.WriteString(string(p.PrivilegeScope)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privilegeScope (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:privilegeScope: ", p), err) }
  return err
}

func (p *TSentryPrivilege) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("serverName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:serverName: ", p), err) }
  if err := oprot.WriteString(string(p.ServerName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.serverName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:serverName: ", p), err) }
  return err
}

func (p *TSentryPrivilege) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetDbName() {
    if err := oprot.WriteFieldBegin("dbName", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:dbName: ", p), err) }
    if err := oprot.WriteString(string(p.DbName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.dbName (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:dbName: ", p), err) }
  }
  return err
}

func (p *TSentryPrivilege) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetTableName() {
    if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:tableName: ", p), err) }
    if err := oprot.WriteString(string(p.TableName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.tableName (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:tableName: ", p), err) }
  }
  return err
}

func (p *TSentryPrivilege) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetURI() {
    if err := oprot.WriteFieldBegin("URI", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:URI: ", p), err) }
    if err := oprot.WriteString(string(p.URI)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.URI (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:URI: ", p), err) }
  }
  return err
}

func (p *TSentryPrivilege) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("action", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:action: ", p), err) }
  if err := oprot.WriteString(string(p.Action)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.action (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:action: ", p), err) }
  return err
}

func (p *TSentryPrivilege) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetCreateTime() {
    if err := oprot.WriteFieldBegin("createTime", thrift.I64, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:createTime: ", p), err) }
    if err := oprot.WriteI64(int64(*p.CreateTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.createTime (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:createTime: ", p), err) }
  }
  return err
}

func (p *TSentryPrivilege) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetGrantOption() {
    if err := oprot.WriteFieldBegin("grantOption", thrift.I32, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:grantOption: ", p), err) }
    if err := oprot.WriteI32(int32(p.GrantOption)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.grantOption (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:grantOption: ", p), err) }
  }
  return err
}

func (p *TSentryPrivilege) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetColumnName() {
    if err := oprot.WriteFieldBegin("columnName", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:columnName: ", p), err) }
    if err := oprot.WriteString(string(p.ColumnName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.columnName (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:columnName: ", p), err) }
  }
  return err
}

func (p *TSentryPrivilege) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSentryPrivilege(%+v)", *p)
}

// Attributes:
//  - GroupName
type TSentryGroup struct {
  GroupName string `thrift:"groupName,1,required" db:"groupName" json:"groupName"`
}

func NewTSentryGroup() *TSentryGroup {
  return &TSentryGroup{}
}


func (p *TSentryGroup) GetGroupName() string {
  return p.GroupName
}
func (p *TSentryGroup) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetGroupName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGroupName = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetGroupName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GroupName is not set"));
  }
  return nil
}

func (p *TSentryGroup)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.GroupName = v
}
  return nil
}

func (p *TSentryGroup) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TSentryGroup"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSentryGroup) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("groupName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:groupName: ", p), err) }
  if err := oprot.WriteString(string(p.GroupName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.groupName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:groupName: ", p), err) }
  return err
}

func (p *TSentryGroup) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSentryGroup(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - RoleName
type TCreateSentryRoleRequest struct {
  ProtocolVersion int32 `thrift:"protocol_version,1,required" db:"protocol_version" json:"protocol_version"`
  RequestorUserName string `thrift:"requestorUserName,2,required" db:"requestorUserName" json:"requestorUserName"`
  RoleName string `thrift:"roleName,3,required" db:"roleName" json:"roleName"`
}

func NewTCreateSentryRoleRequest() *TCreateSentryRoleRequest {
  return &TCreateSentryRoleRequest{
ProtocolVersion: 2,
}
}


func (p *TCreateSentryRoleRequest) GetProtocolVersion() int32 {
  return p.ProtocolVersion
}

func (p *TCreateSentryRoleRequest) GetRequestorUserName() string {
  return p.RequestorUserName
}

func (p *TCreateSentryRoleRequest) GetRoleName() string {
  return p.RoleName
}
func (p *TCreateSentryRoleRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetProtocolVersion bool = false;
  var issetRequestorUserName bool = false;
  var issetRoleName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProtocolVersion = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRequestorUserName = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRoleName = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetProtocolVersion{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"));
  }
  if !issetRequestorUserName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"));
  }
  if !issetRoleName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoleName is not set"));
  }
  return nil
}

func (p *TCreateSentryRoleRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ProtocolVersion = v
}
  return nil
}

func (p *TCreateSentryRoleRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RequestorUserName = v
}
  return nil
}

func (p *TCreateSentryRoleRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RoleName = v
}
  return nil
}

func (p *TCreateSentryRoleRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TCreateSentryRoleRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TCreateSentryRoleRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err) }
  return err
}

func (p *TCreateSentryRoleRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err) }
  if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err) }
  return err
}

func (p *TCreateSentryRoleRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("roleName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roleName: ", p), err) }
  if err := oprot.WriteString(string(p.RoleName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.roleName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roleName: ", p), err) }
  return err
}

func (p *TCreateSentryRoleRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TCreateSentryRoleRequest(%+v)", *p)
}

// Attributes:
//  - Status
type TCreateSentryRoleResponse struct {
  Status *sentry_common_service.TSentryResponseStatus `thrift:"status,1,required" db:"status" json:"status"`
}

func NewTCreateSentryRoleResponse() *TCreateSentryRoleResponse {
  return &TCreateSentryRoleResponse{}
}

var TCreateSentryRoleResponse_Status_DEFAULT *sentry_common_service.TSentryResponseStatus
func (p *TCreateSentryRoleResponse) GetStatus() *sentry_common_service.TSentryResponseStatus {
  if !p.IsSetStatus() {
    return TCreateSentryRoleResponse_Status_DEFAULT
  }
return p.Status
}
func (p *TCreateSentryRoleResponse) IsSetStatus() bool {
  return p.Status != nil
}

func (p *TCreateSentryRoleResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetStatus bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetStatus = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetStatus{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"));
  }
  return nil
}

func (p *TCreateSentryRoleResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &sentry_common_service.TSentryResponseStatus{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *TCreateSentryRoleResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TCreateSentryRoleResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TCreateSentryRoleResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *TCreateSentryRoleResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TCreateSentryRoleResponse(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - RoleName
type TDropSentryRoleRequest struct {
  ProtocolVersion int32 `thrift:"protocol_version,1,required" db:"protocol_version" json:"protocol_version"`
  RequestorUserName string `thrift:"requestorUserName,2,required" db:"requestorUserName" json:"requestorUserName"`
  RoleName string `thrift:"roleName,3,required" db:"roleName" json:"roleName"`
}

func NewTDropSentryRoleRequest() *TDropSentryRoleRequest {
  return &TDropSentryRoleRequest{
ProtocolVersion: 2,
}
}


func (p *TDropSentryRoleRequest) GetProtocolVersion() int32 {
  return p.ProtocolVersion
}

func (p *TDropSentryRoleRequest) GetRequestorUserName() string {
  return p.RequestorUserName
}

func (p *TDropSentryRoleRequest) GetRoleName() string {
  return p.RoleName
}
func (p *TDropSentryRoleRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetProtocolVersion bool = false;
  var issetRequestorUserName bool = false;
  var issetRoleName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProtocolVersion = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRequestorUserName = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRoleName = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetProtocolVersion{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"));
  }
  if !issetRequestorUserName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"));
  }
  if !issetRoleName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoleName is not set"));
  }
  return nil
}

func (p *TDropSentryRoleRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ProtocolVersion = v
}
  return nil
}

func (p *TDropSentryRoleRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RequestorUserName = v
}
  return nil
}

func (p *TDropSentryRoleRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RoleName = v
}
  return nil
}

func (p *TDropSentryRoleRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TDropSentryRoleRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDropSentryRoleRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err) }
  return err
}

func (p *TDropSentryRoleRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err) }
  if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err) }
  return err
}

func (p *TDropSentryRoleRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("roleName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roleName: ", p), err) }
  if err := oprot.WriteString(string(p.RoleName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.roleName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roleName: ", p), err) }
  return err
}

func (p *TDropSentryRoleRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDropSentryRoleRequest(%+v)", *p)
}

// Attributes:
//  - Status
type TDropSentryRoleResponse struct {
  Status *sentry_common_service.TSentryResponseStatus `thrift:"status,1,required" db:"status" json:"status"`
}

func NewTDropSentryRoleResponse() *TDropSentryRoleResponse {
  return &TDropSentryRoleResponse{}
}

var TDropSentryRoleResponse_Status_DEFAULT *sentry_common_service.TSentryResponseStatus
func (p *TDropSentryRoleResponse) GetStatus() *sentry_common_service.TSentryResponseStatus {
  if !p.IsSetStatus() {
    return TDropSentryRoleResponse_Status_DEFAULT
  }
return p.Status
}
func (p *TDropSentryRoleResponse) IsSetStatus() bool {
  return p.Status != nil
}

func (p *TDropSentryRoleResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetStatus bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetStatus = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetStatus{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"));
  }
  return nil
}

func (p *TDropSentryRoleResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &sentry_common_service.TSentryResponseStatus{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *TDropSentryRoleResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TDropSentryRoleResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDropSentryRoleResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *TDropSentryRoleResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDropSentryRoleResponse(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - RoleName
//  - Groups
type TAlterSentryRoleAddGroupsRequest struct {
  ProtocolVersion int32 `thrift:"protocol_version,1,required" db:"protocol_version" json:"protocol_version"`
  RequestorUserName string `thrift:"requestorUserName,2,required" db:"requestorUserName" json:"requestorUserName"`
  RoleName string `thrift:"roleName,3,required" db:"roleName" json:"roleName"`
  // unused field # 4
  Groups []*TSentryGroup `thrift:"groups,5,required" db:"groups" json:"groups"`
}

func NewTAlterSentryRoleAddGroupsRequest() *TAlterSentryRoleAddGroupsRequest {
  return &TAlterSentryRoleAddGroupsRequest{
ProtocolVersion: 2,
}
}


func (p *TAlterSentryRoleAddGroupsRequest) GetProtocolVersion() int32 {
  return p.ProtocolVersion
}

func (p *TAlterSentryRoleAddGroupsRequest) GetRequestorUserName() string {
  return p.RequestorUserName
}

func (p *TAlterSentryRoleAddGroupsRequest) GetRoleName() string {
  return p.RoleName
}

func (p *TAlterSentryRoleAddGroupsRequest) GetGroups() []*TSentryGroup {
  return p.Groups
}
func (p *TAlterSentryRoleAddGroupsRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetProtocolVersion bool = false;
  var issetRequestorUserName bool = false;
  var issetRoleName bool = false;
  var issetGroups bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProtocolVersion = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRequestorUserName = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRoleName = true
    case 5:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGroups = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetProtocolVersion{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"));
  }
  if !issetRequestorUserName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"));
  }
  if !issetRoleName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoleName is not set"));
  }
  if !issetGroups{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Groups is not set"));
  }
  return nil
}

func (p *TAlterSentryRoleAddGroupsRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ProtocolVersion = v
}
  return nil
}

func (p *TAlterSentryRoleAddGroupsRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RequestorUserName = v
}
  return nil
}

func (p *TAlterSentryRoleAddGroupsRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RoleName = v
}
  return nil
}

func (p *TAlterSentryRoleAddGroupsRequest)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]*TSentryGroup, 0, size)
  p.Groups =  tSet
  for i := 0; i < size; i ++ {
    _elem0 := &TSentryGroup{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Groups = append(p.Groups, _elem0)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TAlterSentryRoleAddGroupsRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TAlterSentryRoleAddGroupsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAlterSentryRoleAddGroupsRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err) }
  return err
}

func (p *TAlterSentryRoleAddGroupsRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err) }
  if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err) }
  return err
}

func (p *TAlterSentryRoleAddGroupsRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("roleName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roleName: ", p), err) }
  if err := oprot.WriteString(string(p.RoleName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.roleName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roleName: ", p), err) }
  return err
}

func (p *TAlterSentryRoleAddGroupsRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("groups", thrift.SET, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:groups: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.STRUCT, len(p.Groups)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.Groups); i++ {
    for j := i+1; j<len(p.Groups); j++ {
      if reflect.DeepEqual(p.Groups[i],p.Groups[j]) { 
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Groups[i]))
      }
    }
  }
  for _, v := range p.Groups {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:groups: ", p), err) }
  return err
}

func (p *TAlterSentryRoleAddGroupsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAlterSentryRoleAddGroupsRequest(%+v)", *p)
}

// Attributes:
//  - Status
type TAlterSentryRoleAddGroupsResponse struct {
  Status *sentry_common_service.TSentryResponseStatus `thrift:"status,1,required" db:"status" json:"status"`
}

func NewTAlterSentryRoleAddGroupsResponse() *TAlterSentryRoleAddGroupsResponse {
  return &TAlterSentryRoleAddGroupsResponse{}
}

var TAlterSentryRoleAddGroupsResponse_Status_DEFAULT *sentry_common_service.TSentryResponseStatus
func (p *TAlterSentryRoleAddGroupsResponse) GetStatus() *sentry_common_service.TSentryResponseStatus {
  if !p.IsSetStatus() {
    return TAlterSentryRoleAddGroupsResponse_Status_DEFAULT
  }
return p.Status
}
func (p *TAlterSentryRoleAddGroupsResponse) IsSetStatus() bool {
  return p.Status != nil
}

func (p *TAlterSentryRoleAddGroupsResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetStatus bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetStatus = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetStatus{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"));
  }
  return nil
}

func (p *TAlterSentryRoleAddGroupsResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &sentry_common_service.TSentryResponseStatus{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *TAlterSentryRoleAddGroupsResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TAlterSentryRoleAddGroupsResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAlterSentryRoleAddGroupsResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *TAlterSentryRoleAddGroupsResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAlterSentryRoleAddGroupsResponse(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - RoleName
//  - Users
type TAlterSentryRoleAddUsersRequest struct {
  ProtocolVersion int32 `thrift:"protocol_version,1,required" db:"protocol_version" json:"protocol_version"`
  RequestorUserName string `thrift:"requestorUserName,2,required" db:"requestorUserName" json:"requestorUserName"`
  RoleName string `thrift:"roleName,3,required" db:"roleName" json:"roleName"`
  Users []string `thrift:"users,4,required" db:"users" json:"users"`
}

func NewTAlterSentryRoleAddUsersRequest() *TAlterSentryRoleAddUsersRequest {
  return &TAlterSentryRoleAddUsersRequest{
ProtocolVersion: 1,
}
}


func (p *TAlterSentryRoleAddUsersRequest) GetProtocolVersion() int32 {
  return p.ProtocolVersion
}

func (p *TAlterSentryRoleAddUsersRequest) GetRequestorUserName() string {
  return p.RequestorUserName
}

func (p *TAlterSentryRoleAddUsersRequest) GetRoleName() string {
  return p.RoleName
}

func (p *TAlterSentryRoleAddUsersRequest) GetUsers() []string {
  return p.Users
}
func (p *TAlterSentryRoleAddUsersRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetProtocolVersion bool = false;
  var issetRequestorUserName bool = false;
  var issetRoleName bool = false;
  var issetUsers bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProtocolVersion = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRequestorUserName = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRoleName = true
    case 4:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUsers = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetProtocolVersion{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"));
  }
  if !issetRequestorUserName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"));
  }
  if !issetRoleName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoleName is not set"));
  }
  if !issetUsers{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Users is not set"));
  }
  return nil
}

func (p *TAlterSentryRoleAddUsersRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ProtocolVersion = v
}
  return nil
}

func (p *TAlterSentryRoleAddUsersRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RequestorUserName = v
}
  return nil
}

func (p *TAlterSentryRoleAddUsersRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RoleName = v
}
  return nil
}

func (p *TAlterSentryRoleAddUsersRequest)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Users =  tSet
  for i := 0; i < size; i ++ {
var _elem1 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem1 = v
}
    p.Users = append(p.Users, _elem1)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TAlterSentryRoleAddUsersRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TAlterSentryRoleAddUsersRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAlterSentryRoleAddUsersRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err) }
  return err
}

func (p *TAlterSentryRoleAddUsersRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err) }
  if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err) }
  return err
}

func (p *TAlterSentryRoleAddUsersRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("roleName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roleName: ", p), err) }
  if err := oprot.WriteString(string(p.RoleName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.roleName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roleName: ", p), err) }
  return err
}

func (p *TAlterSentryRoleAddUsersRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("users", thrift.SET, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:users: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.STRING, len(p.Users)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.Users); i++ {
    for j := i+1; j<len(p.Users); j++ {
      if reflect.DeepEqual(p.Users[i],p.Users[j]) { 
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Users[i]))
      }
    }
  }
  for _, v := range p.Users {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:users: ", p), err) }
  return err
}

func (p *TAlterSentryRoleAddUsersRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAlterSentryRoleAddUsersRequest(%+v)", *p)
}

// Attributes:
//  - Status
type TAlterSentryRoleAddUsersResponse struct {
  Status *sentry_common_service.TSentryResponseStatus `thrift:"status,1,required" db:"status" json:"status"`
}

func NewTAlterSentryRoleAddUsersResponse() *TAlterSentryRoleAddUsersResponse {
  return &TAlterSentryRoleAddUsersResponse{}
}

var TAlterSentryRoleAddUsersResponse_Status_DEFAULT *sentry_common_service.TSentryResponseStatus
func (p *TAlterSentryRoleAddUsersResponse) GetStatus() *sentry_common_service.TSentryResponseStatus {
  if !p.IsSetStatus() {
    return TAlterSentryRoleAddUsersResponse_Status_DEFAULT
  }
return p.Status
}
func (p *TAlterSentryRoleAddUsersResponse) IsSetStatus() bool {
  return p.Status != nil
}

func (p *TAlterSentryRoleAddUsersResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetStatus bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetStatus = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetStatus{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"));
  }
  return nil
}

func (p *TAlterSentryRoleAddUsersResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &sentry_common_service.TSentryResponseStatus{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *TAlterSentryRoleAddUsersResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TAlterSentryRoleAddUsersResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAlterSentryRoleAddUsersResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *TAlterSentryRoleAddUsersResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAlterSentryRoleAddUsersResponse(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - RoleName
//  - Groups
type TAlterSentryRoleDeleteGroupsRequest struct {
  ProtocolVersion int32 `thrift:"protocol_version,1,required" db:"protocol_version" json:"protocol_version"`
  RequestorUserName string `thrift:"requestorUserName,2,required" db:"requestorUserName" json:"requestorUserName"`
  RoleName string `thrift:"roleName,3,required" db:"roleName" json:"roleName"`
  // unused field # 4
  Groups []*TSentryGroup `thrift:"groups,5,required" db:"groups" json:"groups"`
}

func NewTAlterSentryRoleDeleteGroupsRequest() *TAlterSentryRoleDeleteGroupsRequest {
  return &TAlterSentryRoleDeleteGroupsRequest{
ProtocolVersion: 2,
}
}


func (p *TAlterSentryRoleDeleteGroupsRequest) GetProtocolVersion() int32 {
  return p.ProtocolVersion
}

func (p *TAlterSentryRoleDeleteGroupsRequest) GetRequestorUserName() string {
  return p.RequestorUserName
}

func (p *TAlterSentryRoleDeleteGroupsRequest) GetRoleName() string {
  return p.RoleName
}

func (p *TAlterSentryRoleDeleteGroupsRequest) GetGroups() []*TSentryGroup {
  return p.Groups
}
func (p *TAlterSentryRoleDeleteGroupsRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetProtocolVersion bool = false;
  var issetRequestorUserName bool = false;
  var issetRoleName bool = false;
  var issetGroups bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProtocolVersion = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRequestorUserName = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRoleName = true
    case 5:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGroups = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetProtocolVersion{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"));
  }
  if !issetRequestorUserName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"));
  }
  if !issetRoleName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoleName is not set"));
  }
  if !issetGroups{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Groups is not set"));
  }
  return nil
}

func (p *TAlterSentryRoleDeleteGroupsRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ProtocolVersion = v
}
  return nil
}

func (p *TAlterSentryRoleDeleteGroupsRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RequestorUserName = v
}
  return nil
}

func (p *TAlterSentryRoleDeleteGroupsRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RoleName = v
}
  return nil
}

func (p *TAlterSentryRoleDeleteGroupsRequest)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]*TSentryGroup, 0, size)
  p.Groups =  tSet
  for i := 0; i < size; i ++ {
    _elem2 := &TSentryGroup{}
    if err := _elem2.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.Groups = append(p.Groups, _elem2)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TAlterSentryRoleDeleteGroupsRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TAlterSentryRoleDeleteGroupsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAlterSentryRoleDeleteGroupsRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err) }
  return err
}

func (p *TAlterSentryRoleDeleteGroupsRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err) }
  if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err) }
  return err
}

func (p *TAlterSentryRoleDeleteGroupsRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("roleName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roleName: ", p), err) }
  if err := oprot.WriteString(string(p.RoleName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.roleName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roleName: ", p), err) }
  return err
}

func (p *TAlterSentryRoleDeleteGroupsRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("groups", thrift.SET, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:groups: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.STRUCT, len(p.Groups)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.Groups); i++ {
    for j := i+1; j<len(p.Groups); j++ {
      if reflect.DeepEqual(p.Groups[i],p.Groups[j]) { 
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Groups[i]))
      }
    }
  }
  for _, v := range p.Groups {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:groups: ", p), err) }
  return err
}

func (p *TAlterSentryRoleDeleteGroupsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAlterSentryRoleDeleteGroupsRequest(%+v)", *p)
}

// Attributes:
//  - Status
type TAlterSentryRoleDeleteGroupsResponse struct {
  Status *sentry_common_service.TSentryResponseStatus `thrift:"status,1,required" db:"status" json:"status"`
}

func NewTAlterSentryRoleDeleteGroupsResponse() *TAlterSentryRoleDeleteGroupsResponse {
  return &TAlterSentryRoleDeleteGroupsResponse{}
}

var TAlterSentryRoleDeleteGroupsResponse_Status_DEFAULT *sentry_common_service.TSentryResponseStatus
func (p *TAlterSentryRoleDeleteGroupsResponse) GetStatus() *sentry_common_service.TSentryResponseStatus {
  if !p.IsSetStatus() {
    return TAlterSentryRoleDeleteGroupsResponse_Status_DEFAULT
  }
return p.Status
}
func (p *TAlterSentryRoleDeleteGroupsResponse) IsSetStatus() bool {
  return p.Status != nil
}

func (p *TAlterSentryRoleDeleteGroupsResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetStatus bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetStatus = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetStatus{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"));
  }
  return nil
}

func (p *TAlterSentryRoleDeleteGroupsResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &sentry_common_service.TSentryResponseStatus{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *TAlterSentryRoleDeleteGroupsResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TAlterSentryRoleDeleteGroupsResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAlterSentryRoleDeleteGroupsResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *TAlterSentryRoleDeleteGroupsResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAlterSentryRoleDeleteGroupsResponse(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - RoleName
//  - Users
type TAlterSentryRoleDeleteUsersRequest struct {
  ProtocolVersion int32 `thrift:"protocol_version,1,required" db:"protocol_version" json:"protocol_version"`
  RequestorUserName string `thrift:"requestorUserName,2,required" db:"requestorUserName" json:"requestorUserName"`
  RoleName string `thrift:"roleName,3,required" db:"roleName" json:"roleName"`
  Users []string `thrift:"users,4,required" db:"users" json:"users"`
}

func NewTAlterSentryRoleDeleteUsersRequest() *TAlterSentryRoleDeleteUsersRequest {
  return &TAlterSentryRoleDeleteUsersRequest{
ProtocolVersion: 1,
}
}


func (p *TAlterSentryRoleDeleteUsersRequest) GetProtocolVersion() int32 {
  return p.ProtocolVersion
}

func (p *TAlterSentryRoleDeleteUsersRequest) GetRequestorUserName() string {
  return p.RequestorUserName
}

func (p *TAlterSentryRoleDeleteUsersRequest) GetRoleName() string {
  return p.RoleName
}

func (p *TAlterSentryRoleDeleteUsersRequest) GetUsers() []string {
  return p.Users
}
func (p *TAlterSentryRoleDeleteUsersRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetProtocolVersion bool = false;
  var issetRequestorUserName bool = false;
  var issetRoleName bool = false;
  var issetUsers bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProtocolVersion = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRequestorUserName = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRoleName = true
    case 4:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUsers = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetProtocolVersion{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"));
  }
  if !issetRequestorUserName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"));
  }
  if !issetRoleName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoleName is not set"));
  }
  if !issetUsers{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Users is not set"));
  }
  return nil
}

func (p *TAlterSentryRoleDeleteUsersRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ProtocolVersion = v
}
  return nil
}

func (p *TAlterSentryRoleDeleteUsersRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RequestorUserName = v
}
  return nil
}

func (p *TAlterSentryRoleDeleteUsersRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RoleName = v
}
  return nil
}

func (p *TAlterSentryRoleDeleteUsersRequest)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Users =  tSet
  for i := 0; i < size; i ++ {
var _elem3 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem3 = v
}
    p.Users = append(p.Users, _elem3)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TAlterSentryRoleDeleteUsersRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TAlterSentryRoleDeleteUsersRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAlterSentryRoleDeleteUsersRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err) }
  return err
}

func (p *TAlterSentryRoleDeleteUsersRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err) }
  if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err) }
  return err
}

func (p *TAlterSentryRoleDeleteUsersRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("roleName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roleName: ", p), err) }
  if err := oprot.WriteString(string(p.RoleName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.roleName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roleName: ", p), err) }
  return err
}

func (p *TAlterSentryRoleDeleteUsersRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("users", thrift.SET, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:users: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.STRING, len(p.Users)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.Users); i++ {
    for j := i+1; j<len(p.Users); j++ {
      if reflect.DeepEqual(p.Users[i],p.Users[j]) { 
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Users[i]))
      }
    }
  }
  for _, v := range p.Users {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:users: ", p), err) }
  return err
}

func (p *TAlterSentryRoleDeleteUsersRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAlterSentryRoleDeleteUsersRequest(%+v)", *p)
}

// Attributes:
//  - Status
type TAlterSentryRoleDeleteUsersResponse struct {
  Status *sentry_common_service.TSentryResponseStatus `thrift:"status,1,required" db:"status" json:"status"`
}

func NewTAlterSentryRoleDeleteUsersResponse() *TAlterSentryRoleDeleteUsersResponse {
  return &TAlterSentryRoleDeleteUsersResponse{}
}

var TAlterSentryRoleDeleteUsersResponse_Status_DEFAULT *sentry_common_service.TSentryResponseStatus
func (p *TAlterSentryRoleDeleteUsersResponse) GetStatus() *sentry_common_service.TSentryResponseStatus {
  if !p.IsSetStatus() {
    return TAlterSentryRoleDeleteUsersResponse_Status_DEFAULT
  }
return p.Status
}
func (p *TAlterSentryRoleDeleteUsersResponse) IsSetStatus() bool {
  return p.Status != nil
}

func (p *TAlterSentryRoleDeleteUsersResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetStatus bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetStatus = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetStatus{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"));
  }
  return nil
}

func (p *TAlterSentryRoleDeleteUsersResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &sentry_common_service.TSentryResponseStatus{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *TAlterSentryRoleDeleteUsersResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TAlterSentryRoleDeleteUsersResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAlterSentryRoleDeleteUsersResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *TAlterSentryRoleDeleteUsersResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAlterSentryRoleDeleteUsersResponse(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - RoleName
//  - Privilege
//  - Privileges
type TAlterSentryRoleGrantPrivilegeRequest struct {
  ProtocolVersion int32 `thrift:"protocol_version,1,required" db:"protocol_version" json:"protocol_version"`
  RequestorUserName string `thrift:"requestorUserName,2,required" db:"requestorUserName" json:"requestorUserName"`
  RoleName string `thrift:"roleName,3,required" db:"roleName" json:"roleName"`
  // unused field # 4
  Privilege *TSentryPrivilege `thrift:"privilege,5" db:"privilege" json:"privilege,omitempty"`
  Privileges []*TSentryPrivilege `thrift:"privileges,6" db:"privileges" json:"privileges,omitempty"`
}

func NewTAlterSentryRoleGrantPrivilegeRequest() *TAlterSentryRoleGrantPrivilegeRequest {
  return &TAlterSentryRoleGrantPrivilegeRequest{
ProtocolVersion: 2,
}
}


func (p *TAlterSentryRoleGrantPrivilegeRequest) GetProtocolVersion() int32 {
  return p.ProtocolVersion
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) GetRequestorUserName() string {
  return p.RequestorUserName
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) GetRoleName() string {
  return p.RoleName
}
var TAlterSentryRoleGrantPrivilegeRequest_Privilege_DEFAULT *TSentryPrivilege
func (p *TAlterSentryRoleGrantPrivilegeRequest) GetPrivilege() *TSentryPrivilege {
  if !p.IsSetPrivilege() {
    return TAlterSentryRoleGrantPrivilegeRequest_Privilege_DEFAULT
  }
return p.Privilege
}
var TAlterSentryRoleGrantPrivilegeRequest_Privileges_DEFAULT []*TSentryPrivilege

func (p *TAlterSentryRoleGrantPrivilegeRequest) GetPrivileges() []*TSentryPrivilege {
  return p.Privileges
}
func (p *TAlterSentryRoleGrantPrivilegeRequest) IsSetPrivilege() bool {
  return p.Privilege != nil
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) IsSetPrivileges() bool {
  return p.Privileges != nil
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetProtocolVersion bool = false;
  var issetRequestorUserName bool = false;
  var issetRoleName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProtocolVersion = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRequestorUserName = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRoleName = true
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetProtocolVersion{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"));
  }
  if !issetRequestorUserName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"));
  }
  if !issetRoleName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoleName is not set"));
  }
  return nil
}

func (p *TAlterSentryRoleGrantPrivilegeRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ProtocolVersion = v
}
  return nil
}

func (p *TAlterSentryRoleGrantPrivilegeRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RequestorUserName = v
}
  return nil
}

func (p *TAlterSentryRoleGrantPrivilegeRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RoleName = v
}
  return nil
}

func (p *TAlterSentryRoleGrantPrivilegeRequest)  ReadField5(iprot thrift.TProtocol) error {
  p.Privilege = &TSentryPrivilege{
  GrantOption:   0,
}
  if err := p.Privilege.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Privilege), err)
  }
  return nil
}

func (p *TAlterSentryRoleGrantPrivilegeRequest)  ReadField6(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]*TSentryPrivilege, 0, size)
  p.Privileges =  tSet
  for i := 0; i < size; i ++ {
    _elem4 := &TSentryPrivilege{
    GrantOption:     0,
}
    if err := _elem4.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
    }
    p.Privileges = append(p.Privileges, _elem4)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TAlterSentryRoleGrantPrivilegeRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err) }
  return err
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err) }
  if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err) }
  return err
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("roleName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roleName: ", p), err) }
  if err := oprot.WriteString(string(p.RoleName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.roleName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roleName: ", p), err) }
  return err
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetPrivilege() {
    if err := oprot.WriteFieldBegin("privilege", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:privilege: ", p), err) }
    if err := p.Privilege.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Privilege), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:privilege: ", p), err) }
  }
  return err
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetPrivileges() {
    if err := oprot.WriteFieldBegin("privileges", thrift.SET, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:privileges: ", p), err) }
    if err := oprot.WriteSetBegin(thrift.STRUCT, len(p.Privileges)); err != nil {
      return thrift.PrependError("error writing set begin: ", err)
    }
    for i := 0; i<len(p.Privileges); i++ {
      for j := i+1; j<len(p.Privileges); j++ {
        if reflect.DeepEqual(p.Privileges[i],p.Privileges[j]) { 
          return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Privileges[i]))
        }
      }
    }
    for _, v := range p.Privileges {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteSetEnd(); err != nil {
      return thrift.PrependError("error writing set end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:privileges: ", p), err) }
  }
  return err
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAlterSentryRoleGrantPrivilegeRequest(%+v)", *p)
}

// Attributes:
//  - Status
//  - Privilege
//  - Privileges
type TAlterSentryRoleGrantPrivilegeResponse struct {
  Status *sentry_common_service.TSentryResponseStatus `thrift:"status,1,required" db:"status" json:"status"`
  Privilege *TSentryPrivilege `thrift:"privilege,2" db:"privilege" json:"privilege,omitempty"`
  Privileges []*TSentryPrivilege `thrift:"privileges,3" db:"privileges" json:"privileges,omitempty"`
}

func NewTAlterSentryRoleGrantPrivilegeResponse() *TAlterSentryRoleGrantPrivilegeResponse {
  return &TAlterSentryRoleGrantPrivilegeResponse{}
}

var TAlterSentryRoleGrantPrivilegeResponse_Status_DEFAULT *sentry_common_service.TSentryResponseStatus
func (p *TAlterSentryRoleGrantPrivilegeResponse) GetStatus() *sentry_common_service.TSentryResponseStatus {
  if !p.IsSetStatus() {
    return TAlterSentryRoleGrantPrivilegeResponse_Status_DEFAULT
  }
return p.Status
}
var TAlterSentryRoleGrantPrivilegeResponse_Privilege_DEFAULT *TSentryPrivilege
func (p *TAlterSentryRoleGrantPrivilegeResponse) GetPrivilege() *TSentryPrivilege {
  if !p.IsSetPrivilege() {
    return TAlterSentryRoleGrantPrivilegeResponse_Privilege_DEFAULT
  }
return p.Privilege
}
var TAlterSentryRoleGrantPrivilegeResponse_Privileges_DEFAULT []*TSentryPrivilege

func (p *TAlterSentryRoleGrantPrivilegeResponse) GetPrivileges() []*TSentryPrivilege {
  return p.Privileges
}
func (p *TAlterSentryRoleGrantPrivilegeResponse) IsSetStatus() bool {
  return p.Status != nil
}

func (p *TAlterSentryRoleGrantPrivilegeResponse) IsSetPrivilege() bool {
  return p.Privilege != nil
}

func (p *TAlterSentryRoleGrantPrivilegeResponse) IsSetPrivileges() bool {
  return p.Privileges != nil
}

func (p *TAlterSentryRoleGrantPrivilegeResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetStatus bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetStatus = true
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetStatus{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"));
  }
  return nil
}

func (p *TAlterSentryRoleGrantPrivilegeResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &sentry_common_service.TSentryResponseStatus{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *TAlterSentryRoleGrantPrivilegeResponse)  ReadField2(iprot thrift.TProtocol) error {
  p.Privilege = &TSentryPrivilege{
  GrantOption:   0,
}
  if err := p.Privilege.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Privilege), err)
  }
  return nil
}

func (p *TAlterSentryRoleGrantPrivilegeResponse)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]*TSentryPrivilege, 0, size)
  p.Privileges =  tSet
  for i := 0; i < size; i ++ {
    _elem5 := &TSentryPrivilege{
    GrantOption:     0,
}
    if err := _elem5.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem5), err)
    }
    p.Privileges = append(p.Privileges, _elem5)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TAlterSentryRoleGrantPrivilegeResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TAlterSentryRoleGrantPrivilegeResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAlterSentryRoleGrantPrivilegeResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *TAlterSentryRoleGrantPrivilegeResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetPrivilege() {
    if err := oprot.WriteFieldBegin("privilege", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:privilege: ", p), err) }
    if err := p.Privilege.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Privilege), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:privilege: ", p), err) }
  }
  return err
}

func (p *TAlterSentryRoleGrantPrivilegeResponse) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetPrivileges() {
    if err := oprot.WriteFieldBegin("privileges", thrift.SET, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:privileges: ", p), err) }
    if err := oprot.WriteSetBegin(thrift.STRUCT, len(p.Privileges)); err != nil {
      return thrift.PrependError("error writing set begin: ", err)
    }
    for i := 0; i<len(p.Privileges); i++ {
      for j := i+1; j<len(p.Privileges); j++ {
        if reflect.DeepEqual(p.Privileges[i],p.Privileges[j]) { 
          return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Privileges[i]))
        }
      }
    }
    for _, v := range p.Privileges {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteSetEnd(); err != nil {
      return thrift.PrependError("error writing set end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:privileges: ", p), err) }
  }
  return err
}

func (p *TAlterSentryRoleGrantPrivilegeResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAlterSentryRoleGrantPrivilegeResponse(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - RoleName
//  - Privilege
//  - Privileges
type TAlterSentryRoleRevokePrivilegeRequest struct {
  ProtocolVersion int32 `thrift:"protocol_version,1,required" db:"protocol_version" json:"protocol_version"`
  RequestorUserName string `thrift:"requestorUserName,2,required" db:"requestorUserName" json:"requestorUserName"`
  RoleName string `thrift:"roleName,3,required" db:"roleName" json:"roleName"`
  // unused field # 4
  Privilege *TSentryPrivilege `thrift:"privilege,5" db:"privilege" json:"privilege,omitempty"`
  Privileges []*TSentryPrivilege `thrift:"privileges,6" db:"privileges" json:"privileges,omitempty"`
}

func NewTAlterSentryRoleRevokePrivilegeRequest() *TAlterSentryRoleRevokePrivilegeRequest {
  return &TAlterSentryRoleRevokePrivilegeRequest{
ProtocolVersion: 2,
}
}


func (p *TAlterSentryRoleRevokePrivilegeRequest) GetProtocolVersion() int32 {
  return p.ProtocolVersion
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) GetRequestorUserName() string {
  return p.RequestorUserName
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) GetRoleName() string {
  return p.RoleName
}
var TAlterSentryRoleRevokePrivilegeRequest_Privilege_DEFAULT *TSentryPrivilege
func (p *TAlterSentryRoleRevokePrivilegeRequest) GetPrivilege() *TSentryPrivilege {
  if !p.IsSetPrivilege() {
    return TAlterSentryRoleRevokePrivilegeRequest_Privilege_DEFAULT
  }
return p.Privilege
}
var TAlterSentryRoleRevokePrivilegeRequest_Privileges_DEFAULT []*TSentryPrivilege

func (p *TAlterSentryRoleRevokePrivilegeRequest) GetPrivileges() []*TSentryPrivilege {
  return p.Privileges
}
func (p *TAlterSentryRoleRevokePrivilegeRequest) IsSetPrivilege() bool {
  return p.Privilege != nil
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) IsSetPrivileges() bool {
  return p.Privileges != nil
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetProtocolVersion bool = false;
  var issetRequestorUserName bool = false;
  var issetRoleName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProtocolVersion = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRequestorUserName = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRoleName = true
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetProtocolVersion{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"));
  }
  if !issetRequestorUserName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"));
  }
  if !issetRoleName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoleName is not set"));
  }
  return nil
}

func (p *TAlterSentryRoleRevokePrivilegeRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ProtocolVersion = v
}
  return nil
}

func (p *TAlterSentryRoleRevokePrivilegeRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RequestorUserName = v
}
  return nil
}

func (p *TAlterSentryRoleRevokePrivilegeRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RoleName = v
}
  return nil
}

func (p *TAlterSentryRoleRevokePrivilegeRequest)  ReadField5(iprot thrift.TProtocol) error {
  p.Privilege = &TSentryPrivilege{
  GrantOption:   0,
}
  if err := p.Privilege.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Privilege), err)
  }
  return nil
}

func (p *TAlterSentryRoleRevokePrivilegeRequest)  ReadField6(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]*TSentryPrivilege, 0, size)
  p.Privileges =  tSet
  for i := 0; i < size; i ++ {
    _elem6 := &TSentryPrivilege{
    GrantOption:     0,
}
    if err := _elem6.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
    }
    p.Privileges = append(p.Privileges, _elem6)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TAlterSentryRoleRevokePrivilegeRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err) }
  return err
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err) }
  if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err) }
  return err
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("roleName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roleName: ", p), err) }
  if err := oprot.WriteString(string(p.RoleName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.roleName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roleName: ", p), err) }
  return err
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetPrivilege() {
    if err := oprot.WriteFieldBegin("privilege", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:privilege: ", p), err) }
    if err := p.Privilege.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Privilege), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:privilege: ", p), err) }
  }
  return err
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetPrivileges() {
    if err := oprot.WriteFieldBegin("privileges", thrift.SET, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:privileges: ", p), err) }
    if err := oprot.WriteSetBegin(thrift.STRUCT, len(p.Privileges)); err != nil {
      return thrift.PrependError("error writing set begin: ", err)
    }
    for i := 0; i<len(p.Privileges); i++ {
      for j := i+1; j<len(p.Privileges); j++ {
        if reflect.DeepEqual(p.Privileges[i],p.Privileges[j]) { 
          return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Privileges[i]))
        }
      }
    }
    for _, v := range p.Privileges {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteSetEnd(); err != nil {
      return thrift.PrependError("error writing set end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:privileges: ", p), err) }
  }
  return err
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAlterSentryRoleRevokePrivilegeRequest(%+v)", *p)
}

// Attributes:
//  - Status
type TAlterSentryRoleRevokePrivilegeResponse struct {
  Status *sentry_common_service.TSentryResponseStatus `thrift:"status,1,required" db:"status" json:"status"`
}

func NewTAlterSentryRoleRevokePrivilegeResponse() *TAlterSentryRoleRevokePrivilegeResponse {
  return &TAlterSentryRoleRevokePrivilegeResponse{}
}

var TAlterSentryRoleRevokePrivilegeResponse_Status_DEFAULT *sentry_common_service.TSentryResponseStatus
func (p *TAlterSentryRoleRevokePrivilegeResponse) GetStatus() *sentry_common_service.TSentryResponseStatus {
  if !p.IsSetStatus() {
    return TAlterSentryRoleRevokePrivilegeResponse_Status_DEFAULT
  }
return p.Status
}
func (p *TAlterSentryRoleRevokePrivilegeResponse) IsSetStatus() bool {
  return p.Status != nil
}

func (p *TAlterSentryRoleRevokePrivilegeResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetStatus bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetStatus = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetStatus{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"));
  }
  return nil
}

func (p *TAlterSentryRoleRevokePrivilegeResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &sentry_common_service.TSentryResponseStatus{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *TAlterSentryRoleRevokePrivilegeResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TAlterSentryRoleRevokePrivilegeResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAlterSentryRoleRevokePrivilegeResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *TAlterSentryRoleRevokePrivilegeResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAlterSentryRoleRevokePrivilegeResponse(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - GroupName
type TListSentryRolesRequest struct {
  ProtocolVersion int32 `thrift:"protocol_version,1,required" db:"protocol_version" json:"protocol_version"`
  RequestorUserName string `thrift:"requestorUserName,2,required" db:"requestorUserName" json:"requestorUserName"`
  GroupName *string `thrift:"groupName,3" db:"groupName" json:"groupName,omitempty"`
}

func NewTListSentryRolesRequest() *TListSentryRolesRequest {
  return &TListSentryRolesRequest{
ProtocolVersion: 2,
}
}


func (p *TListSentryRolesRequest) GetProtocolVersion() int32 {
  return p.ProtocolVersion
}

func (p *TListSentryRolesRequest) GetRequestorUserName() string {
  return p.RequestorUserName
}
var TListSentryRolesRequest_GroupName_DEFAULT string
func (p *TListSentryRolesRequest) GetGroupName() string {
  if !p.IsSetGroupName() {
    return TListSentryRolesRequest_GroupName_DEFAULT
  }
return *p.GroupName
}
func (p *TListSentryRolesRequest) IsSetGroupName() bool {
  return p.GroupName != nil
}

func (p *TListSentryRolesRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetProtocolVersion bool = false;
  var issetRequestorUserName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProtocolVersion = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRequestorUserName = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetProtocolVersion{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"));
  }
  if !issetRequestorUserName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"));
  }
  return nil
}

func (p *TListSentryRolesRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ProtocolVersion = v
}
  return nil
}

func (p *TListSentryRolesRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RequestorUserName = v
}
  return nil
}

func (p *TListSentryRolesRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.GroupName = &v
}
  return nil
}

func (p *TListSentryRolesRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TListSentryRolesRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TListSentryRolesRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err) }
  return err
}

func (p *TListSentryRolesRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err) }
  if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err) }
  return err
}

func (p *TListSentryRolesRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetGroupName() {
    if err := oprot.WriteFieldBegin("groupName", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:groupName: ", p), err) }
    if err := oprot.WriteString(string(*p.GroupName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.groupName (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:groupName: ", p), err) }
  }
  return err
}

func (p *TListSentryRolesRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TListSentryRolesRequest(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - UserName
type TListSentryRolesForUserRequest struct {
  ProtocolVersion int32 `thrift:"protocol_version,1,required" db:"protocol_version" json:"protocol_version"`
  RequestorUserName string `thrift:"requestorUserName,2,required" db:"requestorUserName" json:"requestorUserName"`
  UserName string `thrift:"userName,3,required" db:"userName" json:"userName"`
}

func NewTListSentryRolesForUserRequest() *TListSentryRolesForUserRequest {
  return &TListSentryRolesForUserRequest{
ProtocolVersion: 1,
}
}


func (p *TListSentryRolesForUserRequest) GetProtocolVersion() int32 {
  return p.ProtocolVersion
}

func (p *TListSentryRolesForUserRequest) GetRequestorUserName() string {
  return p.RequestorUserName
}

func (p *TListSentryRolesForUserRequest) GetUserName() string {
  return p.UserName
}
func (p *TListSentryRolesForUserRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetProtocolVersion bool = false;
  var issetRequestorUserName bool = false;
  var issetUserName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProtocolVersion = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRequestorUserName = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUserName = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetProtocolVersion{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"));
  }
  if !issetRequestorUserName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"));
  }
  if !issetUserName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserName is not set"));
  }
  return nil
}

func (p *TListSentryRolesForUserRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ProtocolVersion = v
}
  return nil
}

func (p *TListSentryRolesForUserRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RequestorUserName = v
}
  return nil
}

func (p *TListSentryRolesForUserRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.UserName = v
}
  return nil
}

func (p *TListSentryRolesForUserRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TListSentryRolesForUserRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TListSentryRolesForUserRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err) }
  return err
}

func (p *TListSentryRolesForUserRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err) }
  if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err) }
  return err
}

func (p *TListSentryRolesForUserRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:userName: ", p), err) }
  if err := oprot.WriteString(string(p.UserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:userName: ", p), err) }
  return err
}

func (p *TListSentryRolesForUserRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TListSentryRolesForUserRequest(%+v)", *p)
}

// Attributes:
//  - RoleName
//  - Groups
//  - GrantorPrincipal
type TSentryRole struct {
  RoleName string `thrift:"roleName,1,required" db:"roleName" json:"roleName"`
  Groups []*TSentryGroup `thrift:"groups,2,required" db:"groups" json:"groups"`
  GrantorPrincipal string `thrift:"grantorPrincipal,3,required" db:"grantorPrincipal" json:"grantorPrincipal"`
}

func NewTSentryRole() *TSentryRole {
  return &TSentryRole{}
}


func (p *TSentryRole) GetRoleName() string {
  return p.RoleName
}

func (p *TSentryRole) GetGroups() []*TSentryGroup {
  return p.Groups
}

func (p *TSentryRole) GetGrantorPrincipal() string {
  return p.GrantorPrincipal
}
func (p *TSentryRole) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRoleName bool = false;
  var issetGroups bool = false;
  var issetGrantorPrincipal bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRoleName = true
    case 2:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGroups = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGrantorPrincipal = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRoleName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoleName is not set"));
  }
  if !issetGroups{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Groups is not set"));
  }
  if !issetGrantorPrincipal{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GrantorPrincipal is not set"));
  }
  return nil
}

func (p *TSentryRole)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RoleName = v
}
  return nil
}

func (p *TSentryRole)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]*TSentryGroup, 0, size)
  p.Groups =  tSet
  for i := 0; i < size; i ++ {
    _elem7 := &TSentryGroup{}
    if err := _elem7.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem7), err)
    }
    p.Groups = append(p.Groups, _elem7)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TSentryRole)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.GrantorPrincipal = v
}
  return nil
}

func (p *TSentryRole) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TSentryRole"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSentryRole) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("roleName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:roleName: ", p), err) }
  if err := oprot.WriteString(string(p.RoleName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.roleName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:roleName: ", p), err) }
  return err
}

func (p *TSentryRole) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("groups", thrift.SET, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groups: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.STRUCT, len(p.Groups)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.Groups); i++ {
    for j := i+1; j<len(p.Groups); j++ {
      if reflect.DeepEqual(p.Groups[i],p.Groups[j]) { 
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Groups[i]))
      }
    }
  }
  for _, v := range p.Groups {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groups: ", p), err) }
  return err
}

func (p *TSentryRole) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("grantorPrincipal", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:grantorPrincipal: ", p), err) }
  if err := oprot.WriteString(string(p.GrantorPrincipal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.grantorPrincipal (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:grantorPrincipal: ", p), err) }
  return err
}

func (p *TSentryRole) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSentryRole(%+v)", *p)
}

// Attributes:
//  - Status
//  - Roles
type TListSentryRolesResponse struct {
  Status *sentry_common_service.TSentryResponseStatus `thrift:"status,1,required" db:"status" json:"status"`
  Roles []*TSentryRole `thrift:"roles,2" db:"roles" json:"roles,omitempty"`
}

func NewTListSentryRolesResponse() *TListSentryRolesResponse {
  return &TListSentryRolesResponse{}
}

var TListSentryRolesResponse_Status_DEFAULT *sentry_common_service.TSentryResponseStatus
func (p *TListSentryRolesResponse) GetStatus() *sentry_common_service.TSentryResponseStatus {
  if !p.IsSetStatus() {
    return TListSentryRolesResponse_Status_DEFAULT
  }
return p.Status
}
var TListSentryRolesResponse_Roles_DEFAULT []*TSentryRole

func (p *TListSentryRolesResponse) GetRoles() []*TSentryRole {
  return p.Roles
}
func (p *TListSentryRolesResponse) IsSetStatus() bool {
  return p.Status != nil
}

func (p *TListSentryRolesResponse) IsSetRoles() bool {
  return p.Roles != nil
}

func (p *TListSentryRolesResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetStatus bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetStatus = true
    case 2:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetStatus{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"));
  }
  return nil
}

func (p *TListSentryRolesResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &sentry_common_service.TSentryResponseStatus{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *TListSentryRolesResponse)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]*TSentryRole, 0, size)
  p.Roles =  tSet
  for i := 0; i < size; i ++ {
    _elem8 := &TSentryRole{}
    if err := _elem8.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem8), err)
    }
    p.Roles = append(p.Roles, _elem8)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TListSentryRolesResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TListSentryRolesResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TListSentryRolesResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *TListSentryRolesResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRoles() {
    if err := oprot.WriteFieldBegin("roles", thrift.SET, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:roles: ", p), err) }
    if err := oprot.WriteSetBegin(thrift.STRUCT, len(p.Roles)); err != nil {
      return thrift.PrependError("error writing set begin: ", err)
    }
    for i := 0; i<len(p.Roles); i++ {
      for j := i+1; j<len(p.Roles); j++ {
        if reflect.DeepEqual(p.Roles[i],p.Roles[j]) { 
          return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Roles[i]))
        }
      }
    }
    for _, v := range p.Roles {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteSetEnd(); err != nil {
      return thrift.PrependError("error writing set end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:roles: ", p), err) }
  }
  return err
}

func (p *TListSentryRolesResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TListSentryRolesResponse(%+v)", *p)
}

// Attributes:
//  - Server
//  - URI
//  - Db
//  - Table
//  - Column
type TSentryAuthorizable struct {
  Server string `thrift:"server,1,required" db:"server" json:"server"`
  URI *string `thrift:"uri,2" db:"uri" json:"uri,omitempty"`
  Db *string `thrift:"db,3" db:"db" json:"db,omitempty"`
  Table *string `thrift:"table,4" db:"table" json:"table,omitempty"`
  Column *string `thrift:"column,5" db:"column" json:"column,omitempty"`
}

func NewTSentryAuthorizable() *TSentryAuthorizable {
  return &TSentryAuthorizable{}
}


func (p *TSentryAuthorizable) GetServer() string {
  return p.Server
}
var TSentryAuthorizable_URI_DEFAULT string
func (p *TSentryAuthorizable) GetURI() string {
  if !p.IsSetURI() {
    return TSentryAuthorizable_URI_DEFAULT
  }
return *p.URI
}
var TSentryAuthorizable_Db_DEFAULT string
func (p *TSentryAuthorizable) GetDb() string {
  if !p.IsSetDb() {
    return TSentryAuthorizable_Db_DEFAULT
  }
return *p.Db
}
var TSentryAuthorizable_Table_DEFAULT string
func (p *TSentryAuthorizable) GetTable() string {
  if !p.IsSetTable() {
    return TSentryAuthorizable_Table_DEFAULT
  }
return *p.Table
}
var TSentryAuthorizable_Column_DEFAULT string
func (p *TSentryAuthorizable) GetColumn() string {
  if !p.IsSetColumn() {
    return TSentryAuthorizable_Column_DEFAULT
  }
return *p.Column
}
func (p *TSentryAuthorizable) IsSetURI() bool {
  return p.URI != nil
}

func (p *TSentryAuthorizable) IsSetDb() bool {
  return p.Db != nil
}

func (p *TSentryAuthorizable) IsSetTable() bool {
  return p.Table != nil
}

func (p *TSentryAuthorizable) IsSetColumn() bool {
  return p.Column != nil
}

func (p *TSentryAuthorizable) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetServer bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetServer = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetServer{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Server is not set"));
  }
  return nil
}

func (p *TSentryAuthorizable)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Server = v
}
  return nil
}

func (p *TSentryAuthorizable)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.URI = &v
}
  return nil
}

func (p *TSentryAuthorizable)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Db = &v
}
  return nil
}

func (p *TSentryAuthorizable)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Table = &v
}
  return nil
}

func (p *TSentryAuthorizable)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Column = &v
}
  return nil
}

func (p *TSentryAuthorizable) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TSentryAuthorizable"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSentryAuthorizable) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("server", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:server: ", p), err) }
  if err := oprot.WriteString(string(p.Server)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.server (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:server: ", p), err) }
  return err
}

func (p *TSentryAuthorizable) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetURI() {
    if err := oprot.WriteFieldBegin("uri", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uri: ", p), err) }
    if err := oprot.WriteString(string(*p.URI)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.uri (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uri: ", p), err) }
  }
  return err
}

func (p *TSentryAuthorizable) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetDb() {
    if err := oprot.WriteFieldBegin("db", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:db: ", p), err) }
    if err := oprot.WriteString(string(*p.Db)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.db (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:db: ", p), err) }
  }
  return err
}

func (p *TSentryAuthorizable) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetTable() {
    if err := oprot.WriteFieldBegin("table", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:table: ", p), err) }
    if err := oprot.WriteString(string(*p.Table)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.table (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:table: ", p), err) }
  }
  return err
}

func (p *TSentryAuthorizable) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetColumn() {
    if err := oprot.WriteFieldBegin("column", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:column: ", p), err) }
    if err := oprot.WriteString(string(*p.Column)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.column (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:column: ", p), err) }
  }
  return err
}

func (p *TSentryAuthorizable) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSentryAuthorizable(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - RoleName
//  - AuthorizableHierarchy
type TListSentryPrivilegesRequest struct {
  ProtocolVersion int32 `thrift:"protocol_version,1,required" db:"protocol_version" json:"protocol_version"`
  RequestorUserName string `thrift:"requestorUserName,2,required" db:"requestorUserName" json:"requestorUserName"`
  // unused field # 3
  RoleName string `thrift:"roleName,4,required" db:"roleName" json:"roleName"`
  AuthorizableHierarchy *TSentryAuthorizable `thrift:"authorizableHierarchy,5" db:"authorizableHierarchy" json:"authorizableHierarchy,omitempty"`
}

func NewTListSentryPrivilegesRequest() *TListSentryPrivilegesRequest {
  return &TListSentryPrivilegesRequest{
ProtocolVersion: 2,
}
}


func (p *TListSentryPrivilegesRequest) GetProtocolVersion() int32 {
  return p.ProtocolVersion
}

func (p *TListSentryPrivilegesRequest) GetRequestorUserName() string {
  return p.RequestorUserName
}

func (p *TListSentryPrivilegesRequest) GetRoleName() string {
  return p.RoleName
}
var TListSentryPrivilegesRequest_AuthorizableHierarchy_DEFAULT *TSentryAuthorizable
func (p *TListSentryPrivilegesRequest) GetAuthorizableHierarchy() *TSentryAuthorizable {
  if !p.IsSetAuthorizableHierarchy() {
    return TListSentryPrivilegesRequest_AuthorizableHierarchy_DEFAULT
  }
return p.AuthorizableHierarchy
}
func (p *TListSentryPrivilegesRequest) IsSetAuthorizableHierarchy() bool {
  return p.AuthorizableHierarchy != nil
}

func (p *TListSentryPrivilegesRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetProtocolVersion bool = false;
  var issetRequestorUserName bool = false;
  var issetRoleName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProtocolVersion = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRequestorUserName = true
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRoleName = true
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetProtocolVersion{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"));
  }
  if !issetRequestorUserName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"));
  }
  if !issetRoleName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoleName is not set"));
  }
  return nil
}

func (p *TListSentryPrivilegesRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ProtocolVersion = v
}
  return nil
}

func (p *TListSentryPrivilegesRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RequestorUserName = v
}
  return nil
}

func (p *TListSentryPrivilegesRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.RoleName = v
}
  return nil
}

func (p *TListSentryPrivilegesRequest)  ReadField5(iprot thrift.TProtocol) error {
  p.AuthorizableHierarchy = &TSentryAuthorizable{}
  if err := p.AuthorizableHierarchy.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthorizableHierarchy), err)
  }
  return nil
}

func (p *TListSentryPrivilegesRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TListSentryPrivilegesRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TListSentryPrivilegesRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err) }
  return err
}

func (p *TListSentryPrivilegesRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err) }
  if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err) }
  return err
}

func (p *TListSentryPrivilegesRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("roleName", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:roleName: ", p), err) }
  if err := oprot.WriteString(string(p.RoleName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.roleName (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:roleName: ", p), err) }
  return err
}

func (p *TListSentryPrivilegesRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetAuthorizableHierarchy() {
    if err := oprot.WriteFieldBegin("authorizableHierarchy", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:authorizableHierarchy: ", p), err) }
    if err := p.AuthorizableHierarchy.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthorizableHierarchy), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:authorizableHierarchy: ", p), err) }
  }
  return err
}

func (p *TListSentryPrivilegesRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TListSentryPrivilegesRequest(%+v)", *p)
}

// Attributes:
//  - Status
//  - Privileges
type TListSentryPrivilegesResponse struct {
  Status *sentry_common_service.TSentryResponseStatus `thrift:"status,1,required" db:"status" json:"status"`
  Privileges []*TSentryPrivilege `thrift:"privileges,2" db:"privileges" json:"privileges,omitempty"`
}

func NewTListSentryPrivilegesResponse() *TListSentryPrivilegesResponse {
  return &TListSentryPrivilegesResponse{}
}

var TListSentryPrivilegesResponse_Status_DEFAULT *sentry_common_service.TSentryResponseStatus
func (p *TListSentryPrivilegesResponse) GetStatus() *sentry_common_service.TSentryResponseStatus {
  if !p.IsSetStatus() {
    return TListSentryPrivilegesResponse_Status_DEFAULT
  }
return p.Status
}
var TListSentryPrivilegesResponse_Privileges_DEFAULT []*TSentryPrivilege

func (p *TListSentryPrivilegesResponse) GetPrivileges() []*TSentryPrivilege {
  return p.Privileges
}
func (p *TListSentryPrivilegesResponse) IsSetStatus() bool {
  return p.Status != nil
}

func (p *TListSentryPrivilegesResponse) IsSetPrivileges() bool {
  return p.Privileges != nil
}

func (p *TListSentryPrivilegesResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetStatus bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetStatus = true
    case 2:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetStatus{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"));
  }
  return nil
}

func (p *TListSentryPrivilegesResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &sentry_common_service.TSentryResponseStatus{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *TListSentryPrivilegesResponse)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]*TSentryPrivilege, 0, size)
  p.Privileges =  tSet
  for i := 0; i < size; i ++ {
    _elem9 := &TSentryPrivilege{
    GrantOption:     0,
}
    if err := _elem9.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem9), err)
    }
    p.Privileges = append(p.Privileges, _elem9)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TListSentryPrivilegesResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TListSentryPrivilegesResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TListSentryPrivilegesResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *TListSentryPrivilegesResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetPrivileges() {
    if err := oprot.WriteFieldBegin("privileges", thrift.SET, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:privileges: ", p), err) }
    if err := oprot.WriteSetBegin(thrift.STRUCT, len(p.Privileges)); err != nil {
      return thrift.PrependError("error writing set begin: ", err)
    }
    for i := 0; i<len(p.Privileges); i++ {
      for j := i+1; j<len(p.Privileges); j++ {
        if reflect.DeepEqual(p.Privileges[i],p.Privileges[j]) { 
          return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Privileges[i]))
        }
      }
    }
    for _, v := range p.Privileges {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteSetEnd(); err != nil {
      return thrift.PrependError("error writing set end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:privileges: ", p), err) }
  }
  return err
}

func (p *TListSentryPrivilegesResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TListSentryPrivilegesResponse(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - Authorizable
type TDropPrivilegesRequest struct {
  ProtocolVersion int32 `thrift:"protocol_version,1,required" db:"protocol_version" json:"protocol_version"`
  RequestorUserName string `thrift:"requestorUserName,2,required" db:"requestorUserName" json:"requestorUserName"`
  Authorizable *TSentryAuthorizable `thrift:"authorizable,3,required" db:"authorizable" json:"authorizable"`
}

func NewTDropPrivilegesRequest() *TDropPrivilegesRequest {
  return &TDropPrivilegesRequest{
ProtocolVersion: 2,
}
}


func (p *TDropPrivilegesRequest) GetProtocolVersion() int32 {
  return p.ProtocolVersion
}

func (p *TDropPrivilegesRequest) GetRequestorUserName() string {
  return p.RequestorUserName
}
var TDropPrivilegesRequest_Authorizable_DEFAULT *TSentryAuthorizable
func (p *TDropPrivilegesRequest) GetAuthorizable() *TSentryAuthorizable {
  if !p.IsSetAuthorizable() {
    return TDropPrivilegesRequest_Authorizable_DEFAULT
  }
return p.Authorizable
}
func (p *TDropPrivilegesRequest) IsSetAuthorizable() bool {
  return p.Authorizable != nil
}

func (p *TDropPrivilegesRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetProtocolVersion bool = false;
  var issetRequestorUserName bool = false;
  var issetAuthorizable bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProtocolVersion = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRequestorUserName = true
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthorizable = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetProtocolVersion{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"));
  }
  if !issetRequestorUserName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"));
  }
  if !issetAuthorizable{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Authorizable is not set"));
  }
  return nil
}

func (p *TDropPrivilegesRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ProtocolVersion = v
}
  return nil
}

func (p *TDropPrivilegesRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RequestorUserName = v
}
  return nil
}

func (p *TDropPrivilegesRequest)  ReadField3(iprot thrift.TProtocol) error {
  p.Authorizable = &TSentryAuthorizable{}
  if err := p.Authorizable.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Authorizable), err)
  }
  return nil
}

func (p *TDropPrivilegesRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TDropPrivilegesRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDropPrivilegesRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err) }
  return err
}

func (p *TDropPrivilegesRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err) }
  if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err) }
  return err
}

func (p *TDropPrivilegesRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authorizable", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:authorizable: ", p), err) }
  if err := p.Authorizable.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Authorizable), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:authorizable: ", p), err) }
  return err
}

func (p *TDropPrivilegesRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDropPrivilegesRequest(%+v)", *p)
}

// Attributes:
//  - Status
type TDropPrivilegesResponse struct {
  Status *sentry_common_service.TSentryResponseStatus `thrift:"status,1,required" db:"status" json:"status"`
}

func NewTDropPrivilegesResponse() *TDropPrivilegesResponse {
  return &TDropPrivilegesResponse{}
}

var TDropPrivilegesResponse_Status_DEFAULT *sentry_common_service.TSentryResponseStatus
func (p *TDropPrivilegesResponse) GetStatus() *sentry_common_service.TSentryResponseStatus {
  if !p.IsSetStatus() {
    return TDropPrivilegesResponse_Status_DEFAULT
  }
return p.Status
}
func (p *TDropPrivilegesResponse) IsSetStatus() bool {
  return p.Status != nil
}

func (p *TDropPrivilegesResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetStatus bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetStatus = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetStatus{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"));
  }
  return nil
}

func (p *TDropPrivilegesResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &sentry_common_service.TSentryResponseStatus{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *TDropPrivilegesResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TDropPrivilegesResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDropPrivilegesResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *TDropPrivilegesResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDropPrivilegesResponse(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - OldAuthorizable
//  - NewAuthorizable_
type TRenamePrivilegesRequest struct {
  ProtocolVersion int32 `thrift:"protocol_version,1,required" db:"protocol_version" json:"protocol_version"`
  RequestorUserName string `thrift:"requestorUserName,2,required" db:"requestorUserName" json:"requestorUserName"`
  OldAuthorizable *TSentryAuthorizable `thrift:"oldAuthorizable,3,required" db:"oldAuthorizable" json:"oldAuthorizable"`
  NewAuthorizable_ *TSentryAuthorizable `thrift:"newAuthorizable,4,required" db:"newAuthorizable" json:"newAuthorizable"`
}

func NewTRenamePrivilegesRequest() *TRenamePrivilegesRequest {
  return &TRenamePrivilegesRequest{
ProtocolVersion: 2,
}
}


func (p *TRenamePrivilegesRequest) GetProtocolVersion() int32 {
  return p.ProtocolVersion
}

func (p *TRenamePrivilegesRequest) GetRequestorUserName() string {
  return p.RequestorUserName
}
var TRenamePrivilegesRequest_OldAuthorizable_DEFAULT *TSentryAuthorizable
func (p *TRenamePrivilegesRequest) GetOldAuthorizable() *TSentryAuthorizable {
  if !p.IsSetOldAuthorizable() {
    return TRenamePrivilegesRequest_OldAuthorizable_DEFAULT
  }
return p.OldAuthorizable
}
var TRenamePrivilegesRequest_NewAuthorizable__DEFAULT *TSentryAuthorizable
func (p *TRenamePrivilegesRequest) GetNewAuthorizable_() *TSentryAuthorizable {
  if !p.IsSetNewAuthorizable_() {
    return TRenamePrivilegesRequest_NewAuthorizable__DEFAULT
  }
return p.NewAuthorizable_
}
func (p *TRenamePrivilegesRequest) IsSetOldAuthorizable() bool {
  return p.OldAuthorizable != nil
}

func (p *TRenamePrivilegesRequest) IsSetNewAuthorizable_() bool {
  return p.NewAuthorizable_ != nil
}

func (p *TRenamePrivilegesRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetProtocolVersion bool = false;
  var issetRequestorUserName bool = false;
  var issetOldAuthorizable bool = false;
  var issetNewAuthorizable_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProtocolVersion = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRequestorUserName = true
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetOldAuthorizable = true
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetNewAuthorizable_ = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetProtocolVersion{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"));
  }
  if !issetRequestorUserName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"));
  }
  if !issetOldAuthorizable{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field OldAuthorizable is not set"));
  }
  if !issetNewAuthorizable_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NewAuthorizable_ is not set"));
  }
  return nil
}

func (p *TRenamePrivilegesRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ProtocolVersion = v
}
  return nil
}

func (p *TRenamePrivilegesRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RequestorUserName = v
}
  return nil
}

func (p *TRenamePrivilegesRequest)  ReadField3(iprot thrift.TProtocol) error {
  p.OldAuthorizable = &TSentryAuthorizable{}
  if err := p.OldAuthorizable.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OldAuthorizable), err)
  }
  return nil
}

func (p *TRenamePrivilegesRequest)  ReadField4(iprot thrift.TProtocol) error {
  p.NewAuthorizable_ = &TSentryAuthorizable{}
  if err := p.NewAuthorizable_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NewAuthorizable_), err)
  }
  return nil
}

func (p *TRenamePrivilegesRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TRenamePrivilegesRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TRenamePrivilegesRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err) }
  return err
}

func (p *TRenamePrivilegesRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err) }
  if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err) }
  return err
}

func (p *TRenamePrivilegesRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("oldAuthorizable", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:oldAuthorizable: ", p), err) }
  if err := p.OldAuthorizable.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OldAuthorizable), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:oldAuthorizable: ", p), err) }
  return err
}

func (p *TRenamePrivilegesRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("newAuthorizable", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:newAuthorizable: ", p), err) }
  if err := p.NewAuthorizable_.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NewAuthorizable_), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:newAuthorizable: ", p), err) }
  return err
}

func (p *TRenamePrivilegesRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TRenamePrivilegesRequest(%+v)", *p)
}

// Attributes:
//  - Status
type TRenamePrivilegesResponse struct {
  Status *sentry_common_service.TSentryResponseStatus `thrift:"status,1,required" db:"status" json:"status"`
}

func NewTRenamePrivilegesResponse() *TRenamePrivilegesResponse {
  return &TRenamePrivilegesResponse{}
}

var TRenamePrivilegesResponse_Status_DEFAULT *sentry_common_service.TSentryResponseStatus
func (p *TRenamePrivilegesResponse) GetStatus() *sentry_common_service.TSentryResponseStatus {
  if !p.IsSetStatus() {
    return TRenamePrivilegesResponse_Status_DEFAULT
  }
return p.Status
}
func (p *TRenamePrivilegesResponse) IsSetStatus() bool {
  return p.Status != nil
}

func (p *TRenamePrivilegesResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetStatus bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetStatus = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetStatus{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"));
  }
  return nil
}

func (p *TRenamePrivilegesResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &sentry_common_service.TSentryResponseStatus{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *TRenamePrivilegesResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TRenamePrivilegesResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TRenamePrivilegesResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *TRenamePrivilegesResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TRenamePrivilegesResponse(%+v)", *p)
}

// Attributes:
//  - All
//  - Roles
type TSentryActiveRoleSet struct {
  All bool `thrift:"all,1,required" db:"all" json:"all"`
  Roles []string `thrift:"roles,2,required" db:"roles" json:"roles"`
}

func NewTSentryActiveRoleSet() *TSentryActiveRoleSet {
  return &TSentryActiveRoleSet{}
}


func (p *TSentryActiveRoleSet) GetAll() bool {
  return p.All
}

func (p *TSentryActiveRoleSet) GetRoles() []string {
  return p.Roles
}
func (p *TSentryActiveRoleSet) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAll bool = false;
  var issetRoles bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAll = true
    case 2:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRoles = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAll{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field All is not set"));
  }
  if !issetRoles{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Roles is not set"));
  }
  return nil
}

func (p *TSentryActiveRoleSet)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.All = v
}
  return nil
}

func (p *TSentryActiveRoleSet)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Roles =  tSet
  for i := 0; i < size; i ++ {
var _elem10 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem10 = v
}
    p.Roles = append(p.Roles, _elem10)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TSentryActiveRoleSet) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TSentryActiveRoleSet"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSentryActiveRoleSet) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("all", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:all: ", p), err) }
  if err := oprot.WriteBool(bool(p.All)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.all (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:all: ", p), err) }
  return err
}

func (p *TSentryActiveRoleSet) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("roles", thrift.SET, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:roles: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.STRING, len(p.Roles)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.Roles); i++ {
    for j := i+1; j<len(p.Roles); j++ {
      if reflect.DeepEqual(p.Roles[i],p.Roles[j]) { 
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Roles[i]))
      }
    }
  }
  for _, v := range p.Roles {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:roles: ", p), err) }
  return err
}

func (p *TSentryActiveRoleSet) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSentryActiveRoleSet(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - Groups
//  - RoleSet
//  - AuthorizableHierarchy
//  - Users
type TListSentryPrivilegesForProviderRequest struct {
  ProtocolVersion int32 `thrift:"protocol_version,1,required" db:"protocol_version" json:"protocol_version"`
  Groups []string `thrift:"groups,2,required" db:"groups" json:"groups"`
  RoleSet *TSentryActiveRoleSet `thrift:"roleSet,3,required" db:"roleSet" json:"roleSet"`
  AuthorizableHierarchy *TSentryAuthorizable `thrift:"authorizableHierarchy,4" db:"authorizableHierarchy" json:"authorizableHierarchy,omitempty"`
  Users []string `thrift:"users,5" db:"users" json:"users,omitempty"`
}

func NewTListSentryPrivilegesForProviderRequest() *TListSentryPrivilegesForProviderRequest {
  return &TListSentryPrivilegesForProviderRequest{
ProtocolVersion: 2,
}
}


func (p *TListSentryPrivilegesForProviderRequest) GetProtocolVersion() int32 {
  return p.ProtocolVersion
}

func (p *TListSentryPrivilegesForProviderRequest) GetGroups() []string {
  return p.Groups
}
var TListSentryPrivilegesForProviderRequest_RoleSet_DEFAULT *TSentryActiveRoleSet
func (p *TListSentryPrivilegesForProviderRequest) GetRoleSet() *TSentryActiveRoleSet {
  if !p.IsSetRoleSet() {
    return TListSentryPrivilegesForProviderRequest_RoleSet_DEFAULT
  }
return p.RoleSet
}
var TListSentryPrivilegesForProviderRequest_AuthorizableHierarchy_DEFAULT *TSentryAuthorizable
func (p *TListSentryPrivilegesForProviderRequest) GetAuthorizableHierarchy() *TSentryAuthorizable {
  if !p.IsSetAuthorizableHierarchy() {
    return TListSentryPrivilegesForProviderRequest_AuthorizableHierarchy_DEFAULT
  }
return p.AuthorizableHierarchy
}
var TListSentryPrivilegesForProviderRequest_Users_DEFAULT []string

func (p *TListSentryPrivilegesForProviderRequest) GetUsers() []string {
  return p.Users
}
func (p *TListSentryPrivilegesForProviderRequest) IsSetRoleSet() bool {
  return p.RoleSet != nil
}

func (p *TListSentryPrivilegesForProviderRequest) IsSetAuthorizableHierarchy() bool {
  return p.AuthorizableHierarchy != nil
}

func (p *TListSentryPrivilegesForProviderRequest) IsSetUsers() bool {
  return p.Users != nil
}

func (p *TListSentryPrivilegesForProviderRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetProtocolVersion bool = false;
  var issetGroups bool = false;
  var issetRoleSet bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProtocolVersion = true
    case 2:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGroups = true
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRoleSet = true
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetProtocolVersion{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"));
  }
  if !issetGroups{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Groups is not set"));
  }
  if !issetRoleSet{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoleSet is not set"));
  }
  return nil
}

func (p *TListSentryPrivilegesForProviderRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ProtocolVersion = v
}
  return nil
}

func (p *TListSentryPrivilegesForProviderRequest)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Groups =  tSet
  for i := 0; i < size; i ++ {
var _elem11 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem11 = v
}
    p.Groups = append(p.Groups, _elem11)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TListSentryPrivilegesForProviderRequest)  ReadField3(iprot thrift.TProtocol) error {
  p.RoleSet = &TSentryActiveRoleSet{}
  if err := p.RoleSet.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RoleSet), err)
  }
  return nil
}

func (p *TListSentryPrivilegesForProviderRequest)  ReadField4(iprot thrift.TProtocol) error {
  p.AuthorizableHierarchy = &TSentryAuthorizable{}
  if err := p.AuthorizableHierarchy.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthorizableHierarchy), err)
  }
  return nil
}

func (p *TListSentryPrivilegesForProviderRequest)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Users =  tSet
  for i := 0; i < size; i ++ {
var _elem12 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem12 = v
}
    p.Users = append(p.Users, _elem12)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TListSentryPrivilegesForProviderRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TListSentryPrivilegesForProviderRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TListSentryPrivilegesForProviderRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err) }
  return err
}

func (p *TListSentryPrivilegesForProviderRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("groups", thrift.SET, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groups: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.STRING, len(p.Groups)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.Groups); i++ {
    for j := i+1; j<len(p.Groups); j++ {
      if reflect.DeepEqual(p.Groups[i],p.Groups[j]) { 
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Groups[i]))
      }
    }
  }
  for _, v := range p.Groups {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groups: ", p), err) }
  return err
}

func (p *TListSentryPrivilegesForProviderRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("roleSet", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roleSet: ", p), err) }
  if err := p.RoleSet.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RoleSet), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roleSet: ", p), err) }
  return err
}

func (p *TListSentryPrivilegesForProviderRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAuthorizableHierarchy() {
    if err := oprot.WriteFieldBegin("authorizableHierarchy", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:authorizableHierarchy: ", p), err) }
    if err := p.AuthorizableHierarchy.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthorizableHierarchy), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:authorizableHierarchy: ", p), err) }
  }
  return err
}

func (p *TListSentryPrivilegesForProviderRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetUsers() {
    if err := oprot.WriteFieldBegin("users", thrift.SET, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:users: ", p), err) }
    if err := oprot.WriteSetBegin(thrift.STRING, len(p.Users)); err != nil {
      return thrift.PrependError("error writing set begin: ", err)
    }
    for i := 0; i<len(p.Users); i++ {
      for j := i+1; j<len(p.Users); j++ {
        if reflect.DeepEqual(p.Users[i],p.Users[j]) { 
          return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Users[i]))
        }
      }
    }
    for _, v := range p.Users {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteSetEnd(); err != nil {
      return thrift.PrependError("error writing set end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:users: ", p), err) }
  }
  return err
}

func (p *TListSentryPrivilegesForProviderRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TListSentryPrivilegesForProviderRequest(%+v)", *p)
}

// Attributes:
//  - Status
//  - Privileges
type TListSentryPrivilegesForProviderResponse struct {
  Status *sentry_common_service.TSentryResponseStatus `thrift:"status,1,required" db:"status" json:"status"`
  Privileges []string `thrift:"privileges,2,required" db:"privileges" json:"privileges"`
}

func NewTListSentryPrivilegesForProviderResponse() *TListSentryPrivilegesForProviderResponse {
  return &TListSentryPrivilegesForProviderResponse{}
}

var TListSentryPrivilegesForProviderResponse_Status_DEFAULT *sentry_common_service.TSentryResponseStatus
func (p *TListSentryPrivilegesForProviderResponse) GetStatus() *sentry_common_service.TSentryResponseStatus {
  if !p.IsSetStatus() {
    return TListSentryPrivilegesForProviderResponse_Status_DEFAULT
  }
return p.Status
}

func (p *TListSentryPrivilegesForProviderResponse) GetPrivileges() []string {
  return p.Privileges
}
func (p *TListSentryPrivilegesForProviderResponse) IsSetStatus() bool {
  return p.Status != nil
}

func (p *TListSentryPrivilegesForProviderResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetStatus bool = false;
  var issetPrivileges bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetStatus = true
    case 2:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetPrivileges = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetStatus{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"));
  }
  if !issetPrivileges{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Privileges is not set"));
  }
  return nil
}

func (p *TListSentryPrivilegesForProviderResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &sentry_common_service.TSentryResponseStatus{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *TListSentryPrivilegesForProviderResponse)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Privileges =  tSet
  for i := 0; i < size; i ++ {
var _elem13 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem13 = v
}
    p.Privileges = append(p.Privileges, _elem13)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TListSentryPrivilegesForProviderResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TListSentryPrivilegesForProviderResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TListSentryPrivilegesForProviderResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *TListSentryPrivilegesForProviderResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privileges", thrift.SET, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:privileges: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.STRING, len(p.Privileges)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.Privileges); i++ {
    for j := i+1; j<len(p.Privileges); j++ {
      if reflect.DeepEqual(p.Privileges[i],p.Privileges[j]) { 
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Privileges[i]))
      }
    }
  }
  for _, v := range p.Privileges {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:privileges: ", p), err) }
  return err
}

func (p *TListSentryPrivilegesForProviderResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TListSentryPrivilegesForProviderResponse(%+v)", *p)
}

// Attributes:
//  - PrivilegeMap
type TSentryPrivilegeMap struct {
  PrivilegeMap map[string][]*TSentryPrivilege `thrift:"privilegeMap,1,required" db:"privilegeMap" json:"privilegeMap"`
}

func NewTSentryPrivilegeMap() *TSentryPrivilegeMap {
  return &TSentryPrivilegeMap{}
}


func (p *TSentryPrivilegeMap) GetPrivilegeMap() map[string][]*TSentryPrivilege {
  return p.PrivilegeMap
}
func (p *TSentryPrivilegeMap) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetPrivilegeMap bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetPrivilegeMap = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetPrivilegeMap{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PrivilegeMap is not set"));
  }
  return nil
}

func (p *TSentryPrivilegeMap)  ReadField1(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]*TSentryPrivilege, size)
  p.PrivilegeMap =  tMap
  for i := 0; i < size; i ++ {
var _key14 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key14 = v
}
    _, size, err := iprot.ReadSetBegin()
    if err != nil {
      return thrift.PrependError("error reading set begin: ", err)
    }
    tSet := make([]*TSentryPrivilege, 0, size)
    _val15 :=  tSet
    for i := 0; i < size; i ++ {
      _elem16 := &TSentryPrivilege{
      GrantOption:       0,
}
      if err := _elem16.Read(iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem16), err)
      }
      _val15 = append(_val15, _elem16)
    }
    if err := iprot.ReadSetEnd(); err != nil {
      return thrift.PrependError("error reading set end: ", err)
    }
    p.PrivilegeMap[_key14] = _val15
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TSentryPrivilegeMap) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TSentryPrivilegeMap"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSentryPrivilegeMap) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privilegeMap", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:privilegeMap: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.SET, len(p.PrivilegeMap)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.PrivilegeMap {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteSetBegin(thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing set begin: ", err)
    }
    for i := 0; i<len(v); i++ {
      for j := i+1; j<len(v); j++ {
        if reflect.DeepEqual(v[i],v[j]) { 
          return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v[i]))
        }
      }
    }
    for _, v := range v {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteSetEnd(); err != nil {
      return thrift.PrependError("error writing set end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:privilegeMap: ", p), err) }
  return err
}

func (p *TSentryPrivilegeMap) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSentryPrivilegeMap(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - AuthorizableSet
//  - Groups
//  - RoleSet
type TListSentryPrivilegesByAuthRequest struct {
  ProtocolVersion int32 `thrift:"protocol_version,1,required" db:"protocol_version" json:"protocol_version"`
  RequestorUserName string `thrift:"requestorUserName,2,required" db:"requestorUserName" json:"requestorUserName"`
  AuthorizableSet []*TSentryAuthorizable `thrift:"authorizableSet,3,required" db:"authorizableSet" json:"authorizableSet"`
  Groups []string `thrift:"groups,4" db:"groups" json:"groups,omitempty"`
  RoleSet *TSentryActiveRoleSet `thrift:"roleSet,5" db:"roleSet" json:"roleSet,omitempty"`
}

func NewTListSentryPrivilegesByAuthRequest() *TListSentryPrivilegesByAuthRequest {
  return &TListSentryPrivilegesByAuthRequest{
ProtocolVersion: 2,
}
}


func (p *TListSentryPrivilegesByAuthRequest) GetProtocolVersion() int32 {
  return p.ProtocolVersion
}

func (p *TListSentryPrivilegesByAuthRequest) GetRequestorUserName() string {
  return p.RequestorUserName
}

func (p *TListSentryPrivilegesByAuthRequest) GetAuthorizableSet() []*TSentryAuthorizable {
  return p.AuthorizableSet
}
var TListSentryPrivilegesByAuthRequest_Groups_DEFAULT []string

func (p *TListSentryPrivilegesByAuthRequest) GetGroups() []string {
  return p.Groups
}
var TListSentryPrivilegesByAuthRequest_RoleSet_DEFAULT *TSentryActiveRoleSet
func (p *TListSentryPrivilegesByAuthRequest) GetRoleSet() *TSentryActiveRoleSet {
  if !p.IsSetRoleSet() {
    return TListSentryPrivilegesByAuthRequest_RoleSet_DEFAULT
  }
return p.RoleSet
}
func (p *TListSentryPrivilegesByAuthRequest) IsSetGroups() bool {
  return p.Groups != nil
}

func (p *TListSentryPrivilegesByAuthRequest) IsSetRoleSet() bool {
  return p.RoleSet != nil
}

func (p *TListSentryPrivilegesByAuthRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetProtocolVersion bool = false;
  var issetRequestorUserName bool = false;
  var issetAuthorizableSet bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProtocolVersion = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRequestorUserName = true
    case 3:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthorizableSet = true
    case 4:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetProtocolVersion{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"));
  }
  if !issetRequestorUserName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"));
  }
  if !issetAuthorizableSet{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthorizableSet is not set"));
  }
  return nil
}

func (p *TListSentryPrivilegesByAuthRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ProtocolVersion = v
}
  return nil
}

func (p *TListSentryPrivilegesByAuthRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RequestorUserName = v
}
  return nil
}

func (p *TListSentryPrivilegesByAuthRequest)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]*TSentryAuthorizable, 0, size)
  p.AuthorizableSet =  tSet
  for i := 0; i < size; i ++ {
    _elem17 := &TSentryAuthorizable{}
    if err := _elem17.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem17), err)
    }
    p.AuthorizableSet = append(p.AuthorizableSet, _elem17)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TListSentryPrivilegesByAuthRequest)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Groups =  tSet
  for i := 0; i < size; i ++ {
var _elem18 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem18 = v
}
    p.Groups = append(p.Groups, _elem18)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TListSentryPrivilegesByAuthRequest)  ReadField5(iprot thrift.TProtocol) error {
  p.RoleSet = &TSentryActiveRoleSet{}
  if err := p.RoleSet.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RoleSet), err)
  }
  return nil
}

func (p *TListSentryPrivilegesByAuthRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TListSentryPrivilegesByAuthRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TListSentryPrivilegesByAuthRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err) }
  return err
}

func (p *TListSentryPrivilegesByAuthRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err) }
  if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err) }
  return err
}

func (p *TListSentryPrivilegesByAuthRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authorizableSet", thrift.SET, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:authorizableSet: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.STRUCT, len(p.AuthorizableSet)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.AuthorizableSet); i++ {
    for j := i+1; j<len(p.AuthorizableSet); j++ {
      if reflect.DeepEqual(p.AuthorizableSet[i],p.AuthorizableSet[j]) { 
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.AuthorizableSet[i]))
      }
    }
  }
  for _, v := range p.AuthorizableSet {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:authorizableSet: ", p), err) }
  return err
}

func (p *TListSentryPrivilegesByAuthRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetGroups() {
    if err := oprot.WriteFieldBegin("groups", thrift.SET, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:groups: ", p), err) }
    if err := oprot.WriteSetBegin(thrift.STRING, len(p.Groups)); err != nil {
      return thrift.PrependError("error writing set begin: ", err)
    }
    for i := 0; i<len(p.Groups); i++ {
      for j := i+1; j<len(p.Groups); j++ {
        if reflect.DeepEqual(p.Groups[i],p.Groups[j]) { 
          return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Groups[i]))
        }
      }
    }
    for _, v := range p.Groups {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteSetEnd(); err != nil {
      return thrift.PrependError("error writing set end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:groups: ", p), err) }
  }
  return err
}

func (p *TListSentryPrivilegesByAuthRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetRoleSet() {
    if err := oprot.WriteFieldBegin("roleSet", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:roleSet: ", p), err) }
    if err := p.RoleSet.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RoleSet), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:roleSet: ", p), err) }
  }
  return err
}

func (p *TListSentryPrivilegesByAuthRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TListSentryPrivilegesByAuthRequest(%+v)", *p)
}

// Attributes:
//  - Status
//  - PrivilegesMapByAuth
type TListSentryPrivilegesByAuthResponse struct {
  Status *sentry_common_service.TSentryResponseStatus `thrift:"status,1,required" db:"status" json:"status"`
  PrivilegesMapByAuth map[*TSentryAuthorizable]*TSentryPrivilegeMap `thrift:"privilegesMapByAuth,2" db:"privilegesMapByAuth" json:"privilegesMapByAuth,omitempty"`
}

func NewTListSentryPrivilegesByAuthResponse() *TListSentryPrivilegesByAuthResponse {
  return &TListSentryPrivilegesByAuthResponse{}
}

var TListSentryPrivilegesByAuthResponse_Status_DEFAULT *sentry_common_service.TSentryResponseStatus
func (p *TListSentryPrivilegesByAuthResponse) GetStatus() *sentry_common_service.TSentryResponseStatus {
  if !p.IsSetStatus() {
    return TListSentryPrivilegesByAuthResponse_Status_DEFAULT
  }
return p.Status
}
var TListSentryPrivilegesByAuthResponse_PrivilegesMapByAuth_DEFAULT map[*TSentryAuthorizable]*TSentryPrivilegeMap

func (p *TListSentryPrivilegesByAuthResponse) GetPrivilegesMapByAuth() map[*TSentryAuthorizable]*TSentryPrivilegeMap {
  return p.PrivilegesMapByAuth
}
func (p *TListSentryPrivilegesByAuthResponse) IsSetStatus() bool {
  return p.Status != nil
}

func (p *TListSentryPrivilegesByAuthResponse) IsSetPrivilegesMapByAuth() bool {
  return p.PrivilegesMapByAuth != nil
}

func (p *TListSentryPrivilegesByAuthResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetStatus bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetStatus = true
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetStatus{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"));
  }
  return nil
}

func (p *TListSentryPrivilegesByAuthResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &sentry_common_service.TSentryResponseStatus{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *TListSentryPrivilegesByAuthResponse)  ReadField2(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[*TSentryAuthorizable]*TSentryPrivilegeMap, size)
  p.PrivilegesMapByAuth =  tMap
  for i := 0; i < size; i ++ {
    _key19 := &TSentryAuthorizable{}
    if err := _key19.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _key19), err)
    }
    _val20 := &TSentryPrivilegeMap{}
    if err := _val20.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val20), err)
    }
    p.PrivilegesMapByAuth[_key19] = _val20
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TListSentryPrivilegesByAuthResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TListSentryPrivilegesByAuthResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TListSentryPrivilegesByAuthResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *TListSentryPrivilegesByAuthResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetPrivilegesMapByAuth() {
    if err := oprot.WriteFieldBegin("privilegesMapByAuth", thrift.MAP, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:privilegesMapByAuth: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRUCT, thrift.STRUCT, len(p.PrivilegesMapByAuth)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.PrivilegesMapByAuth {
      if err := k.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", k), err)
      }
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:privilegesMapByAuth: ", p), err) }
  }
  return err
}

func (p *TListSentryPrivilegesByAuthResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TListSentryPrivilegesByAuthResponse(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - PropertyName
//  - DefaultValue
type TSentryConfigValueRequest struct {
  ProtocolVersion int32 `thrift:"protocol_version,1,required" db:"protocol_version" json:"protocol_version"`
  PropertyName string `thrift:"propertyName,2,required" db:"propertyName" json:"propertyName"`
  DefaultValue *string `thrift:"defaultValue,3" db:"defaultValue" json:"defaultValue,omitempty"`
}

func NewTSentryConfigValueRequest() *TSentryConfigValueRequest {
  return &TSentryConfigValueRequest{
ProtocolVersion: 2,
}
}


func (p *TSentryConfigValueRequest) GetProtocolVersion() int32 {
  return p.ProtocolVersion
}

func (p *TSentryConfigValueRequest) GetPropertyName() string {
  return p.PropertyName
}
var TSentryConfigValueRequest_DefaultValue_DEFAULT string
func (p *TSentryConfigValueRequest) GetDefaultValue() string {
  if !p.IsSetDefaultValue() {
    return TSentryConfigValueRequest_DefaultValue_DEFAULT
  }
return *p.DefaultValue
}
func (p *TSentryConfigValueRequest) IsSetDefaultValue() bool {
  return p.DefaultValue != nil
}

func (p *TSentryConfigValueRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetProtocolVersion bool = false;
  var issetPropertyName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProtocolVersion = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetPropertyName = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetProtocolVersion{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"));
  }
  if !issetPropertyName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PropertyName is not set"));
  }
  return nil
}

func (p *TSentryConfigValueRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ProtocolVersion = v
}
  return nil
}

func (p *TSentryConfigValueRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PropertyName = v
}
  return nil
}

func (p *TSentryConfigValueRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.DefaultValue = &v
}
  return nil
}

func (p *TSentryConfigValueRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TSentryConfigValueRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSentryConfigValueRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err) }
  return err
}

func (p *TSentryConfigValueRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("propertyName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:propertyName: ", p), err) }
  if err := oprot.WriteString(string(p.PropertyName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.propertyName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:propertyName: ", p), err) }
  return err
}

func (p *TSentryConfigValueRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetDefaultValue() {
    if err := oprot.WriteFieldBegin("defaultValue", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:defaultValue: ", p), err) }
    if err := oprot.WriteString(string(*p.DefaultValue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.defaultValue (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:defaultValue: ", p), err) }
  }
  return err
}

func (p *TSentryConfigValueRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSentryConfigValueRequest(%+v)", *p)
}

// Attributes:
//  - Status
//  - Value
type TSentryConfigValueResponse struct {
  Status *sentry_common_service.TSentryResponseStatus `thrift:"status,1,required" db:"status" json:"status"`
  Value *string `thrift:"value,2" db:"value" json:"value,omitempty"`
}

func NewTSentryConfigValueResponse() *TSentryConfigValueResponse {
  return &TSentryConfigValueResponse{}
}

var TSentryConfigValueResponse_Status_DEFAULT *sentry_common_service.TSentryResponseStatus
func (p *TSentryConfigValueResponse) GetStatus() *sentry_common_service.TSentryResponseStatus {
  if !p.IsSetStatus() {
    return TSentryConfigValueResponse_Status_DEFAULT
  }
return p.Status
}
var TSentryConfigValueResponse_Value_DEFAULT string
func (p *TSentryConfigValueResponse) GetValue() string {
  if !p.IsSetValue() {
    return TSentryConfigValueResponse_Value_DEFAULT
  }
return *p.Value
}
func (p *TSentryConfigValueResponse) IsSetStatus() bool {
  return p.Status != nil
}

func (p *TSentryConfigValueResponse) IsSetValue() bool {
  return p.Value != nil
}

func (p *TSentryConfigValueResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetStatus bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetStatus = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetStatus{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"));
  }
  return nil
}

func (p *TSentryConfigValueResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &sentry_common_service.TSentryResponseStatus{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *TSentryConfigValueResponse)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Value = &v
}
  return nil
}

func (p *TSentryConfigValueResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TSentryConfigValueResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSentryConfigValueResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *TSentryConfigValueResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetValue() {
    if err := oprot.WriteFieldBegin("value", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err) }
    if err := oprot.WriteString(string(*p.Value)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err) }
  }
  return err
}

func (p *TSentryConfigValueResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSentryConfigValueResponse(%+v)", *p)
}

// Attributes:
//  - GroupRolesMap
//  - RolePrivilegesMap
//  - UserRolesMap
type TSentryMappingData struct {
  GroupRolesMap map[string][]string `thrift:"groupRolesMap,1" db:"groupRolesMap" json:"groupRolesMap,omitempty"`
  RolePrivilegesMap map[string][]*TSentryPrivilege `thrift:"rolePrivilegesMap,2" db:"rolePrivilegesMap" json:"rolePrivilegesMap,omitempty"`
  UserRolesMap map[string][]string `thrift:"userRolesMap,3" db:"userRolesMap" json:"userRolesMap,omitempty"`
}

func NewTSentryMappingData() *TSentryMappingData {
  return &TSentryMappingData{}
}

var TSentryMappingData_GroupRolesMap_DEFAULT map[string][]string

func (p *TSentryMappingData) GetGroupRolesMap() map[string][]string {
  return p.GroupRolesMap
}
var TSentryMappingData_RolePrivilegesMap_DEFAULT map[string][]*TSentryPrivilege

func (p *TSentryMappingData) GetRolePrivilegesMap() map[string][]*TSentryPrivilege {
  return p.RolePrivilegesMap
}
var TSentryMappingData_UserRolesMap_DEFAULT map[string][]string

func (p *TSentryMappingData) GetUserRolesMap() map[string][]string {
  return p.UserRolesMap
}
func (p *TSentryMappingData) IsSetGroupRolesMap() bool {
  return p.GroupRolesMap != nil
}

func (p *TSentryMappingData) IsSetRolePrivilegesMap() bool {
  return p.RolePrivilegesMap != nil
}

func (p *TSentryMappingData) IsSetUserRolesMap() bool {
  return p.UserRolesMap != nil
}

func (p *TSentryMappingData) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSentryMappingData)  ReadField1(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]string, size)
  p.GroupRolesMap =  tMap
  for i := 0; i < size; i ++ {
var _key21 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key21 = v
}
    _, size, err := iprot.ReadSetBegin()
    if err != nil {
      return thrift.PrependError("error reading set begin: ", err)
    }
    tSet := make([]string, 0, size)
    _val22 :=  tSet
    for i := 0; i < size; i ++ {
var _elem23 string
      if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      _elem23 = v
}
      _val22 = append(_val22, _elem23)
    }
    if err := iprot.ReadSetEnd(); err != nil {
      return thrift.PrependError("error reading set end: ", err)
    }
    p.GroupRolesMap[_key21] = _val22
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TSentryMappingData)  ReadField2(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]*TSentryPrivilege, size)
  p.RolePrivilegesMap =  tMap
  for i := 0; i < size; i ++ {
var _key24 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key24 = v
}
    _, size, err := iprot.ReadSetBegin()
    if err != nil {
      return thrift.PrependError("error reading set begin: ", err)
    }
    tSet := make([]*TSentryPrivilege, 0, size)
    _val25 :=  tSet
    for i := 0; i < size; i ++ {
      _elem26 := &TSentryPrivilege{
      GrantOption:       0,
}
      if err := _elem26.Read(iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem26), err)
      }
      _val25 = append(_val25, _elem26)
    }
    if err := iprot.ReadSetEnd(); err != nil {
      return thrift.PrependError("error reading set end: ", err)
    }
    p.RolePrivilegesMap[_key24] = _val25
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TSentryMappingData)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]string, size)
  p.UserRolesMap =  tMap
  for i := 0; i < size; i ++ {
var _key27 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key27 = v
}
    _, size, err := iprot.ReadSetBegin()
    if err != nil {
      return thrift.PrependError("error reading set begin: ", err)
    }
    tSet := make([]string, 0, size)
    _val28 :=  tSet
    for i := 0; i < size; i ++ {
var _elem29 string
      if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      _elem29 = v
}
      _val28 = append(_val28, _elem29)
    }
    if err := iprot.ReadSetEnd(); err != nil {
      return thrift.PrependError("error reading set end: ", err)
    }
    p.UserRolesMap[_key27] = _val28
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TSentryMappingData) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TSentryMappingData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSentryMappingData) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetGroupRolesMap() {
    if err := oprot.WriteFieldBegin("groupRolesMap", thrift.MAP, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:groupRolesMap: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.SET, len(p.GroupRolesMap)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.GroupRolesMap {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteSetBegin(thrift.STRING, len(v)); err != nil {
        return thrift.PrependError("error writing set begin: ", err)
      }
      for i := 0; i<len(v); i++ {
        for j := i+1; j<len(v); j++ {
          if reflect.DeepEqual(v[i],v[j]) { 
            return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v[i]))
          }
        }
      }
      for _, v := range v {
        if err := oprot.WriteString(string(v)); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      }
      if err := oprot.WriteSetEnd(); err != nil {
        return thrift.PrependError("error writing set end: ", err)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:groupRolesMap: ", p), err) }
  }
  return err
}

func (p *TSentryMappingData) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRolePrivilegesMap() {
    if err := oprot.WriteFieldBegin("rolePrivilegesMap", thrift.MAP, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:rolePrivilegesMap: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.SET, len(p.RolePrivilegesMap)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.RolePrivilegesMap {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteSetBegin(thrift.STRUCT, len(v)); err != nil {
        return thrift.PrependError("error writing set begin: ", err)
      }
      for i := 0; i<len(v); i++ {
        for j := i+1; j<len(v); j++ {
          if reflect.DeepEqual(v[i],v[j]) { 
            return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v[i]))
          }
        }
      }
      for _, v := range v {
        if err := v.Write(oprot); err != nil {
          return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
        }
      }
      if err := oprot.WriteSetEnd(); err != nil {
        return thrift.PrependError("error writing set end: ", err)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:rolePrivilegesMap: ", p), err) }
  }
  return err
}

func (p *TSentryMappingData) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetUserRolesMap() {
    if err := oprot.WriteFieldBegin("userRolesMap", thrift.MAP, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:userRolesMap: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.SET, len(p.UserRolesMap)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.UserRolesMap {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteSetBegin(thrift.STRING, len(v)); err != nil {
        return thrift.PrependError("error writing set begin: ", err)
      }
      for i := 0; i<len(v); i++ {
        for j := i+1; j<len(v); j++ {
          if reflect.DeepEqual(v[i],v[j]) { 
            return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v[i]))
          }
        }
      }
      for _, v := range v {
        if err := oprot.WriteString(string(v)); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      }
      if err := oprot.WriteSetEnd(); err != nil {
        return thrift.PrependError("error writing set end: ", err)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:userRolesMap: ", p), err) }
  }
  return err
}

func (p *TSentryMappingData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSentryMappingData(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - ObjectPath
type TSentryExportMappingDataRequest struct {
  ProtocolVersion int32 `thrift:"protocol_version,1,required" db:"protocol_version" json:"protocol_version"`
  RequestorUserName string `thrift:"requestorUserName,2,required" db:"requestorUserName" json:"requestorUserName"`
  ObjectPath *string `thrift:"objectPath,3" db:"objectPath" json:"objectPath,omitempty"`
}

func NewTSentryExportMappingDataRequest() *TSentryExportMappingDataRequest {
  return &TSentryExportMappingDataRequest{
ProtocolVersion: 1,
}
}


func (p *TSentryExportMappingDataRequest) GetProtocolVersion() int32 {
  return p.ProtocolVersion
}

func (p *TSentryExportMappingDataRequest) GetRequestorUserName() string {
  return p.RequestorUserName
}
var TSentryExportMappingDataRequest_ObjectPath_DEFAULT string
func (p *TSentryExportMappingDataRequest) GetObjectPath() string {
  if !p.IsSetObjectPath() {
    return TSentryExportMappingDataRequest_ObjectPath_DEFAULT
  }
return *p.ObjectPath
}
func (p *TSentryExportMappingDataRequest) IsSetObjectPath() bool {
  return p.ObjectPath != nil
}

func (p *TSentryExportMappingDataRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetProtocolVersion bool = false;
  var issetRequestorUserName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProtocolVersion = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRequestorUserName = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetProtocolVersion{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"));
  }
  if !issetRequestorUserName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"));
  }
  return nil
}

func (p *TSentryExportMappingDataRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ProtocolVersion = v
}
  return nil
}

func (p *TSentryExportMappingDataRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RequestorUserName = v
}
  return nil
}

func (p *TSentryExportMappingDataRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ObjectPath = &v
}
  return nil
}

func (p *TSentryExportMappingDataRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TSentryExportMappingDataRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSentryExportMappingDataRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err) }
  return err
}

func (p *TSentryExportMappingDataRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err) }
  if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err) }
  return err
}

func (p *TSentryExportMappingDataRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetObjectPath() {
    if err := oprot.WriteFieldBegin("objectPath", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:objectPath: ", p), err) }
    if err := oprot.WriteString(string(*p.ObjectPath)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.objectPath (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:objectPath: ", p), err) }
  }
  return err
}

func (p *TSentryExportMappingDataRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSentryExportMappingDataRequest(%+v)", *p)
}

// Attributes:
//  - Status
//  - MappingData
type TSentryExportMappingDataResponse struct {
  Status *sentry_common_service.TSentryResponseStatus `thrift:"status,1,required" db:"status" json:"status"`
  MappingData *TSentryMappingData `thrift:"mappingData,2,required" db:"mappingData" json:"mappingData"`
}

func NewTSentryExportMappingDataResponse() *TSentryExportMappingDataResponse {
  return &TSentryExportMappingDataResponse{}
}

var TSentryExportMappingDataResponse_Status_DEFAULT *sentry_common_service.TSentryResponseStatus
func (p *TSentryExportMappingDataResponse) GetStatus() *sentry_common_service.TSentryResponseStatus {
  if !p.IsSetStatus() {
    return TSentryExportMappingDataResponse_Status_DEFAULT
  }
return p.Status
}
var TSentryExportMappingDataResponse_MappingData_DEFAULT *TSentryMappingData
func (p *TSentryExportMappingDataResponse) GetMappingData() *TSentryMappingData {
  if !p.IsSetMappingData() {
    return TSentryExportMappingDataResponse_MappingData_DEFAULT
  }
return p.MappingData
}
func (p *TSentryExportMappingDataResponse) IsSetStatus() bool {
  return p.Status != nil
}

func (p *TSentryExportMappingDataResponse) IsSetMappingData() bool {
  return p.MappingData != nil
}

func (p *TSentryExportMappingDataResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetStatus bool = false;
  var issetMappingData bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetStatus = true
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetMappingData = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetStatus{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"));
  }
  if !issetMappingData{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MappingData is not set"));
  }
  return nil
}

func (p *TSentryExportMappingDataResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &sentry_common_service.TSentryResponseStatus{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *TSentryExportMappingDataResponse)  ReadField2(iprot thrift.TProtocol) error {
  p.MappingData = &TSentryMappingData{}
  if err := p.MappingData.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.MappingData), err)
  }
  return nil
}

func (p *TSentryExportMappingDataResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TSentryExportMappingDataResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSentryExportMappingDataResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *TSentryExportMappingDataResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mappingData", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mappingData: ", p), err) }
  if err := p.MappingData.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.MappingData), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mappingData: ", p), err) }
  return err
}

func (p *TSentryExportMappingDataResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSentryExportMappingDataResponse(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - OverwriteRole
//  - MappingData
type TSentryImportMappingDataRequest struct {
  ProtocolVersion int32 `thrift:"protocol_version,1,required" db:"protocol_version" json:"protocol_version"`
  RequestorUserName string `thrift:"requestorUserName,2,required" db:"requestorUserName" json:"requestorUserName"`
  OverwriteRole bool `thrift:"overwriteRole,3,required" db:"overwriteRole" json:"overwriteRole"`
  MappingData *TSentryMappingData `thrift:"mappingData,4,required" db:"mappingData" json:"mappingData"`
}

func NewTSentryImportMappingDataRequest() *TSentryImportMappingDataRequest {
  return &TSentryImportMappingDataRequest{
ProtocolVersion: 1,
}
}


func (p *TSentryImportMappingDataRequest) GetProtocolVersion() int32 {
  return p.ProtocolVersion
}

func (p *TSentryImportMappingDataRequest) GetRequestorUserName() string {
  return p.RequestorUserName
}

func (p *TSentryImportMappingDataRequest) GetOverwriteRole() bool {
  return p.OverwriteRole
}
var TSentryImportMappingDataRequest_MappingData_DEFAULT *TSentryMappingData
func (p *TSentryImportMappingDataRequest) GetMappingData() *TSentryMappingData {
  if !p.IsSetMappingData() {
    return TSentryImportMappingDataRequest_MappingData_DEFAULT
  }
return p.MappingData
}
func (p *TSentryImportMappingDataRequest) IsSetMappingData() bool {
  return p.MappingData != nil
}

func (p *TSentryImportMappingDataRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetProtocolVersion bool = false;
  var issetRequestorUserName bool = false;
  var issetOverwriteRole bool = false;
  var issetMappingData bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProtocolVersion = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRequestorUserName = true
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetOverwriteRole = true
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetMappingData = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetProtocolVersion{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"));
  }
  if !issetRequestorUserName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"));
  }
  if !issetOverwriteRole{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field OverwriteRole is not set"));
  }
  if !issetMappingData{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MappingData is not set"));
  }
  return nil
}

func (p *TSentryImportMappingDataRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ProtocolVersion = v
}
  return nil
}

func (p *TSentryImportMappingDataRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RequestorUserName = v
}
  return nil
}

func (p *TSentryImportMappingDataRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.OverwriteRole = v
}
  return nil
}

func (p *TSentryImportMappingDataRequest)  ReadField4(iprot thrift.TProtocol) error {
  p.MappingData = &TSentryMappingData{}
  if err := p.MappingData.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.MappingData), err)
  }
  return nil
}

func (p *TSentryImportMappingDataRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TSentryImportMappingDataRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSentryImportMappingDataRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err) }
  return err
}

func (p *TSentryImportMappingDataRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err) }
  if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err) }
  return err
}

func (p *TSentryImportMappingDataRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("overwriteRole", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:overwriteRole: ", p), err) }
  if err := oprot.WriteBool(bool(p.OverwriteRole)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.overwriteRole (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:overwriteRole: ", p), err) }
  return err
}

func (p *TSentryImportMappingDataRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mappingData", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:mappingData: ", p), err) }
  if err := p.MappingData.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.MappingData), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:mappingData: ", p), err) }
  return err
}

func (p *TSentryImportMappingDataRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSentryImportMappingDataRequest(%+v)", *p)
}

// Attributes:
//  - Status
type TSentryImportMappingDataResponse struct {
  Status *sentry_common_service.TSentryResponseStatus `thrift:"status,1,required" db:"status" json:"status"`
}

func NewTSentryImportMappingDataResponse() *TSentryImportMappingDataResponse {
  return &TSentryImportMappingDataResponse{}
}

var TSentryImportMappingDataResponse_Status_DEFAULT *sentry_common_service.TSentryResponseStatus
func (p *TSentryImportMappingDataResponse) GetStatus() *sentry_common_service.TSentryResponseStatus {
  if !p.IsSetStatus() {
    return TSentryImportMappingDataResponse_Status_DEFAULT
  }
return p.Status
}
func (p *TSentryImportMappingDataResponse) IsSetStatus() bool {
  return p.Status != nil
}

func (p *TSentryImportMappingDataResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetStatus bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetStatus = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetStatus{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"));
  }
  return nil
}

func (p *TSentryImportMappingDataResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &sentry_common_service.TSentryResponseStatus{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *TSentryImportMappingDataResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TSentryImportMappingDataResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSentryImportMappingDataResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *TSentryImportMappingDataResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSentryImportMappingDataResponse(%+v)", *p)
}

type SentryPolicyService interface {
  // Parameters:
  //  - Request
  CreateSentryRole(ctx context.Context, request *TCreateSentryRoleRequest) (r *TCreateSentryRoleResponse, err error)
  // Parameters:
  //  - Request
  DropSentryRole(ctx context.Context, request *TDropSentryRoleRequest) (r *TDropSentryRoleResponse, err error)
  // Parameters:
  //  - Request
  AlterSentryRoleGrantPrivilege(ctx context.Context, request *TAlterSentryRoleGrantPrivilegeRequest) (r *TAlterSentryRoleGrantPrivilegeResponse, err error)
  // Parameters:
  //  - Request
  AlterSentryRoleRevokePrivilege(ctx context.Context, request *TAlterSentryRoleRevokePrivilegeRequest) (r *TAlterSentryRoleRevokePrivilegeResponse, err error)
  // Parameters:
  //  - Request
  AlterSentryRoleAddGroups(ctx context.Context, request *TAlterSentryRoleAddGroupsRequest) (r *TAlterSentryRoleAddGroupsResponse, err error)
  // Parameters:
  //  - Request
  AlterSentryRoleDeleteGroups(ctx context.Context, request *TAlterSentryRoleDeleteGroupsRequest) (r *TAlterSentryRoleDeleteGroupsResponse, err error)
  // Parameters:
  //  - Request
  AlterSentryRoleAddUsers(ctx context.Context, request *TAlterSentryRoleAddUsersRequest) (r *TAlterSentryRoleAddUsersResponse, err error)
  // Parameters:
  //  - Request
  AlterSentryRoleDeleteUsers(ctx context.Context, request *TAlterSentryRoleDeleteUsersRequest) (r *TAlterSentryRoleDeleteUsersResponse, err error)
  // Parameters:
  //  - Request
  ListSentryRolesByGroup(ctx context.Context, request *TListSentryRolesRequest) (r *TListSentryRolesResponse, err error)
  // Parameters:
  //  - Request
  ListSentryRolesByUser(ctx context.Context, request *TListSentryRolesForUserRequest) (r *TListSentryRolesResponse, err error)
  // Parameters:
  //  - Request
  ListSentryPrivilegesByRole(ctx context.Context, request *TListSentryPrivilegesRequest) (r *TListSentryPrivilegesResponse, err error)
  // Parameters:
  //  - Request
  ListSentryPrivilegesForProvider(ctx context.Context, request *TListSentryPrivilegesForProviderRequest) (r *TListSentryPrivilegesForProviderResponse, err error)
  // Parameters:
  //  - Request
  DropSentryPrivilege(ctx context.Context, request *TDropPrivilegesRequest) (r *TDropPrivilegesResponse, err error)
  // Parameters:
  //  - Request
  RenameSentryPrivilege(ctx context.Context, request *TRenamePrivilegesRequest) (r *TRenamePrivilegesResponse, err error)
  // Parameters:
  //  - Request
  ListSentryPrivilegesByAuthorizable(ctx context.Context, request *TListSentryPrivilegesByAuthRequest) (r *TListSentryPrivilegesByAuthResponse, err error)
  // Parameters:
  //  - Request
  GetSentryConfigValue(ctx context.Context, request *TSentryConfigValueRequest) (r *TSentryConfigValueResponse, err error)
  // Parameters:
  //  - Request
  ExportSentryMappingData(ctx context.Context, request *TSentryExportMappingDataRequest) (r *TSentryExportMappingDataResponse, err error)
  // Parameters:
  //  - Request
  ImportSentryMappingData(ctx context.Context, request *TSentryImportMappingDataRequest) (r *TSentryImportMappingDataResponse, err error)
}

type SentryPolicyServiceClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewSentryPolicyServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *SentryPolicyServiceClient {
  return &SentryPolicyServiceClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewSentryPolicyServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *SentryPolicyServiceClient {
  return &SentryPolicyServiceClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// Parameters:
//  - Request
func (p *SentryPolicyServiceClient) CreateSentryRole(ctx context.Context, request *TCreateSentryRoleRequest) (r *TCreateSentryRoleResponse, err error) {
  if err = p.sendCreateSentryRole(request); err != nil { return }
  return p.recvCreateSentryRole()
}

func (p *SentryPolicyServiceClient) sendCreateSentryRole(request *TCreateSentryRoleRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("create_sentry_role", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SentryPolicyServiceCreateSentryRoleArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SentryPolicyServiceClient) recvCreateSentryRole() (value *TCreateSentryRoleResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "create_sentry_role" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "create_sentry_role failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "create_sentry_role failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error30 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error31 error
    error31, err = error30.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error31
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "create_sentry_role failed: invalid message type")
    return
  }
  result := SentryPolicyServiceCreateSentryRoleResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Request
func (p *SentryPolicyServiceClient) DropSentryRole(ctx context.Context, request *TDropSentryRoleRequest) (r *TDropSentryRoleResponse, err error) {
  if err = p.sendDropSentryRole(request); err != nil { return }
  return p.recvDropSentryRole()
}

func (p *SentryPolicyServiceClient) sendDropSentryRole(request *TDropSentryRoleRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("drop_sentry_role", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SentryPolicyServiceDropSentryRoleArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SentryPolicyServiceClient) recvDropSentryRole() (value *TDropSentryRoleResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "drop_sentry_role" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "drop_sentry_role failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "drop_sentry_role failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error32 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error33 error
    error33, err = error32.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error33
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "drop_sentry_role failed: invalid message type")
    return
  }
  result := SentryPolicyServiceDropSentryRoleResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Request
func (p *SentryPolicyServiceClient) AlterSentryRoleGrantPrivilege(ctx context.Context, request *TAlterSentryRoleGrantPrivilegeRequest) (r *TAlterSentryRoleGrantPrivilegeResponse, err error) {
  if err = p.sendAlterSentryRoleGrantPrivilege(request); err != nil { return }
  return p.recvAlterSentryRoleGrantPrivilege()
}

func (p *SentryPolicyServiceClient) sendAlterSentryRoleGrantPrivilege(request *TAlterSentryRoleGrantPrivilegeRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("alter_sentry_role_grant_privilege", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SentryPolicyServiceAlterSentryRoleGrantPrivilegeArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SentryPolicyServiceClient) recvAlterSentryRoleGrantPrivilege() (value *TAlterSentryRoleGrantPrivilegeResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "alter_sentry_role_grant_privilege" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "alter_sentry_role_grant_privilege failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "alter_sentry_role_grant_privilege failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error34 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error35 error
    error35, err = error34.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error35
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "alter_sentry_role_grant_privilege failed: invalid message type")
    return
  }
  result := SentryPolicyServiceAlterSentryRoleGrantPrivilegeResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Request
func (p *SentryPolicyServiceClient) AlterSentryRoleRevokePrivilege(ctx context.Context, request *TAlterSentryRoleRevokePrivilegeRequest) (r *TAlterSentryRoleRevokePrivilegeResponse, err error) {
  if err = p.sendAlterSentryRoleRevokePrivilege(request); err != nil { return }
  return p.recvAlterSentryRoleRevokePrivilege()
}

func (p *SentryPolicyServiceClient) sendAlterSentryRoleRevokePrivilege(request *TAlterSentryRoleRevokePrivilegeRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("alter_sentry_role_revoke_privilege", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SentryPolicyServiceAlterSentryRoleRevokePrivilegeArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SentryPolicyServiceClient) recvAlterSentryRoleRevokePrivilege() (value *TAlterSentryRoleRevokePrivilegeResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "alter_sentry_role_revoke_privilege" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "alter_sentry_role_revoke_privilege failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "alter_sentry_role_revoke_privilege failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error36 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error37 error
    error37, err = error36.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error37
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "alter_sentry_role_revoke_privilege failed: invalid message type")
    return
  }
  result := SentryPolicyServiceAlterSentryRoleRevokePrivilegeResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Request
func (p *SentryPolicyServiceClient) AlterSentryRoleAddGroups(ctx context.Context, request *TAlterSentryRoleAddGroupsRequest) (r *TAlterSentryRoleAddGroupsResponse, err error) {
  if err = p.sendAlterSentryRoleAddGroups(request); err != nil { return }
  return p.recvAlterSentryRoleAddGroups()
}

func (p *SentryPolicyServiceClient) sendAlterSentryRoleAddGroups(request *TAlterSentryRoleAddGroupsRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("alter_sentry_role_add_groups", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SentryPolicyServiceAlterSentryRoleAddGroupsArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SentryPolicyServiceClient) recvAlterSentryRoleAddGroups() (value *TAlterSentryRoleAddGroupsResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "alter_sentry_role_add_groups" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "alter_sentry_role_add_groups failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "alter_sentry_role_add_groups failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error38 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error39 error
    error39, err = error38.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error39
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "alter_sentry_role_add_groups failed: invalid message type")
    return
  }
  result := SentryPolicyServiceAlterSentryRoleAddGroupsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Request
func (p *SentryPolicyServiceClient) AlterSentryRoleDeleteGroups(ctx context.Context, request *TAlterSentryRoleDeleteGroupsRequest) (r *TAlterSentryRoleDeleteGroupsResponse, err error) {
  if err = p.sendAlterSentryRoleDeleteGroups(request); err != nil { return }
  return p.recvAlterSentryRoleDeleteGroups()
}

func (p *SentryPolicyServiceClient) sendAlterSentryRoleDeleteGroups(request *TAlterSentryRoleDeleteGroupsRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("alter_sentry_role_delete_groups", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SentryPolicyServiceAlterSentryRoleDeleteGroupsArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SentryPolicyServiceClient) recvAlterSentryRoleDeleteGroups() (value *TAlterSentryRoleDeleteGroupsResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "alter_sentry_role_delete_groups" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "alter_sentry_role_delete_groups failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "alter_sentry_role_delete_groups failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error40 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error41 error
    error41, err = error40.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error41
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "alter_sentry_role_delete_groups failed: invalid message type")
    return
  }
  result := SentryPolicyServiceAlterSentryRoleDeleteGroupsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Request
func (p *SentryPolicyServiceClient) AlterSentryRoleAddUsers(ctx context.Context, request *TAlterSentryRoleAddUsersRequest) (r *TAlterSentryRoleAddUsersResponse, err error) {
  if err = p.sendAlterSentryRoleAddUsers(request); err != nil { return }
  return p.recvAlterSentryRoleAddUsers()
}

func (p *SentryPolicyServiceClient) sendAlterSentryRoleAddUsers(request *TAlterSentryRoleAddUsersRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("alter_sentry_role_add_users", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SentryPolicyServiceAlterSentryRoleAddUsersArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SentryPolicyServiceClient) recvAlterSentryRoleAddUsers() (value *TAlterSentryRoleAddUsersResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "alter_sentry_role_add_users" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "alter_sentry_role_add_users failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "alter_sentry_role_add_users failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error42 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error43 error
    error43, err = error42.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error43
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "alter_sentry_role_add_users failed: invalid message type")
    return
  }
  result := SentryPolicyServiceAlterSentryRoleAddUsersResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Request
func (p *SentryPolicyServiceClient) AlterSentryRoleDeleteUsers(ctx context.Context, request *TAlterSentryRoleDeleteUsersRequest) (r *TAlterSentryRoleDeleteUsersResponse, err error) {
  if err = p.sendAlterSentryRoleDeleteUsers(request); err != nil { return }
  return p.recvAlterSentryRoleDeleteUsers()
}

func (p *SentryPolicyServiceClient) sendAlterSentryRoleDeleteUsers(request *TAlterSentryRoleDeleteUsersRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("alter_sentry_role_delete_users", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SentryPolicyServiceAlterSentryRoleDeleteUsersArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SentryPolicyServiceClient) recvAlterSentryRoleDeleteUsers() (value *TAlterSentryRoleDeleteUsersResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "alter_sentry_role_delete_users" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "alter_sentry_role_delete_users failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "alter_sentry_role_delete_users failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error44 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error45 error
    error45, err = error44.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error45
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "alter_sentry_role_delete_users failed: invalid message type")
    return
  }
  result := SentryPolicyServiceAlterSentryRoleDeleteUsersResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Request
func (p *SentryPolicyServiceClient) ListSentryRolesByGroup(ctx context.Context, request *TListSentryRolesRequest) (r *TListSentryRolesResponse, err error) {
  if err = p.sendListSentryRolesByGroup(request); err != nil { return }
  return p.recvListSentryRolesByGroup()
}

func (p *SentryPolicyServiceClient) sendListSentryRolesByGroup(request *TListSentryRolesRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("list_sentry_roles_by_group", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SentryPolicyServiceListSentryRolesByGroupArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SentryPolicyServiceClient) recvListSentryRolesByGroup() (value *TListSentryRolesResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "list_sentry_roles_by_group" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "list_sentry_roles_by_group failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "list_sentry_roles_by_group failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error46 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error47 error
    error47, err = error46.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error47
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "list_sentry_roles_by_group failed: invalid message type")
    return
  }
  result := SentryPolicyServiceListSentryRolesByGroupResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Request
func (p *SentryPolicyServiceClient) ListSentryRolesByUser(ctx context.Context, request *TListSentryRolesForUserRequest) (r *TListSentryRolesResponse, err error) {
  if err = p.sendListSentryRolesByUser(request); err != nil { return }
  return p.recvListSentryRolesByUser()
}

func (p *SentryPolicyServiceClient) sendListSentryRolesByUser(request *TListSentryRolesForUserRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("list_sentry_roles_by_user", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SentryPolicyServiceListSentryRolesByUserArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SentryPolicyServiceClient) recvListSentryRolesByUser() (value *TListSentryRolesResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "list_sentry_roles_by_user" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "list_sentry_roles_by_user failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "list_sentry_roles_by_user failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error48 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error49 error
    error49, err = error48.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error49
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "list_sentry_roles_by_user failed: invalid message type")
    return
  }
  result := SentryPolicyServiceListSentryRolesByUserResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Request
func (p *SentryPolicyServiceClient) ListSentryPrivilegesByRole(ctx context.Context, request *TListSentryPrivilegesRequest) (r *TListSentryPrivilegesResponse, err error) {
  if err = p.sendListSentryPrivilegesByRole(request); err != nil { return }
  return p.recvListSentryPrivilegesByRole()
}

func (p *SentryPolicyServiceClient) sendListSentryPrivilegesByRole(request *TListSentryPrivilegesRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("list_sentry_privileges_by_role", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SentryPolicyServiceListSentryPrivilegesByRoleArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SentryPolicyServiceClient) recvListSentryPrivilegesByRole() (value *TListSentryPrivilegesResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "list_sentry_privileges_by_role" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "list_sentry_privileges_by_role failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "list_sentry_privileges_by_role failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error50 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error51 error
    error51, err = error50.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error51
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "list_sentry_privileges_by_role failed: invalid message type")
    return
  }
  result := SentryPolicyServiceListSentryPrivilegesByRoleResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Request
func (p *SentryPolicyServiceClient) ListSentryPrivilegesForProvider(ctx context.Context, request *TListSentryPrivilegesForProviderRequest) (r *TListSentryPrivilegesForProviderResponse, err error) {
  if err = p.sendListSentryPrivilegesForProvider(request); err != nil { return }
  return p.recvListSentryPrivilegesForProvider()
}

func (p *SentryPolicyServiceClient) sendListSentryPrivilegesForProvider(request *TListSentryPrivilegesForProviderRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("list_sentry_privileges_for_provider", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SentryPolicyServiceListSentryPrivilegesForProviderArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SentryPolicyServiceClient) recvListSentryPrivilegesForProvider() (value *TListSentryPrivilegesForProviderResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "list_sentry_privileges_for_provider" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "list_sentry_privileges_for_provider failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "list_sentry_privileges_for_provider failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error52 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error53 error
    error53, err = error52.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error53
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "list_sentry_privileges_for_provider failed: invalid message type")
    return
  }
  result := SentryPolicyServiceListSentryPrivilegesForProviderResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Request
func (p *SentryPolicyServiceClient) DropSentryPrivilege(ctx context.Context, request *TDropPrivilegesRequest) (r *TDropPrivilegesResponse, err error) {
  if err = p.sendDropSentryPrivilege(request); err != nil { return }
  return p.recvDropSentryPrivilege()
}

func (p *SentryPolicyServiceClient) sendDropSentryPrivilege(request *TDropPrivilegesRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("drop_sentry_privilege", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SentryPolicyServiceDropSentryPrivilegeArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SentryPolicyServiceClient) recvDropSentryPrivilege() (value *TDropPrivilegesResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "drop_sentry_privilege" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "drop_sentry_privilege failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "drop_sentry_privilege failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error54 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error55 error
    error55, err = error54.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error55
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "drop_sentry_privilege failed: invalid message type")
    return
  }
  result := SentryPolicyServiceDropSentryPrivilegeResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Request
func (p *SentryPolicyServiceClient) RenameSentryPrivilege(ctx context.Context, request *TRenamePrivilegesRequest) (r *TRenamePrivilegesResponse, err error) {
  if err = p.sendRenameSentryPrivilege(request); err != nil { return }
  return p.recvRenameSentryPrivilege()
}

func (p *SentryPolicyServiceClient) sendRenameSentryPrivilege(request *TRenamePrivilegesRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("rename_sentry_privilege", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SentryPolicyServiceRenameSentryPrivilegeArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SentryPolicyServiceClient) recvRenameSentryPrivilege() (value *TRenamePrivilegesResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "rename_sentry_privilege" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rename_sentry_privilege failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rename_sentry_privilege failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error56 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error57 error
    error57, err = error56.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error57
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rename_sentry_privilege failed: invalid message type")
    return
  }
  result := SentryPolicyServiceRenameSentryPrivilegeResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Request
func (p *SentryPolicyServiceClient) ListSentryPrivilegesByAuthorizable(ctx context.Context, request *TListSentryPrivilegesByAuthRequest) (r *TListSentryPrivilegesByAuthResponse, err error) {
  if err = p.sendListSentryPrivilegesByAuthorizable(request); err != nil { return }
  return p.recvListSentryPrivilegesByAuthorizable()
}

func (p *SentryPolicyServiceClient) sendListSentryPrivilegesByAuthorizable(request *TListSentryPrivilegesByAuthRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("list_sentry_privileges_by_authorizable", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SentryPolicyServiceListSentryPrivilegesByAuthorizableArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SentryPolicyServiceClient) recvListSentryPrivilegesByAuthorizable() (value *TListSentryPrivilegesByAuthResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "list_sentry_privileges_by_authorizable" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "list_sentry_privileges_by_authorizable failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "list_sentry_privileges_by_authorizable failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error58 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error59 error
    error59, err = error58.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error59
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "list_sentry_privileges_by_authorizable failed: invalid message type")
    return
  }
  result := SentryPolicyServiceListSentryPrivilegesByAuthorizableResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Request
func (p *SentryPolicyServiceClient) GetSentryConfigValue(ctx context.Context, request *TSentryConfigValueRequest) (r *TSentryConfigValueResponse, err error) {
  if err = p.sendGetSentryConfigValue(request); err != nil { return }
  return p.recvGetSentryConfigValue()
}

func (p *SentryPolicyServiceClient) sendGetSentryConfigValue(request *TSentryConfigValueRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("get_sentry_config_value", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SentryPolicyServiceGetSentryConfigValueArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SentryPolicyServiceClient) recvGetSentryConfigValue() (value *TSentryConfigValueResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "get_sentry_config_value" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_sentry_config_value failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_sentry_config_value failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error60 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error61 error
    error61, err = error60.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error61
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_sentry_config_value failed: invalid message type")
    return
  }
  result := SentryPolicyServiceGetSentryConfigValueResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Request
func (p *SentryPolicyServiceClient) ExportSentryMappingData(ctx context.Context, request *TSentryExportMappingDataRequest) (r *TSentryExportMappingDataResponse, err error) {
  if err = p.sendExportSentryMappingData(request); err != nil { return }
  return p.recvExportSentryMappingData()
}

func (p *SentryPolicyServiceClient) sendExportSentryMappingData(request *TSentryExportMappingDataRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("export_sentry_mapping_data", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SentryPolicyServiceExportSentryMappingDataArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SentryPolicyServiceClient) recvExportSentryMappingData() (value *TSentryExportMappingDataResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "export_sentry_mapping_data" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "export_sentry_mapping_data failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "export_sentry_mapping_data failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error62 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error63 error
    error63, err = error62.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error63
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "export_sentry_mapping_data failed: invalid message type")
    return
  }
  result := SentryPolicyServiceExportSentryMappingDataResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Request
func (p *SentryPolicyServiceClient) ImportSentryMappingData(ctx context.Context, request *TSentryImportMappingDataRequest) (r *TSentryImportMappingDataResponse, err error) {
  if err = p.sendImportSentryMappingData(request); err != nil { return }
  return p.recvImportSentryMappingData()
}

func (p *SentryPolicyServiceClient) sendImportSentryMappingData(request *TSentryImportMappingDataRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("import_sentry_mapping_data", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SentryPolicyServiceImportSentryMappingDataArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SentryPolicyServiceClient) recvImportSentryMappingData() (value *TSentryImportMappingDataResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "import_sentry_mapping_data" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "import_sentry_mapping_data failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "import_sentry_mapping_data failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error64 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error65 error
    error65, err = error64.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error65
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "import_sentry_mapping_data failed: invalid message type")
    return
  }
  result := SentryPolicyServiceImportSentryMappingDataResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}


type SentryPolicyServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler SentryPolicyService
}

func (p *SentryPolicyServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *SentryPolicyServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *SentryPolicyServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewSentryPolicyServiceProcessor(handler SentryPolicyService) *SentryPolicyServiceProcessor {

  self66 := &SentryPolicyServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self66.processorMap["create_sentry_role"] = &sentryPolicyServiceProcessorCreateSentryRole{handler:handler}
  self66.processorMap["drop_sentry_role"] = &sentryPolicyServiceProcessorDropSentryRole{handler:handler}
  self66.processorMap["alter_sentry_role_grant_privilege"] = &sentryPolicyServiceProcessorAlterSentryRoleGrantPrivilege{handler:handler}
  self66.processorMap["alter_sentry_role_revoke_privilege"] = &sentryPolicyServiceProcessorAlterSentryRoleRevokePrivilege{handler:handler}
  self66.processorMap["alter_sentry_role_add_groups"] = &sentryPolicyServiceProcessorAlterSentryRoleAddGroups{handler:handler}
  self66.processorMap["alter_sentry_role_delete_groups"] = &sentryPolicyServiceProcessorAlterSentryRoleDeleteGroups{handler:handler}
  self66.processorMap["alter_sentry_role_add_users"] = &sentryPolicyServiceProcessorAlterSentryRoleAddUsers{handler:handler}
  self66.processorMap["alter_sentry_role_delete_users"] = &sentryPolicyServiceProcessorAlterSentryRoleDeleteUsers{handler:handler}
  self66.processorMap["list_sentry_roles_by_group"] = &sentryPolicyServiceProcessorListSentryRolesByGroup{handler:handler}
  self66.processorMap["list_sentry_roles_by_user"] = &sentryPolicyServiceProcessorListSentryRolesByUser{handler:handler}
  self66.processorMap["list_sentry_privileges_by_role"] = &sentryPolicyServiceProcessorListSentryPrivilegesByRole{handler:handler}
  self66.processorMap["list_sentry_privileges_for_provider"] = &sentryPolicyServiceProcessorListSentryPrivilegesForProvider{handler:handler}
  self66.processorMap["drop_sentry_privilege"] = &sentryPolicyServiceProcessorDropSentryPrivilege{handler:handler}
  self66.processorMap["rename_sentry_privilege"] = &sentryPolicyServiceProcessorRenameSentryPrivilege{handler:handler}
  self66.processorMap["list_sentry_privileges_by_authorizable"] = &sentryPolicyServiceProcessorListSentryPrivilegesByAuthorizable{handler:handler}
  self66.processorMap["get_sentry_config_value"] = &sentryPolicyServiceProcessorGetSentryConfigValue{handler:handler}
  self66.processorMap["export_sentry_mapping_data"] = &sentryPolicyServiceProcessorExportSentryMappingData{handler:handler}
  self66.processorMap["import_sentry_mapping_data"] = &sentryPolicyServiceProcessorImportSentryMappingData{handler:handler}
return self66
}

func (p *SentryPolicyServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x67 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x67.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x67

}

type sentryPolicyServiceProcessorCreateSentryRole struct {
  handler SentryPolicyService
}

func (p *sentryPolicyServiceProcessorCreateSentryRole) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SentryPolicyServiceCreateSentryRoleArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("create_sentry_role", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SentryPolicyServiceCreateSentryRoleResult{}
var retval *TCreateSentryRoleResponse
  var err2 error
  if retval, err2 = p.handler.CreateSentryRole(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_sentry_role: " + err2.Error())
    oprot.WriteMessageBegin("create_sentry_role", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("create_sentry_role", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type sentryPolicyServiceProcessorDropSentryRole struct {
  handler SentryPolicyService
}

func (p *sentryPolicyServiceProcessorDropSentryRole) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SentryPolicyServiceDropSentryRoleArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("drop_sentry_role", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SentryPolicyServiceDropSentryRoleResult{}
var retval *TDropSentryRoleResponse
  var err2 error
  if retval, err2 = p.handler.DropSentryRole(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_sentry_role: " + err2.Error())
    oprot.WriteMessageBegin("drop_sentry_role", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("drop_sentry_role", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type sentryPolicyServiceProcessorAlterSentryRoleGrantPrivilege struct {
  handler SentryPolicyService
}

func (p *sentryPolicyServiceProcessorAlterSentryRoleGrantPrivilege) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SentryPolicyServiceAlterSentryRoleGrantPrivilegeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("alter_sentry_role_grant_privilege", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SentryPolicyServiceAlterSentryRoleGrantPrivilegeResult{}
var retval *TAlterSentryRoleGrantPrivilegeResponse
  var err2 error
  if retval, err2 = p.handler.AlterSentryRoleGrantPrivilege(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_sentry_role_grant_privilege: " + err2.Error())
    oprot.WriteMessageBegin("alter_sentry_role_grant_privilege", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("alter_sentry_role_grant_privilege", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type sentryPolicyServiceProcessorAlterSentryRoleRevokePrivilege struct {
  handler SentryPolicyService
}

func (p *sentryPolicyServiceProcessorAlterSentryRoleRevokePrivilege) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SentryPolicyServiceAlterSentryRoleRevokePrivilegeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("alter_sentry_role_revoke_privilege", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SentryPolicyServiceAlterSentryRoleRevokePrivilegeResult{}
var retval *TAlterSentryRoleRevokePrivilegeResponse
  var err2 error
  if retval, err2 = p.handler.AlterSentryRoleRevokePrivilege(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_sentry_role_revoke_privilege: " + err2.Error())
    oprot.WriteMessageBegin("alter_sentry_role_revoke_privilege", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("alter_sentry_role_revoke_privilege", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type sentryPolicyServiceProcessorAlterSentryRoleAddGroups struct {
  handler SentryPolicyService
}

func (p *sentryPolicyServiceProcessorAlterSentryRoleAddGroups) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SentryPolicyServiceAlterSentryRoleAddGroupsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("alter_sentry_role_add_groups", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SentryPolicyServiceAlterSentryRoleAddGroupsResult{}
var retval *TAlterSentryRoleAddGroupsResponse
  var err2 error
  if retval, err2 = p.handler.AlterSentryRoleAddGroups(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_sentry_role_add_groups: " + err2.Error())
    oprot.WriteMessageBegin("alter_sentry_role_add_groups", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("alter_sentry_role_add_groups", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type sentryPolicyServiceProcessorAlterSentryRoleDeleteGroups struct {
  handler SentryPolicyService
}

func (p *sentryPolicyServiceProcessorAlterSentryRoleDeleteGroups) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SentryPolicyServiceAlterSentryRoleDeleteGroupsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("alter_sentry_role_delete_groups", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SentryPolicyServiceAlterSentryRoleDeleteGroupsResult{}
var retval *TAlterSentryRoleDeleteGroupsResponse
  var err2 error
  if retval, err2 = p.handler.AlterSentryRoleDeleteGroups(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_sentry_role_delete_groups: " + err2.Error())
    oprot.WriteMessageBegin("alter_sentry_role_delete_groups", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("alter_sentry_role_delete_groups", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type sentryPolicyServiceProcessorAlterSentryRoleAddUsers struct {
  handler SentryPolicyService
}

func (p *sentryPolicyServiceProcessorAlterSentryRoleAddUsers) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SentryPolicyServiceAlterSentryRoleAddUsersArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("alter_sentry_role_add_users", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SentryPolicyServiceAlterSentryRoleAddUsersResult{}
var retval *TAlterSentryRoleAddUsersResponse
  var err2 error
  if retval, err2 = p.handler.AlterSentryRoleAddUsers(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_sentry_role_add_users: " + err2.Error())
    oprot.WriteMessageBegin("alter_sentry_role_add_users", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("alter_sentry_role_add_users", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type sentryPolicyServiceProcessorAlterSentryRoleDeleteUsers struct {
  handler SentryPolicyService
}

func (p *sentryPolicyServiceProcessorAlterSentryRoleDeleteUsers) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SentryPolicyServiceAlterSentryRoleDeleteUsersArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("alter_sentry_role_delete_users", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SentryPolicyServiceAlterSentryRoleDeleteUsersResult{}
var retval *TAlterSentryRoleDeleteUsersResponse
  var err2 error
  if retval, err2 = p.handler.AlterSentryRoleDeleteUsers(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_sentry_role_delete_users: " + err2.Error())
    oprot.WriteMessageBegin("alter_sentry_role_delete_users", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("alter_sentry_role_delete_users", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type sentryPolicyServiceProcessorListSentryRolesByGroup struct {
  handler SentryPolicyService
}

func (p *sentryPolicyServiceProcessorListSentryRolesByGroup) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SentryPolicyServiceListSentryRolesByGroupArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("list_sentry_roles_by_group", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SentryPolicyServiceListSentryRolesByGroupResult{}
var retval *TListSentryRolesResponse
  var err2 error
  if retval, err2 = p.handler.ListSentryRolesByGroup(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing list_sentry_roles_by_group: " + err2.Error())
    oprot.WriteMessageBegin("list_sentry_roles_by_group", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("list_sentry_roles_by_group", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type sentryPolicyServiceProcessorListSentryRolesByUser struct {
  handler SentryPolicyService
}

func (p *sentryPolicyServiceProcessorListSentryRolesByUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SentryPolicyServiceListSentryRolesByUserArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("list_sentry_roles_by_user", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SentryPolicyServiceListSentryRolesByUserResult{}
var retval *TListSentryRolesResponse
  var err2 error
  if retval, err2 = p.handler.ListSentryRolesByUser(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing list_sentry_roles_by_user: " + err2.Error())
    oprot.WriteMessageBegin("list_sentry_roles_by_user", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("list_sentry_roles_by_user", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type sentryPolicyServiceProcessorListSentryPrivilegesByRole struct {
  handler SentryPolicyService
}

func (p *sentryPolicyServiceProcessorListSentryPrivilegesByRole) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SentryPolicyServiceListSentryPrivilegesByRoleArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("list_sentry_privileges_by_role", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SentryPolicyServiceListSentryPrivilegesByRoleResult{}
var retval *TListSentryPrivilegesResponse
  var err2 error
  if retval, err2 = p.handler.ListSentryPrivilegesByRole(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing list_sentry_privileges_by_role: " + err2.Error())
    oprot.WriteMessageBegin("list_sentry_privileges_by_role", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("list_sentry_privileges_by_role", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type sentryPolicyServiceProcessorListSentryPrivilegesForProvider struct {
  handler SentryPolicyService
}

func (p *sentryPolicyServiceProcessorListSentryPrivilegesForProvider) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SentryPolicyServiceListSentryPrivilegesForProviderArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("list_sentry_privileges_for_provider", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SentryPolicyServiceListSentryPrivilegesForProviderResult{}
var retval *TListSentryPrivilegesForProviderResponse
  var err2 error
  if retval, err2 = p.handler.ListSentryPrivilegesForProvider(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing list_sentry_privileges_for_provider: " + err2.Error())
    oprot.WriteMessageBegin("list_sentry_privileges_for_provider", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("list_sentry_privileges_for_provider", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type sentryPolicyServiceProcessorDropSentryPrivilege struct {
  handler SentryPolicyService
}

func (p *sentryPolicyServiceProcessorDropSentryPrivilege) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SentryPolicyServiceDropSentryPrivilegeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("drop_sentry_privilege", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SentryPolicyServiceDropSentryPrivilegeResult{}
var retval *TDropPrivilegesResponse
  var err2 error
  if retval, err2 = p.handler.DropSentryPrivilege(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_sentry_privilege: " + err2.Error())
    oprot.WriteMessageBegin("drop_sentry_privilege", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("drop_sentry_privilege", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type sentryPolicyServiceProcessorRenameSentryPrivilege struct {
  handler SentryPolicyService
}

func (p *sentryPolicyServiceProcessorRenameSentryPrivilege) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SentryPolicyServiceRenameSentryPrivilegeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("rename_sentry_privilege", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SentryPolicyServiceRenameSentryPrivilegeResult{}
var retval *TRenamePrivilegesResponse
  var err2 error
  if retval, err2 = p.handler.RenameSentryPrivilege(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rename_sentry_privilege: " + err2.Error())
    oprot.WriteMessageBegin("rename_sentry_privilege", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("rename_sentry_privilege", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type sentryPolicyServiceProcessorListSentryPrivilegesByAuthorizable struct {
  handler SentryPolicyService
}

func (p *sentryPolicyServiceProcessorListSentryPrivilegesByAuthorizable) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SentryPolicyServiceListSentryPrivilegesByAuthorizableArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("list_sentry_privileges_by_authorizable", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SentryPolicyServiceListSentryPrivilegesByAuthorizableResult{}
var retval *TListSentryPrivilegesByAuthResponse
  var err2 error
  if retval, err2 = p.handler.ListSentryPrivilegesByAuthorizable(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing list_sentry_privileges_by_authorizable: " + err2.Error())
    oprot.WriteMessageBegin("list_sentry_privileges_by_authorizable", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("list_sentry_privileges_by_authorizable", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type sentryPolicyServiceProcessorGetSentryConfigValue struct {
  handler SentryPolicyService
}

func (p *sentryPolicyServiceProcessorGetSentryConfigValue) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SentryPolicyServiceGetSentryConfigValueArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_sentry_config_value", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SentryPolicyServiceGetSentryConfigValueResult{}
var retval *TSentryConfigValueResponse
  var err2 error
  if retval, err2 = p.handler.GetSentryConfigValue(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_sentry_config_value: " + err2.Error())
    oprot.WriteMessageBegin("get_sentry_config_value", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_sentry_config_value", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type sentryPolicyServiceProcessorExportSentryMappingData struct {
  handler SentryPolicyService
}

func (p *sentryPolicyServiceProcessorExportSentryMappingData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SentryPolicyServiceExportSentryMappingDataArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("export_sentry_mapping_data", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SentryPolicyServiceExportSentryMappingDataResult{}
var retval *TSentryExportMappingDataResponse
  var err2 error
  if retval, err2 = p.handler.ExportSentryMappingData(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing export_sentry_mapping_data: " + err2.Error())
    oprot.WriteMessageBegin("export_sentry_mapping_data", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("export_sentry_mapping_data", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type sentryPolicyServiceProcessorImportSentryMappingData struct {
  handler SentryPolicyService
}

func (p *sentryPolicyServiceProcessorImportSentryMappingData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SentryPolicyServiceImportSentryMappingDataArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("import_sentry_mapping_data", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SentryPolicyServiceImportSentryMappingDataResult{}
var retval *TSentryImportMappingDataResponse
  var err2 error
  if retval, err2 = p.handler.ImportSentryMappingData(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing import_sentry_mapping_data: " + err2.Error())
    oprot.WriteMessageBegin("import_sentry_mapping_data", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("import_sentry_mapping_data", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Request
type SentryPolicyServiceCreateSentryRoleArgs struct {
  Request *TCreateSentryRoleRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSentryPolicyServiceCreateSentryRoleArgs() *SentryPolicyServiceCreateSentryRoleArgs {
  return &SentryPolicyServiceCreateSentryRoleArgs{}
}

var SentryPolicyServiceCreateSentryRoleArgs_Request_DEFAULT *TCreateSentryRoleRequest
func (p *SentryPolicyServiceCreateSentryRoleArgs) GetRequest() *TCreateSentryRoleRequest {
  if !p.IsSetRequest() {
    return SentryPolicyServiceCreateSentryRoleArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SentryPolicyServiceCreateSentryRoleArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SentryPolicyServiceCreateSentryRoleArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryPolicyServiceCreateSentryRoleArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &TCreateSentryRoleRequest{
  ProtocolVersion: 2,
}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SentryPolicyServiceCreateSentryRoleArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("create_sentry_role_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryPolicyServiceCreateSentryRoleArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SentryPolicyServiceCreateSentryRoleArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryPolicyServiceCreateSentryRoleArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryPolicyServiceCreateSentryRoleResult struct {
  Success *TCreateSentryRoleResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSentryPolicyServiceCreateSentryRoleResult() *SentryPolicyServiceCreateSentryRoleResult {
  return &SentryPolicyServiceCreateSentryRoleResult{}
}

var SentryPolicyServiceCreateSentryRoleResult_Success_DEFAULT *TCreateSentryRoleResponse
func (p *SentryPolicyServiceCreateSentryRoleResult) GetSuccess() *TCreateSentryRoleResponse {
  if !p.IsSetSuccess() {
    return SentryPolicyServiceCreateSentryRoleResult_Success_DEFAULT
  }
return p.Success
}
func (p *SentryPolicyServiceCreateSentryRoleResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SentryPolicyServiceCreateSentryRoleResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryPolicyServiceCreateSentryRoleResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TCreateSentryRoleResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SentryPolicyServiceCreateSentryRoleResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("create_sentry_role_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryPolicyServiceCreateSentryRoleResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SentryPolicyServiceCreateSentryRoleResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryPolicyServiceCreateSentryRoleResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryPolicyServiceDropSentryRoleArgs struct {
  Request *TDropSentryRoleRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSentryPolicyServiceDropSentryRoleArgs() *SentryPolicyServiceDropSentryRoleArgs {
  return &SentryPolicyServiceDropSentryRoleArgs{}
}

var SentryPolicyServiceDropSentryRoleArgs_Request_DEFAULT *TDropSentryRoleRequest
func (p *SentryPolicyServiceDropSentryRoleArgs) GetRequest() *TDropSentryRoleRequest {
  if !p.IsSetRequest() {
    return SentryPolicyServiceDropSentryRoleArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SentryPolicyServiceDropSentryRoleArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SentryPolicyServiceDropSentryRoleArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryPolicyServiceDropSentryRoleArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &TDropSentryRoleRequest{
  ProtocolVersion: 2,
}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SentryPolicyServiceDropSentryRoleArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("drop_sentry_role_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryPolicyServiceDropSentryRoleArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SentryPolicyServiceDropSentryRoleArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryPolicyServiceDropSentryRoleArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryPolicyServiceDropSentryRoleResult struct {
  Success *TDropSentryRoleResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSentryPolicyServiceDropSentryRoleResult() *SentryPolicyServiceDropSentryRoleResult {
  return &SentryPolicyServiceDropSentryRoleResult{}
}

var SentryPolicyServiceDropSentryRoleResult_Success_DEFAULT *TDropSentryRoleResponse
func (p *SentryPolicyServiceDropSentryRoleResult) GetSuccess() *TDropSentryRoleResponse {
  if !p.IsSetSuccess() {
    return SentryPolicyServiceDropSentryRoleResult_Success_DEFAULT
  }
return p.Success
}
func (p *SentryPolicyServiceDropSentryRoleResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SentryPolicyServiceDropSentryRoleResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryPolicyServiceDropSentryRoleResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TDropSentryRoleResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SentryPolicyServiceDropSentryRoleResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("drop_sentry_role_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryPolicyServiceDropSentryRoleResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SentryPolicyServiceDropSentryRoleResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryPolicyServiceDropSentryRoleResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryPolicyServiceAlterSentryRoleGrantPrivilegeArgs struct {
  Request *TAlterSentryRoleGrantPrivilegeRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSentryPolicyServiceAlterSentryRoleGrantPrivilegeArgs() *SentryPolicyServiceAlterSentryRoleGrantPrivilegeArgs {
  return &SentryPolicyServiceAlterSentryRoleGrantPrivilegeArgs{}
}

var SentryPolicyServiceAlterSentryRoleGrantPrivilegeArgs_Request_DEFAULT *TAlterSentryRoleGrantPrivilegeRequest
func (p *SentryPolicyServiceAlterSentryRoleGrantPrivilegeArgs) GetRequest() *TAlterSentryRoleGrantPrivilegeRequest {
  if !p.IsSetRequest() {
    return SentryPolicyServiceAlterSentryRoleGrantPrivilegeArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SentryPolicyServiceAlterSentryRoleGrantPrivilegeArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SentryPolicyServiceAlterSentryRoleGrantPrivilegeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryPolicyServiceAlterSentryRoleGrantPrivilegeArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &TAlterSentryRoleGrantPrivilegeRequest{
  ProtocolVersion: 2,
}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SentryPolicyServiceAlterSentryRoleGrantPrivilegeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("alter_sentry_role_grant_privilege_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryPolicyServiceAlterSentryRoleGrantPrivilegeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SentryPolicyServiceAlterSentryRoleGrantPrivilegeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryPolicyServiceAlterSentryRoleGrantPrivilegeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryPolicyServiceAlterSentryRoleGrantPrivilegeResult struct {
  Success *TAlterSentryRoleGrantPrivilegeResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSentryPolicyServiceAlterSentryRoleGrantPrivilegeResult() *SentryPolicyServiceAlterSentryRoleGrantPrivilegeResult {
  return &SentryPolicyServiceAlterSentryRoleGrantPrivilegeResult{}
}

var SentryPolicyServiceAlterSentryRoleGrantPrivilegeResult_Success_DEFAULT *TAlterSentryRoleGrantPrivilegeResponse
func (p *SentryPolicyServiceAlterSentryRoleGrantPrivilegeResult) GetSuccess() *TAlterSentryRoleGrantPrivilegeResponse {
  if !p.IsSetSuccess() {
    return SentryPolicyServiceAlterSentryRoleGrantPrivilegeResult_Success_DEFAULT
  }
return p.Success
}
func (p *SentryPolicyServiceAlterSentryRoleGrantPrivilegeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SentryPolicyServiceAlterSentryRoleGrantPrivilegeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryPolicyServiceAlterSentryRoleGrantPrivilegeResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TAlterSentryRoleGrantPrivilegeResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SentryPolicyServiceAlterSentryRoleGrantPrivilegeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("alter_sentry_role_grant_privilege_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryPolicyServiceAlterSentryRoleGrantPrivilegeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SentryPolicyServiceAlterSentryRoleGrantPrivilegeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryPolicyServiceAlterSentryRoleGrantPrivilegeResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryPolicyServiceAlterSentryRoleRevokePrivilegeArgs struct {
  Request *TAlterSentryRoleRevokePrivilegeRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSentryPolicyServiceAlterSentryRoleRevokePrivilegeArgs() *SentryPolicyServiceAlterSentryRoleRevokePrivilegeArgs {
  return &SentryPolicyServiceAlterSentryRoleRevokePrivilegeArgs{}
}

var SentryPolicyServiceAlterSentryRoleRevokePrivilegeArgs_Request_DEFAULT *TAlterSentryRoleRevokePrivilegeRequest
func (p *SentryPolicyServiceAlterSentryRoleRevokePrivilegeArgs) GetRequest() *TAlterSentryRoleRevokePrivilegeRequest {
  if !p.IsSetRequest() {
    return SentryPolicyServiceAlterSentryRoleRevokePrivilegeArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SentryPolicyServiceAlterSentryRoleRevokePrivilegeArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SentryPolicyServiceAlterSentryRoleRevokePrivilegeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryPolicyServiceAlterSentryRoleRevokePrivilegeArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &TAlterSentryRoleRevokePrivilegeRequest{
  ProtocolVersion: 2,
}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SentryPolicyServiceAlterSentryRoleRevokePrivilegeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("alter_sentry_role_revoke_privilege_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryPolicyServiceAlterSentryRoleRevokePrivilegeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SentryPolicyServiceAlterSentryRoleRevokePrivilegeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryPolicyServiceAlterSentryRoleRevokePrivilegeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryPolicyServiceAlterSentryRoleRevokePrivilegeResult struct {
  Success *TAlterSentryRoleRevokePrivilegeResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSentryPolicyServiceAlterSentryRoleRevokePrivilegeResult() *SentryPolicyServiceAlterSentryRoleRevokePrivilegeResult {
  return &SentryPolicyServiceAlterSentryRoleRevokePrivilegeResult{}
}

var SentryPolicyServiceAlterSentryRoleRevokePrivilegeResult_Success_DEFAULT *TAlterSentryRoleRevokePrivilegeResponse
func (p *SentryPolicyServiceAlterSentryRoleRevokePrivilegeResult) GetSuccess() *TAlterSentryRoleRevokePrivilegeResponse {
  if !p.IsSetSuccess() {
    return SentryPolicyServiceAlterSentryRoleRevokePrivilegeResult_Success_DEFAULT
  }
return p.Success
}
func (p *SentryPolicyServiceAlterSentryRoleRevokePrivilegeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SentryPolicyServiceAlterSentryRoleRevokePrivilegeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryPolicyServiceAlterSentryRoleRevokePrivilegeResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TAlterSentryRoleRevokePrivilegeResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SentryPolicyServiceAlterSentryRoleRevokePrivilegeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("alter_sentry_role_revoke_privilege_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryPolicyServiceAlterSentryRoleRevokePrivilegeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SentryPolicyServiceAlterSentryRoleRevokePrivilegeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryPolicyServiceAlterSentryRoleRevokePrivilegeResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryPolicyServiceAlterSentryRoleAddGroupsArgs struct {
  Request *TAlterSentryRoleAddGroupsRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSentryPolicyServiceAlterSentryRoleAddGroupsArgs() *SentryPolicyServiceAlterSentryRoleAddGroupsArgs {
  return &SentryPolicyServiceAlterSentryRoleAddGroupsArgs{}
}

var SentryPolicyServiceAlterSentryRoleAddGroupsArgs_Request_DEFAULT *TAlterSentryRoleAddGroupsRequest
func (p *SentryPolicyServiceAlterSentryRoleAddGroupsArgs) GetRequest() *TAlterSentryRoleAddGroupsRequest {
  if !p.IsSetRequest() {
    return SentryPolicyServiceAlterSentryRoleAddGroupsArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SentryPolicyServiceAlterSentryRoleAddGroupsArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SentryPolicyServiceAlterSentryRoleAddGroupsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryPolicyServiceAlterSentryRoleAddGroupsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &TAlterSentryRoleAddGroupsRequest{
  ProtocolVersion: 2,
}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SentryPolicyServiceAlterSentryRoleAddGroupsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("alter_sentry_role_add_groups_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryPolicyServiceAlterSentryRoleAddGroupsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SentryPolicyServiceAlterSentryRoleAddGroupsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryPolicyServiceAlterSentryRoleAddGroupsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryPolicyServiceAlterSentryRoleAddGroupsResult struct {
  Success *TAlterSentryRoleAddGroupsResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSentryPolicyServiceAlterSentryRoleAddGroupsResult() *SentryPolicyServiceAlterSentryRoleAddGroupsResult {
  return &SentryPolicyServiceAlterSentryRoleAddGroupsResult{}
}

var SentryPolicyServiceAlterSentryRoleAddGroupsResult_Success_DEFAULT *TAlterSentryRoleAddGroupsResponse
func (p *SentryPolicyServiceAlterSentryRoleAddGroupsResult) GetSuccess() *TAlterSentryRoleAddGroupsResponse {
  if !p.IsSetSuccess() {
    return SentryPolicyServiceAlterSentryRoleAddGroupsResult_Success_DEFAULT
  }
return p.Success
}
func (p *SentryPolicyServiceAlterSentryRoleAddGroupsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SentryPolicyServiceAlterSentryRoleAddGroupsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryPolicyServiceAlterSentryRoleAddGroupsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TAlterSentryRoleAddGroupsResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SentryPolicyServiceAlterSentryRoleAddGroupsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("alter_sentry_role_add_groups_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryPolicyServiceAlterSentryRoleAddGroupsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SentryPolicyServiceAlterSentryRoleAddGroupsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryPolicyServiceAlterSentryRoleAddGroupsResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryPolicyServiceAlterSentryRoleDeleteGroupsArgs struct {
  Request *TAlterSentryRoleDeleteGroupsRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSentryPolicyServiceAlterSentryRoleDeleteGroupsArgs() *SentryPolicyServiceAlterSentryRoleDeleteGroupsArgs {
  return &SentryPolicyServiceAlterSentryRoleDeleteGroupsArgs{}
}

var SentryPolicyServiceAlterSentryRoleDeleteGroupsArgs_Request_DEFAULT *TAlterSentryRoleDeleteGroupsRequest
func (p *SentryPolicyServiceAlterSentryRoleDeleteGroupsArgs) GetRequest() *TAlterSentryRoleDeleteGroupsRequest {
  if !p.IsSetRequest() {
    return SentryPolicyServiceAlterSentryRoleDeleteGroupsArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SentryPolicyServiceAlterSentryRoleDeleteGroupsArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SentryPolicyServiceAlterSentryRoleDeleteGroupsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryPolicyServiceAlterSentryRoleDeleteGroupsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &TAlterSentryRoleDeleteGroupsRequest{
  ProtocolVersion: 2,
}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SentryPolicyServiceAlterSentryRoleDeleteGroupsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("alter_sentry_role_delete_groups_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryPolicyServiceAlterSentryRoleDeleteGroupsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SentryPolicyServiceAlterSentryRoleDeleteGroupsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryPolicyServiceAlterSentryRoleDeleteGroupsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryPolicyServiceAlterSentryRoleDeleteGroupsResult struct {
  Success *TAlterSentryRoleDeleteGroupsResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSentryPolicyServiceAlterSentryRoleDeleteGroupsResult() *SentryPolicyServiceAlterSentryRoleDeleteGroupsResult {
  return &SentryPolicyServiceAlterSentryRoleDeleteGroupsResult{}
}

var SentryPolicyServiceAlterSentryRoleDeleteGroupsResult_Success_DEFAULT *TAlterSentryRoleDeleteGroupsResponse
func (p *SentryPolicyServiceAlterSentryRoleDeleteGroupsResult) GetSuccess() *TAlterSentryRoleDeleteGroupsResponse {
  if !p.IsSetSuccess() {
    return SentryPolicyServiceAlterSentryRoleDeleteGroupsResult_Success_DEFAULT
  }
return p.Success
}
func (p *SentryPolicyServiceAlterSentryRoleDeleteGroupsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SentryPolicyServiceAlterSentryRoleDeleteGroupsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryPolicyServiceAlterSentryRoleDeleteGroupsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TAlterSentryRoleDeleteGroupsResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SentryPolicyServiceAlterSentryRoleDeleteGroupsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("alter_sentry_role_delete_groups_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryPolicyServiceAlterSentryRoleDeleteGroupsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SentryPolicyServiceAlterSentryRoleDeleteGroupsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryPolicyServiceAlterSentryRoleDeleteGroupsResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryPolicyServiceAlterSentryRoleAddUsersArgs struct {
  Request *TAlterSentryRoleAddUsersRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSentryPolicyServiceAlterSentryRoleAddUsersArgs() *SentryPolicyServiceAlterSentryRoleAddUsersArgs {
  return &SentryPolicyServiceAlterSentryRoleAddUsersArgs{}
}

var SentryPolicyServiceAlterSentryRoleAddUsersArgs_Request_DEFAULT *TAlterSentryRoleAddUsersRequest
func (p *SentryPolicyServiceAlterSentryRoleAddUsersArgs) GetRequest() *TAlterSentryRoleAddUsersRequest {
  if !p.IsSetRequest() {
    return SentryPolicyServiceAlterSentryRoleAddUsersArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SentryPolicyServiceAlterSentryRoleAddUsersArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SentryPolicyServiceAlterSentryRoleAddUsersArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryPolicyServiceAlterSentryRoleAddUsersArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &TAlterSentryRoleAddUsersRequest{
  ProtocolVersion: 1,
}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SentryPolicyServiceAlterSentryRoleAddUsersArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("alter_sentry_role_add_users_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryPolicyServiceAlterSentryRoleAddUsersArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SentryPolicyServiceAlterSentryRoleAddUsersArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryPolicyServiceAlterSentryRoleAddUsersArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryPolicyServiceAlterSentryRoleAddUsersResult struct {
  Success *TAlterSentryRoleAddUsersResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSentryPolicyServiceAlterSentryRoleAddUsersResult() *SentryPolicyServiceAlterSentryRoleAddUsersResult {
  return &SentryPolicyServiceAlterSentryRoleAddUsersResult{}
}

var SentryPolicyServiceAlterSentryRoleAddUsersResult_Success_DEFAULT *TAlterSentryRoleAddUsersResponse
func (p *SentryPolicyServiceAlterSentryRoleAddUsersResult) GetSuccess() *TAlterSentryRoleAddUsersResponse {
  if !p.IsSetSuccess() {
    return SentryPolicyServiceAlterSentryRoleAddUsersResult_Success_DEFAULT
  }
return p.Success
}
func (p *SentryPolicyServiceAlterSentryRoleAddUsersResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SentryPolicyServiceAlterSentryRoleAddUsersResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryPolicyServiceAlterSentryRoleAddUsersResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TAlterSentryRoleAddUsersResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SentryPolicyServiceAlterSentryRoleAddUsersResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("alter_sentry_role_add_users_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryPolicyServiceAlterSentryRoleAddUsersResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SentryPolicyServiceAlterSentryRoleAddUsersResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryPolicyServiceAlterSentryRoleAddUsersResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryPolicyServiceAlterSentryRoleDeleteUsersArgs struct {
  Request *TAlterSentryRoleDeleteUsersRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSentryPolicyServiceAlterSentryRoleDeleteUsersArgs() *SentryPolicyServiceAlterSentryRoleDeleteUsersArgs {
  return &SentryPolicyServiceAlterSentryRoleDeleteUsersArgs{}
}

var SentryPolicyServiceAlterSentryRoleDeleteUsersArgs_Request_DEFAULT *TAlterSentryRoleDeleteUsersRequest
func (p *SentryPolicyServiceAlterSentryRoleDeleteUsersArgs) GetRequest() *TAlterSentryRoleDeleteUsersRequest {
  if !p.IsSetRequest() {
    return SentryPolicyServiceAlterSentryRoleDeleteUsersArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SentryPolicyServiceAlterSentryRoleDeleteUsersArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SentryPolicyServiceAlterSentryRoleDeleteUsersArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryPolicyServiceAlterSentryRoleDeleteUsersArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &TAlterSentryRoleDeleteUsersRequest{
  ProtocolVersion: 1,
}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SentryPolicyServiceAlterSentryRoleDeleteUsersArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("alter_sentry_role_delete_users_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryPolicyServiceAlterSentryRoleDeleteUsersArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SentryPolicyServiceAlterSentryRoleDeleteUsersArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryPolicyServiceAlterSentryRoleDeleteUsersArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryPolicyServiceAlterSentryRoleDeleteUsersResult struct {
  Success *TAlterSentryRoleDeleteUsersResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSentryPolicyServiceAlterSentryRoleDeleteUsersResult() *SentryPolicyServiceAlterSentryRoleDeleteUsersResult {
  return &SentryPolicyServiceAlterSentryRoleDeleteUsersResult{}
}

var SentryPolicyServiceAlterSentryRoleDeleteUsersResult_Success_DEFAULT *TAlterSentryRoleDeleteUsersResponse
func (p *SentryPolicyServiceAlterSentryRoleDeleteUsersResult) GetSuccess() *TAlterSentryRoleDeleteUsersResponse {
  if !p.IsSetSuccess() {
    return SentryPolicyServiceAlterSentryRoleDeleteUsersResult_Success_DEFAULT
  }
return p.Success
}
func (p *SentryPolicyServiceAlterSentryRoleDeleteUsersResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SentryPolicyServiceAlterSentryRoleDeleteUsersResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryPolicyServiceAlterSentryRoleDeleteUsersResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TAlterSentryRoleDeleteUsersResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SentryPolicyServiceAlterSentryRoleDeleteUsersResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("alter_sentry_role_delete_users_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryPolicyServiceAlterSentryRoleDeleteUsersResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SentryPolicyServiceAlterSentryRoleDeleteUsersResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryPolicyServiceAlterSentryRoleDeleteUsersResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryPolicyServiceListSentryRolesByGroupArgs struct {
  Request *TListSentryRolesRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSentryPolicyServiceListSentryRolesByGroupArgs() *SentryPolicyServiceListSentryRolesByGroupArgs {
  return &SentryPolicyServiceListSentryRolesByGroupArgs{}
}

var SentryPolicyServiceListSentryRolesByGroupArgs_Request_DEFAULT *TListSentryRolesRequest
func (p *SentryPolicyServiceListSentryRolesByGroupArgs) GetRequest() *TListSentryRolesRequest {
  if !p.IsSetRequest() {
    return SentryPolicyServiceListSentryRolesByGroupArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SentryPolicyServiceListSentryRolesByGroupArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SentryPolicyServiceListSentryRolesByGroupArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryPolicyServiceListSentryRolesByGroupArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &TListSentryRolesRequest{
  ProtocolVersion: 2,
}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SentryPolicyServiceListSentryRolesByGroupArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("list_sentry_roles_by_group_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryPolicyServiceListSentryRolesByGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SentryPolicyServiceListSentryRolesByGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryPolicyServiceListSentryRolesByGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryPolicyServiceListSentryRolesByGroupResult struct {
  Success *TListSentryRolesResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSentryPolicyServiceListSentryRolesByGroupResult() *SentryPolicyServiceListSentryRolesByGroupResult {
  return &SentryPolicyServiceListSentryRolesByGroupResult{}
}

var SentryPolicyServiceListSentryRolesByGroupResult_Success_DEFAULT *TListSentryRolesResponse
func (p *SentryPolicyServiceListSentryRolesByGroupResult) GetSuccess() *TListSentryRolesResponse {
  if !p.IsSetSuccess() {
    return SentryPolicyServiceListSentryRolesByGroupResult_Success_DEFAULT
  }
return p.Success
}
func (p *SentryPolicyServiceListSentryRolesByGroupResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SentryPolicyServiceListSentryRolesByGroupResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryPolicyServiceListSentryRolesByGroupResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TListSentryRolesResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SentryPolicyServiceListSentryRolesByGroupResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("list_sentry_roles_by_group_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryPolicyServiceListSentryRolesByGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SentryPolicyServiceListSentryRolesByGroupResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryPolicyServiceListSentryRolesByGroupResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryPolicyServiceListSentryRolesByUserArgs struct {
  Request *TListSentryRolesForUserRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSentryPolicyServiceListSentryRolesByUserArgs() *SentryPolicyServiceListSentryRolesByUserArgs {
  return &SentryPolicyServiceListSentryRolesByUserArgs{}
}

var SentryPolicyServiceListSentryRolesByUserArgs_Request_DEFAULT *TListSentryRolesForUserRequest
func (p *SentryPolicyServiceListSentryRolesByUserArgs) GetRequest() *TListSentryRolesForUserRequest {
  if !p.IsSetRequest() {
    return SentryPolicyServiceListSentryRolesByUserArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SentryPolicyServiceListSentryRolesByUserArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SentryPolicyServiceListSentryRolesByUserArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryPolicyServiceListSentryRolesByUserArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &TListSentryRolesForUserRequest{
  ProtocolVersion: 1,
}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SentryPolicyServiceListSentryRolesByUserArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("list_sentry_roles_by_user_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryPolicyServiceListSentryRolesByUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SentryPolicyServiceListSentryRolesByUserArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryPolicyServiceListSentryRolesByUserArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryPolicyServiceListSentryRolesByUserResult struct {
  Success *TListSentryRolesResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSentryPolicyServiceListSentryRolesByUserResult() *SentryPolicyServiceListSentryRolesByUserResult {
  return &SentryPolicyServiceListSentryRolesByUserResult{}
}

var SentryPolicyServiceListSentryRolesByUserResult_Success_DEFAULT *TListSentryRolesResponse
func (p *SentryPolicyServiceListSentryRolesByUserResult) GetSuccess() *TListSentryRolesResponse {
  if !p.IsSetSuccess() {
    return SentryPolicyServiceListSentryRolesByUserResult_Success_DEFAULT
  }
return p.Success
}
func (p *SentryPolicyServiceListSentryRolesByUserResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SentryPolicyServiceListSentryRolesByUserResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryPolicyServiceListSentryRolesByUserResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TListSentryRolesResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SentryPolicyServiceListSentryRolesByUserResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("list_sentry_roles_by_user_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryPolicyServiceListSentryRolesByUserResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SentryPolicyServiceListSentryRolesByUserResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryPolicyServiceListSentryRolesByUserResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryPolicyServiceListSentryPrivilegesByRoleArgs struct {
  Request *TListSentryPrivilegesRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSentryPolicyServiceListSentryPrivilegesByRoleArgs() *SentryPolicyServiceListSentryPrivilegesByRoleArgs {
  return &SentryPolicyServiceListSentryPrivilegesByRoleArgs{}
}

var SentryPolicyServiceListSentryPrivilegesByRoleArgs_Request_DEFAULT *TListSentryPrivilegesRequest
func (p *SentryPolicyServiceListSentryPrivilegesByRoleArgs) GetRequest() *TListSentryPrivilegesRequest {
  if !p.IsSetRequest() {
    return SentryPolicyServiceListSentryPrivilegesByRoleArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SentryPolicyServiceListSentryPrivilegesByRoleArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SentryPolicyServiceListSentryPrivilegesByRoleArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryPolicyServiceListSentryPrivilegesByRoleArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &TListSentryPrivilegesRequest{
  ProtocolVersion: 2,
}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SentryPolicyServiceListSentryPrivilegesByRoleArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("list_sentry_privileges_by_role_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryPolicyServiceListSentryPrivilegesByRoleArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SentryPolicyServiceListSentryPrivilegesByRoleArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryPolicyServiceListSentryPrivilegesByRoleArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryPolicyServiceListSentryPrivilegesByRoleResult struct {
  Success *TListSentryPrivilegesResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSentryPolicyServiceListSentryPrivilegesByRoleResult() *SentryPolicyServiceListSentryPrivilegesByRoleResult {
  return &SentryPolicyServiceListSentryPrivilegesByRoleResult{}
}

var SentryPolicyServiceListSentryPrivilegesByRoleResult_Success_DEFAULT *TListSentryPrivilegesResponse
func (p *SentryPolicyServiceListSentryPrivilegesByRoleResult) GetSuccess() *TListSentryPrivilegesResponse {
  if !p.IsSetSuccess() {
    return SentryPolicyServiceListSentryPrivilegesByRoleResult_Success_DEFAULT
  }
return p.Success
}
func (p *SentryPolicyServiceListSentryPrivilegesByRoleResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SentryPolicyServiceListSentryPrivilegesByRoleResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryPolicyServiceListSentryPrivilegesByRoleResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TListSentryPrivilegesResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SentryPolicyServiceListSentryPrivilegesByRoleResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("list_sentry_privileges_by_role_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryPolicyServiceListSentryPrivilegesByRoleResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SentryPolicyServiceListSentryPrivilegesByRoleResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryPolicyServiceListSentryPrivilegesByRoleResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryPolicyServiceListSentryPrivilegesForProviderArgs struct {
  Request *TListSentryPrivilegesForProviderRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSentryPolicyServiceListSentryPrivilegesForProviderArgs() *SentryPolicyServiceListSentryPrivilegesForProviderArgs {
  return &SentryPolicyServiceListSentryPrivilegesForProviderArgs{}
}

var SentryPolicyServiceListSentryPrivilegesForProviderArgs_Request_DEFAULT *TListSentryPrivilegesForProviderRequest
func (p *SentryPolicyServiceListSentryPrivilegesForProviderArgs) GetRequest() *TListSentryPrivilegesForProviderRequest {
  if !p.IsSetRequest() {
    return SentryPolicyServiceListSentryPrivilegesForProviderArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SentryPolicyServiceListSentryPrivilegesForProviderArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SentryPolicyServiceListSentryPrivilegesForProviderArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryPolicyServiceListSentryPrivilegesForProviderArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &TListSentryPrivilegesForProviderRequest{
  ProtocolVersion: 2,
}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SentryPolicyServiceListSentryPrivilegesForProviderArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("list_sentry_privileges_for_provider_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryPolicyServiceListSentryPrivilegesForProviderArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SentryPolicyServiceListSentryPrivilegesForProviderArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryPolicyServiceListSentryPrivilegesForProviderArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryPolicyServiceListSentryPrivilegesForProviderResult struct {
  Success *TListSentryPrivilegesForProviderResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSentryPolicyServiceListSentryPrivilegesForProviderResult() *SentryPolicyServiceListSentryPrivilegesForProviderResult {
  return &SentryPolicyServiceListSentryPrivilegesForProviderResult{}
}

var SentryPolicyServiceListSentryPrivilegesForProviderResult_Success_DEFAULT *TListSentryPrivilegesForProviderResponse
func (p *SentryPolicyServiceListSentryPrivilegesForProviderResult) GetSuccess() *TListSentryPrivilegesForProviderResponse {
  if !p.IsSetSuccess() {
    return SentryPolicyServiceListSentryPrivilegesForProviderResult_Success_DEFAULT
  }
return p.Success
}
func (p *SentryPolicyServiceListSentryPrivilegesForProviderResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SentryPolicyServiceListSentryPrivilegesForProviderResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryPolicyServiceListSentryPrivilegesForProviderResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TListSentryPrivilegesForProviderResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SentryPolicyServiceListSentryPrivilegesForProviderResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("list_sentry_privileges_for_provider_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryPolicyServiceListSentryPrivilegesForProviderResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SentryPolicyServiceListSentryPrivilegesForProviderResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryPolicyServiceListSentryPrivilegesForProviderResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryPolicyServiceDropSentryPrivilegeArgs struct {
  Request *TDropPrivilegesRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSentryPolicyServiceDropSentryPrivilegeArgs() *SentryPolicyServiceDropSentryPrivilegeArgs {
  return &SentryPolicyServiceDropSentryPrivilegeArgs{}
}

var SentryPolicyServiceDropSentryPrivilegeArgs_Request_DEFAULT *TDropPrivilegesRequest
func (p *SentryPolicyServiceDropSentryPrivilegeArgs) GetRequest() *TDropPrivilegesRequest {
  if !p.IsSetRequest() {
    return SentryPolicyServiceDropSentryPrivilegeArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SentryPolicyServiceDropSentryPrivilegeArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SentryPolicyServiceDropSentryPrivilegeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryPolicyServiceDropSentryPrivilegeArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &TDropPrivilegesRequest{
  ProtocolVersion: 2,
}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SentryPolicyServiceDropSentryPrivilegeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("drop_sentry_privilege_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryPolicyServiceDropSentryPrivilegeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SentryPolicyServiceDropSentryPrivilegeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryPolicyServiceDropSentryPrivilegeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryPolicyServiceDropSentryPrivilegeResult struct {
  Success *TDropPrivilegesResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSentryPolicyServiceDropSentryPrivilegeResult() *SentryPolicyServiceDropSentryPrivilegeResult {
  return &SentryPolicyServiceDropSentryPrivilegeResult{}
}

var SentryPolicyServiceDropSentryPrivilegeResult_Success_DEFAULT *TDropPrivilegesResponse
func (p *SentryPolicyServiceDropSentryPrivilegeResult) GetSuccess() *TDropPrivilegesResponse {
  if !p.IsSetSuccess() {
    return SentryPolicyServiceDropSentryPrivilegeResult_Success_DEFAULT
  }
return p.Success
}
func (p *SentryPolicyServiceDropSentryPrivilegeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SentryPolicyServiceDropSentryPrivilegeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryPolicyServiceDropSentryPrivilegeResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TDropPrivilegesResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SentryPolicyServiceDropSentryPrivilegeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("drop_sentry_privilege_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryPolicyServiceDropSentryPrivilegeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SentryPolicyServiceDropSentryPrivilegeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryPolicyServiceDropSentryPrivilegeResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryPolicyServiceRenameSentryPrivilegeArgs struct {
  Request *TRenamePrivilegesRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSentryPolicyServiceRenameSentryPrivilegeArgs() *SentryPolicyServiceRenameSentryPrivilegeArgs {
  return &SentryPolicyServiceRenameSentryPrivilegeArgs{}
}

var SentryPolicyServiceRenameSentryPrivilegeArgs_Request_DEFAULT *TRenamePrivilegesRequest
func (p *SentryPolicyServiceRenameSentryPrivilegeArgs) GetRequest() *TRenamePrivilegesRequest {
  if !p.IsSetRequest() {
    return SentryPolicyServiceRenameSentryPrivilegeArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SentryPolicyServiceRenameSentryPrivilegeArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SentryPolicyServiceRenameSentryPrivilegeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryPolicyServiceRenameSentryPrivilegeArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &TRenamePrivilegesRequest{
  ProtocolVersion: 2,
}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SentryPolicyServiceRenameSentryPrivilegeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("rename_sentry_privilege_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryPolicyServiceRenameSentryPrivilegeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SentryPolicyServiceRenameSentryPrivilegeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryPolicyServiceRenameSentryPrivilegeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryPolicyServiceRenameSentryPrivilegeResult struct {
  Success *TRenamePrivilegesResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSentryPolicyServiceRenameSentryPrivilegeResult() *SentryPolicyServiceRenameSentryPrivilegeResult {
  return &SentryPolicyServiceRenameSentryPrivilegeResult{}
}

var SentryPolicyServiceRenameSentryPrivilegeResult_Success_DEFAULT *TRenamePrivilegesResponse
func (p *SentryPolicyServiceRenameSentryPrivilegeResult) GetSuccess() *TRenamePrivilegesResponse {
  if !p.IsSetSuccess() {
    return SentryPolicyServiceRenameSentryPrivilegeResult_Success_DEFAULT
  }
return p.Success
}
func (p *SentryPolicyServiceRenameSentryPrivilegeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SentryPolicyServiceRenameSentryPrivilegeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryPolicyServiceRenameSentryPrivilegeResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TRenamePrivilegesResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SentryPolicyServiceRenameSentryPrivilegeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("rename_sentry_privilege_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryPolicyServiceRenameSentryPrivilegeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SentryPolicyServiceRenameSentryPrivilegeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryPolicyServiceRenameSentryPrivilegeResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryPolicyServiceListSentryPrivilegesByAuthorizableArgs struct {
  Request *TListSentryPrivilegesByAuthRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSentryPolicyServiceListSentryPrivilegesByAuthorizableArgs() *SentryPolicyServiceListSentryPrivilegesByAuthorizableArgs {
  return &SentryPolicyServiceListSentryPrivilegesByAuthorizableArgs{}
}

var SentryPolicyServiceListSentryPrivilegesByAuthorizableArgs_Request_DEFAULT *TListSentryPrivilegesByAuthRequest
func (p *SentryPolicyServiceListSentryPrivilegesByAuthorizableArgs) GetRequest() *TListSentryPrivilegesByAuthRequest {
  if !p.IsSetRequest() {
    return SentryPolicyServiceListSentryPrivilegesByAuthorizableArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SentryPolicyServiceListSentryPrivilegesByAuthorizableArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SentryPolicyServiceListSentryPrivilegesByAuthorizableArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryPolicyServiceListSentryPrivilegesByAuthorizableArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &TListSentryPrivilegesByAuthRequest{
  ProtocolVersion: 2,
}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SentryPolicyServiceListSentryPrivilegesByAuthorizableArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("list_sentry_privileges_by_authorizable_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryPolicyServiceListSentryPrivilegesByAuthorizableArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SentryPolicyServiceListSentryPrivilegesByAuthorizableArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryPolicyServiceListSentryPrivilegesByAuthorizableArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryPolicyServiceListSentryPrivilegesByAuthorizableResult struct {
  Success *TListSentryPrivilegesByAuthResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSentryPolicyServiceListSentryPrivilegesByAuthorizableResult() *SentryPolicyServiceListSentryPrivilegesByAuthorizableResult {
  return &SentryPolicyServiceListSentryPrivilegesByAuthorizableResult{}
}

var SentryPolicyServiceListSentryPrivilegesByAuthorizableResult_Success_DEFAULT *TListSentryPrivilegesByAuthResponse
func (p *SentryPolicyServiceListSentryPrivilegesByAuthorizableResult) GetSuccess() *TListSentryPrivilegesByAuthResponse {
  if !p.IsSetSuccess() {
    return SentryPolicyServiceListSentryPrivilegesByAuthorizableResult_Success_DEFAULT
  }
return p.Success
}
func (p *SentryPolicyServiceListSentryPrivilegesByAuthorizableResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SentryPolicyServiceListSentryPrivilegesByAuthorizableResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryPolicyServiceListSentryPrivilegesByAuthorizableResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TListSentryPrivilegesByAuthResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SentryPolicyServiceListSentryPrivilegesByAuthorizableResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("list_sentry_privileges_by_authorizable_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryPolicyServiceListSentryPrivilegesByAuthorizableResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SentryPolicyServiceListSentryPrivilegesByAuthorizableResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryPolicyServiceListSentryPrivilegesByAuthorizableResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryPolicyServiceGetSentryConfigValueArgs struct {
  Request *TSentryConfigValueRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSentryPolicyServiceGetSentryConfigValueArgs() *SentryPolicyServiceGetSentryConfigValueArgs {
  return &SentryPolicyServiceGetSentryConfigValueArgs{}
}

var SentryPolicyServiceGetSentryConfigValueArgs_Request_DEFAULT *TSentryConfigValueRequest
func (p *SentryPolicyServiceGetSentryConfigValueArgs) GetRequest() *TSentryConfigValueRequest {
  if !p.IsSetRequest() {
    return SentryPolicyServiceGetSentryConfigValueArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SentryPolicyServiceGetSentryConfigValueArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SentryPolicyServiceGetSentryConfigValueArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryPolicyServiceGetSentryConfigValueArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &TSentryConfigValueRequest{
  ProtocolVersion: 2,
}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SentryPolicyServiceGetSentryConfigValueArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_sentry_config_value_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryPolicyServiceGetSentryConfigValueArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SentryPolicyServiceGetSentryConfigValueArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryPolicyServiceGetSentryConfigValueArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryPolicyServiceGetSentryConfigValueResult struct {
  Success *TSentryConfigValueResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSentryPolicyServiceGetSentryConfigValueResult() *SentryPolicyServiceGetSentryConfigValueResult {
  return &SentryPolicyServiceGetSentryConfigValueResult{}
}

var SentryPolicyServiceGetSentryConfigValueResult_Success_DEFAULT *TSentryConfigValueResponse
func (p *SentryPolicyServiceGetSentryConfigValueResult) GetSuccess() *TSentryConfigValueResponse {
  if !p.IsSetSuccess() {
    return SentryPolicyServiceGetSentryConfigValueResult_Success_DEFAULT
  }
return p.Success
}
func (p *SentryPolicyServiceGetSentryConfigValueResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SentryPolicyServiceGetSentryConfigValueResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryPolicyServiceGetSentryConfigValueResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TSentryConfigValueResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SentryPolicyServiceGetSentryConfigValueResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_sentry_config_value_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryPolicyServiceGetSentryConfigValueResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SentryPolicyServiceGetSentryConfigValueResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryPolicyServiceGetSentryConfigValueResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryPolicyServiceExportSentryMappingDataArgs struct {
  Request *TSentryExportMappingDataRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSentryPolicyServiceExportSentryMappingDataArgs() *SentryPolicyServiceExportSentryMappingDataArgs {
  return &SentryPolicyServiceExportSentryMappingDataArgs{}
}

var SentryPolicyServiceExportSentryMappingDataArgs_Request_DEFAULT *TSentryExportMappingDataRequest
func (p *SentryPolicyServiceExportSentryMappingDataArgs) GetRequest() *TSentryExportMappingDataRequest {
  if !p.IsSetRequest() {
    return SentryPolicyServiceExportSentryMappingDataArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SentryPolicyServiceExportSentryMappingDataArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SentryPolicyServiceExportSentryMappingDataArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryPolicyServiceExportSentryMappingDataArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &TSentryExportMappingDataRequest{
  ProtocolVersion: 1,
}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SentryPolicyServiceExportSentryMappingDataArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("export_sentry_mapping_data_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryPolicyServiceExportSentryMappingDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SentryPolicyServiceExportSentryMappingDataArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryPolicyServiceExportSentryMappingDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryPolicyServiceExportSentryMappingDataResult struct {
  Success *TSentryExportMappingDataResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSentryPolicyServiceExportSentryMappingDataResult() *SentryPolicyServiceExportSentryMappingDataResult {
  return &SentryPolicyServiceExportSentryMappingDataResult{}
}

var SentryPolicyServiceExportSentryMappingDataResult_Success_DEFAULT *TSentryExportMappingDataResponse
func (p *SentryPolicyServiceExportSentryMappingDataResult) GetSuccess() *TSentryExportMappingDataResponse {
  if !p.IsSetSuccess() {
    return SentryPolicyServiceExportSentryMappingDataResult_Success_DEFAULT
  }
return p.Success
}
func (p *SentryPolicyServiceExportSentryMappingDataResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SentryPolicyServiceExportSentryMappingDataResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryPolicyServiceExportSentryMappingDataResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TSentryExportMappingDataResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SentryPolicyServiceExportSentryMappingDataResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("export_sentry_mapping_data_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryPolicyServiceExportSentryMappingDataResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SentryPolicyServiceExportSentryMappingDataResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryPolicyServiceExportSentryMappingDataResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryPolicyServiceImportSentryMappingDataArgs struct {
  Request *TSentryImportMappingDataRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSentryPolicyServiceImportSentryMappingDataArgs() *SentryPolicyServiceImportSentryMappingDataArgs {
  return &SentryPolicyServiceImportSentryMappingDataArgs{}
}

var SentryPolicyServiceImportSentryMappingDataArgs_Request_DEFAULT *TSentryImportMappingDataRequest
func (p *SentryPolicyServiceImportSentryMappingDataArgs) GetRequest() *TSentryImportMappingDataRequest {
  if !p.IsSetRequest() {
    return SentryPolicyServiceImportSentryMappingDataArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SentryPolicyServiceImportSentryMappingDataArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SentryPolicyServiceImportSentryMappingDataArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryPolicyServiceImportSentryMappingDataArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &TSentryImportMappingDataRequest{
  ProtocolVersion: 1,
}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SentryPolicyServiceImportSentryMappingDataArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("import_sentry_mapping_data_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryPolicyServiceImportSentryMappingDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SentryPolicyServiceImportSentryMappingDataArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryPolicyServiceImportSentryMappingDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryPolicyServiceImportSentryMappingDataResult struct {
  Success *TSentryImportMappingDataResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSentryPolicyServiceImportSentryMappingDataResult() *SentryPolicyServiceImportSentryMappingDataResult {
  return &SentryPolicyServiceImportSentryMappingDataResult{}
}

var SentryPolicyServiceImportSentryMappingDataResult_Success_DEFAULT *TSentryImportMappingDataResponse
func (p *SentryPolicyServiceImportSentryMappingDataResult) GetSuccess() *TSentryImportMappingDataResponse {
  if !p.IsSetSuccess() {
    return SentryPolicyServiceImportSentryMappingDataResult_Success_DEFAULT
  }
return p.Success
}
func (p *SentryPolicyServiceImportSentryMappingDataResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SentryPolicyServiceImportSentryMappingDataResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SentryPolicyServiceImportSentryMappingDataResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TSentryImportMappingDataResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SentryPolicyServiceImportSentryMappingDataResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("import_sentry_mapping_data_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SentryPolicyServiceImportSentryMappingDataResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SentryPolicyServiceImportSentryMappingDataResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SentryPolicyServiceImportSentryMappingDataResult(%+v)", *p)
}


