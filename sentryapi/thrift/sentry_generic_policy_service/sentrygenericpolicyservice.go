// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package sentry_generic_policy_service

import (
	"bytes"
	"fmt"

	"git.apache.org/thrift.git/lib/go/thrift"
	"github.com/akolb1/sentrytool/sentryapi/thrift/sentry_common_service"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = sentry_common_service.GoUnusedProtection__

// var _ = sentry_policy_service.GoUnusedProtection__

type SentryGenericPolicyService interface {
	// Parameters:
	//  - Request
	CreateSentryRole(request *TCreateSentryRoleRequest) (r *TCreateSentryRoleResponse, err error)
	// Parameters:
	//  - Request
	DropSentryRole(request *TDropSentryRoleRequest) (r *TDropSentryRoleResponse, err error)
	// Parameters:
	//  - Request
	AlterSentryRoleGrantPrivilege(request *TAlterSentryRoleGrantPrivilegeRequest) (r *TAlterSentryRoleGrantPrivilegeResponse, err error)
	// Parameters:
	//  - Request
	AlterSentryRoleRevokePrivilege(request *TAlterSentryRoleRevokePrivilegeRequest) (r *TAlterSentryRoleRevokePrivilegeResponse, err error)
	// Parameters:
	//  - Request
	AlterSentryRoleAddGroups(request *TAlterSentryRoleAddGroupsRequest) (r *TAlterSentryRoleAddGroupsResponse, err error)
	// Parameters:
	//  - Request
	AlterSentryRoleDeleteGroups(request *TAlterSentryRoleDeleteGroupsRequest) (r *TAlterSentryRoleDeleteGroupsResponse, err error)
	// Parameters:
	//  - Request
	ListSentryRolesByGroup(request *TListSentryRolesRequest) (r *TListSentryRolesResponse, err error)
	// Parameters:
	//  - Request
	ListSentryPrivilegesByRole(request *TListSentryPrivilegesRequest) (r *TListSentryPrivilegesResponse, err error)
	// Parameters:
	//  - Request
	ListSentryPrivilegesForProvider(request *TListSentryPrivilegesForProviderRequest) (r *TListSentryPrivilegesForProviderResponse, err error)
	// Parameters:
	//  - Request
	ListSentryPrivilegesByAuthorizable(request *TListSentryPrivilegesByAuthRequest) (r *TListSentryPrivilegesByAuthResponse, err error)
	// Parameters:
	//  - Request
	DropSentryPrivilege(request *TDropPrivilegesRequest) (r *TDropPrivilegesResponse, err error)
	// Parameters:
	//  - Request
	RenameSentryPrivilege(request *TRenamePrivilegesRequest) (r *TRenamePrivilegesResponse, err error)
}

type SentryGenericPolicyServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewSentryGenericPolicyServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *SentryGenericPolicyServiceClient {
	return &SentryGenericPolicyServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewSentryGenericPolicyServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *SentryGenericPolicyServiceClient {
	return &SentryGenericPolicyServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - Request
func (p *SentryGenericPolicyServiceClient) CreateSentryRole(request *TCreateSentryRoleRequest) (r *TCreateSentryRoleResponse, err error) {
	if err = p.sendCreateSentryRole(request); err != nil {
		return
	}
	return p.recvCreateSentryRole()
}

func (p *SentryGenericPolicyServiceClient) sendCreateSentryRole(request *TCreateSentryRoleRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("create_sentry_role", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SentryGenericPolicyServiceCreateSentryRoleArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SentryGenericPolicyServiceClient) recvCreateSentryRole() (value *TCreateSentryRoleResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "create_sentry_role" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "create_sentry_role failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "create_sentry_role failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error20 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error21 error
		error21, err = error20.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error21
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "create_sentry_role failed: invalid message type")
		return
	}
	result := SentryGenericPolicyServiceCreateSentryRoleResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *SentryGenericPolicyServiceClient) DropSentryRole(request *TDropSentryRoleRequest) (r *TDropSentryRoleResponse, err error) {
	if err = p.sendDropSentryRole(request); err != nil {
		return
	}
	return p.recvDropSentryRole()
}

func (p *SentryGenericPolicyServiceClient) sendDropSentryRole(request *TDropSentryRoleRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("drop_sentry_role", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SentryGenericPolicyServiceDropSentryRoleArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SentryGenericPolicyServiceClient) recvDropSentryRole() (value *TDropSentryRoleResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "drop_sentry_role" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "drop_sentry_role failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "drop_sentry_role failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error22 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error23 error
		error23, err = error22.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error23
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "drop_sentry_role failed: invalid message type")
		return
	}
	result := SentryGenericPolicyServiceDropSentryRoleResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *SentryGenericPolicyServiceClient) AlterSentryRoleGrantPrivilege(request *TAlterSentryRoleGrantPrivilegeRequest) (r *TAlterSentryRoleGrantPrivilegeResponse, err error) {
	if err = p.sendAlterSentryRoleGrantPrivilege(request); err != nil {
		return
	}
	return p.recvAlterSentryRoleGrantPrivilege()
}

func (p *SentryGenericPolicyServiceClient) sendAlterSentryRoleGrantPrivilege(request *TAlterSentryRoleGrantPrivilegeRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("alter_sentry_role_grant_privilege", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SentryGenericPolicyServiceClient) recvAlterSentryRoleGrantPrivilege() (value *TAlterSentryRoleGrantPrivilegeResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "alter_sentry_role_grant_privilege" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "alter_sentry_role_grant_privilege failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "alter_sentry_role_grant_privilege failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error24 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error25 error
		error25, err = error24.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error25
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "alter_sentry_role_grant_privilege failed: invalid message type")
		return
	}
	result := SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *SentryGenericPolicyServiceClient) AlterSentryRoleRevokePrivilege(request *TAlterSentryRoleRevokePrivilegeRequest) (r *TAlterSentryRoleRevokePrivilegeResponse, err error) {
	if err = p.sendAlterSentryRoleRevokePrivilege(request); err != nil {
		return
	}
	return p.recvAlterSentryRoleRevokePrivilege()
}

func (p *SentryGenericPolicyServiceClient) sendAlterSentryRoleRevokePrivilege(request *TAlterSentryRoleRevokePrivilegeRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("alter_sentry_role_revoke_privilege", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SentryGenericPolicyServiceClient) recvAlterSentryRoleRevokePrivilege() (value *TAlterSentryRoleRevokePrivilegeResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "alter_sentry_role_revoke_privilege" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "alter_sentry_role_revoke_privilege failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "alter_sentry_role_revoke_privilege failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error26 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error27 error
		error27, err = error26.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error27
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "alter_sentry_role_revoke_privilege failed: invalid message type")
		return
	}
	result := SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *SentryGenericPolicyServiceClient) AlterSentryRoleAddGroups(request *TAlterSentryRoleAddGroupsRequest) (r *TAlterSentryRoleAddGroupsResponse, err error) {
	if err = p.sendAlterSentryRoleAddGroups(request); err != nil {
		return
	}
	return p.recvAlterSentryRoleAddGroups()
}

func (p *SentryGenericPolicyServiceClient) sendAlterSentryRoleAddGroups(request *TAlterSentryRoleAddGroupsRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("alter_sentry_role_add_groups", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SentryGenericPolicyServiceAlterSentryRoleAddGroupsArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SentryGenericPolicyServiceClient) recvAlterSentryRoleAddGroups() (value *TAlterSentryRoleAddGroupsResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "alter_sentry_role_add_groups" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "alter_sentry_role_add_groups failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "alter_sentry_role_add_groups failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error28 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error29 error
		error29, err = error28.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error29
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "alter_sentry_role_add_groups failed: invalid message type")
		return
	}
	result := SentryGenericPolicyServiceAlterSentryRoleAddGroupsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *SentryGenericPolicyServiceClient) AlterSentryRoleDeleteGroups(request *TAlterSentryRoleDeleteGroupsRequest) (r *TAlterSentryRoleDeleteGroupsResponse, err error) {
	if err = p.sendAlterSentryRoleDeleteGroups(request); err != nil {
		return
	}
	return p.recvAlterSentryRoleDeleteGroups()
}

func (p *SentryGenericPolicyServiceClient) sendAlterSentryRoleDeleteGroups(request *TAlterSentryRoleDeleteGroupsRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("alter_sentry_role_delete_groups", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SentryGenericPolicyServiceClient) recvAlterSentryRoleDeleteGroups() (value *TAlterSentryRoleDeleteGroupsResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "alter_sentry_role_delete_groups" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "alter_sentry_role_delete_groups failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "alter_sentry_role_delete_groups failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error30 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error31 error
		error31, err = error30.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error31
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "alter_sentry_role_delete_groups failed: invalid message type")
		return
	}
	result := SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *SentryGenericPolicyServiceClient) ListSentryRolesByGroup(request *TListSentryRolesRequest) (r *TListSentryRolesResponse, err error) {
	if err = p.sendListSentryRolesByGroup(request); err != nil {
		return
	}
	return p.recvListSentryRolesByGroup()
}

func (p *SentryGenericPolicyServiceClient) sendListSentryRolesByGroup(request *TListSentryRolesRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("list_sentry_roles_by_group", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SentryGenericPolicyServiceListSentryRolesByGroupArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SentryGenericPolicyServiceClient) recvListSentryRolesByGroup() (value *TListSentryRolesResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "list_sentry_roles_by_group" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "list_sentry_roles_by_group failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "list_sentry_roles_by_group failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error32 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error33 error
		error33, err = error32.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error33
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "list_sentry_roles_by_group failed: invalid message type")
		return
	}
	result := SentryGenericPolicyServiceListSentryRolesByGroupResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *SentryGenericPolicyServiceClient) ListSentryPrivilegesByRole(request *TListSentryPrivilegesRequest) (r *TListSentryPrivilegesResponse, err error) {
	if err = p.sendListSentryPrivilegesByRole(request); err != nil {
		return
	}
	return p.recvListSentryPrivilegesByRole()
}

func (p *SentryGenericPolicyServiceClient) sendListSentryPrivilegesByRole(request *TListSentryPrivilegesRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("list_sentry_privileges_by_role", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SentryGenericPolicyServiceListSentryPrivilegesByRoleArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SentryGenericPolicyServiceClient) recvListSentryPrivilegesByRole() (value *TListSentryPrivilegesResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "list_sentry_privileges_by_role" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "list_sentry_privileges_by_role failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "list_sentry_privileges_by_role failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error34 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error35 error
		error35, err = error34.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error35
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "list_sentry_privileges_by_role failed: invalid message type")
		return
	}
	result := SentryGenericPolicyServiceListSentryPrivilegesByRoleResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *SentryGenericPolicyServiceClient) ListSentryPrivilegesForProvider(request *TListSentryPrivilegesForProviderRequest) (r *TListSentryPrivilegesForProviderResponse, err error) {
	if err = p.sendListSentryPrivilegesForProvider(request); err != nil {
		return
	}
	return p.recvListSentryPrivilegesForProvider()
}

func (p *SentryGenericPolicyServiceClient) sendListSentryPrivilegesForProvider(request *TListSentryPrivilegesForProviderRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("list_sentry_privileges_for_provider", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SentryGenericPolicyServiceListSentryPrivilegesForProviderArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SentryGenericPolicyServiceClient) recvListSentryPrivilegesForProvider() (value *TListSentryPrivilegesForProviderResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "list_sentry_privileges_for_provider" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "list_sentry_privileges_for_provider failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "list_sentry_privileges_for_provider failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error36 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error37 error
		error37, err = error36.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error37
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "list_sentry_privileges_for_provider failed: invalid message type")
		return
	}
	result := SentryGenericPolicyServiceListSentryPrivilegesForProviderResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *SentryGenericPolicyServiceClient) ListSentryPrivilegesByAuthorizable(request *TListSentryPrivilegesByAuthRequest) (r *TListSentryPrivilegesByAuthResponse, err error) {
	if err = p.sendListSentryPrivilegesByAuthorizable(request); err != nil {
		return
	}
	return p.recvListSentryPrivilegesByAuthorizable()
}

func (p *SentryGenericPolicyServiceClient) sendListSentryPrivilegesByAuthorizable(request *TListSentryPrivilegesByAuthRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("list_sentry_privileges_by_authorizable", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SentryGenericPolicyServiceClient) recvListSentryPrivilegesByAuthorizable() (value *TListSentryPrivilegesByAuthResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "list_sentry_privileges_by_authorizable" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "list_sentry_privileges_by_authorizable failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "list_sentry_privileges_by_authorizable failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error38 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error39 error
		error39, err = error38.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error39
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "list_sentry_privileges_by_authorizable failed: invalid message type")
		return
	}
	result := SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *SentryGenericPolicyServiceClient) DropSentryPrivilege(request *TDropPrivilegesRequest) (r *TDropPrivilegesResponse, err error) {
	if err = p.sendDropSentryPrivilege(request); err != nil {
		return
	}
	return p.recvDropSentryPrivilege()
}

func (p *SentryGenericPolicyServiceClient) sendDropSentryPrivilege(request *TDropPrivilegesRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("drop_sentry_privilege", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SentryGenericPolicyServiceDropSentryPrivilegeArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SentryGenericPolicyServiceClient) recvDropSentryPrivilege() (value *TDropPrivilegesResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "drop_sentry_privilege" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "drop_sentry_privilege failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "drop_sentry_privilege failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error40 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error41 error
		error41, err = error40.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error41
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "drop_sentry_privilege failed: invalid message type")
		return
	}
	result := SentryGenericPolicyServiceDropSentryPrivilegeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *SentryGenericPolicyServiceClient) RenameSentryPrivilege(request *TRenamePrivilegesRequest) (r *TRenamePrivilegesResponse, err error) {
	if err = p.sendRenameSentryPrivilege(request); err != nil {
		return
	}
	return p.recvRenameSentryPrivilege()
}

func (p *SentryGenericPolicyServiceClient) sendRenameSentryPrivilege(request *TRenamePrivilegesRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rename_sentry_privilege", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SentryGenericPolicyServiceRenameSentryPrivilegeArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SentryGenericPolicyServiceClient) recvRenameSentryPrivilege() (value *TRenamePrivilegesResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rename_sentry_privilege" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rename_sentry_privilege failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rename_sentry_privilege failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error42 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error43 error
		error43, err = error42.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error43
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rename_sentry_privilege failed: invalid message type")
		return
	}
	result := SentryGenericPolicyServiceRenameSentryPrivilegeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type SentryGenericPolicyServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      SentryGenericPolicyService
}

func (p *SentryGenericPolicyServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *SentryGenericPolicyServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *SentryGenericPolicyServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewSentryGenericPolicyServiceProcessor(handler SentryGenericPolicyService) *SentryGenericPolicyServiceProcessor {

	self44 := &SentryGenericPolicyServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self44.processorMap["create_sentry_role"] = &sentryGenericPolicyServiceProcessorCreateSentryRole{handler: handler}
	self44.processorMap["drop_sentry_role"] = &sentryGenericPolicyServiceProcessorDropSentryRole{handler: handler}
	self44.processorMap["alter_sentry_role_grant_privilege"] = &sentryGenericPolicyServiceProcessorAlterSentryRoleGrantPrivilege{handler: handler}
	self44.processorMap["alter_sentry_role_revoke_privilege"] = &sentryGenericPolicyServiceProcessorAlterSentryRoleRevokePrivilege{handler: handler}
	self44.processorMap["alter_sentry_role_add_groups"] = &sentryGenericPolicyServiceProcessorAlterSentryRoleAddGroups{handler: handler}
	self44.processorMap["alter_sentry_role_delete_groups"] = &sentryGenericPolicyServiceProcessorAlterSentryRoleDeleteGroups{handler: handler}
	self44.processorMap["list_sentry_roles_by_group"] = &sentryGenericPolicyServiceProcessorListSentryRolesByGroup{handler: handler}
	self44.processorMap["list_sentry_privileges_by_role"] = &sentryGenericPolicyServiceProcessorListSentryPrivilegesByRole{handler: handler}
	self44.processorMap["list_sentry_privileges_for_provider"] = &sentryGenericPolicyServiceProcessorListSentryPrivilegesForProvider{handler: handler}
	self44.processorMap["list_sentry_privileges_by_authorizable"] = &sentryGenericPolicyServiceProcessorListSentryPrivilegesByAuthorizable{handler: handler}
	self44.processorMap["drop_sentry_privilege"] = &sentryGenericPolicyServiceProcessorDropSentryPrivilege{handler: handler}
	self44.processorMap["rename_sentry_privilege"] = &sentryGenericPolicyServiceProcessorRenameSentryPrivilege{handler: handler}
	return self44
}

func (p *SentryGenericPolicyServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x45 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x45.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x45

}

type sentryGenericPolicyServiceProcessorCreateSentryRole struct {
	handler SentryGenericPolicyService
}

func (p *sentryGenericPolicyServiceProcessorCreateSentryRole) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SentryGenericPolicyServiceCreateSentryRoleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("create_sentry_role", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SentryGenericPolicyServiceCreateSentryRoleResult{}
	var retval *TCreateSentryRoleResponse
	var err2 error
	if retval, err2 = p.handler.CreateSentryRole(args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_sentry_role: "+err2.Error())
		oprot.WriteMessageBegin("create_sentry_role", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("create_sentry_role", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type sentryGenericPolicyServiceProcessorDropSentryRole struct {
	handler SentryGenericPolicyService
}

func (p *sentryGenericPolicyServiceProcessorDropSentryRole) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SentryGenericPolicyServiceDropSentryRoleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("drop_sentry_role", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SentryGenericPolicyServiceDropSentryRoleResult{}
	var retval *TDropSentryRoleResponse
	var err2 error
	if retval, err2 = p.handler.DropSentryRole(args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_sentry_role: "+err2.Error())
		oprot.WriteMessageBegin("drop_sentry_role", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("drop_sentry_role", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type sentryGenericPolicyServiceProcessorAlterSentryRoleGrantPrivilege struct {
	handler SentryGenericPolicyService
}

func (p *sentryGenericPolicyServiceProcessorAlterSentryRoleGrantPrivilege) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("alter_sentry_role_grant_privilege", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeResult{}
	var retval *TAlterSentryRoleGrantPrivilegeResponse
	var err2 error
	if retval, err2 = p.handler.AlterSentryRoleGrantPrivilege(args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_sentry_role_grant_privilege: "+err2.Error())
		oprot.WriteMessageBegin("alter_sentry_role_grant_privilege", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("alter_sentry_role_grant_privilege", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type sentryGenericPolicyServiceProcessorAlterSentryRoleRevokePrivilege struct {
	handler SentryGenericPolicyService
}

func (p *sentryGenericPolicyServiceProcessorAlterSentryRoleRevokePrivilege) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("alter_sentry_role_revoke_privilege", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeResult{}
	var retval *TAlterSentryRoleRevokePrivilegeResponse
	var err2 error
	if retval, err2 = p.handler.AlterSentryRoleRevokePrivilege(args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_sentry_role_revoke_privilege: "+err2.Error())
		oprot.WriteMessageBegin("alter_sentry_role_revoke_privilege", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("alter_sentry_role_revoke_privilege", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type sentryGenericPolicyServiceProcessorAlterSentryRoleAddGroups struct {
	handler SentryGenericPolicyService
}

func (p *sentryGenericPolicyServiceProcessorAlterSentryRoleAddGroups) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SentryGenericPolicyServiceAlterSentryRoleAddGroupsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("alter_sentry_role_add_groups", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SentryGenericPolicyServiceAlterSentryRoleAddGroupsResult{}
	var retval *TAlterSentryRoleAddGroupsResponse
	var err2 error
	if retval, err2 = p.handler.AlterSentryRoleAddGroups(args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_sentry_role_add_groups: "+err2.Error())
		oprot.WriteMessageBegin("alter_sentry_role_add_groups", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("alter_sentry_role_add_groups", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type sentryGenericPolicyServiceProcessorAlterSentryRoleDeleteGroups struct {
	handler SentryGenericPolicyService
}

func (p *sentryGenericPolicyServiceProcessorAlterSentryRoleDeleteGroups) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("alter_sentry_role_delete_groups", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsResult{}
	var retval *TAlterSentryRoleDeleteGroupsResponse
	var err2 error
	if retval, err2 = p.handler.AlterSentryRoleDeleteGroups(args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_sentry_role_delete_groups: "+err2.Error())
		oprot.WriteMessageBegin("alter_sentry_role_delete_groups", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("alter_sentry_role_delete_groups", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type sentryGenericPolicyServiceProcessorListSentryRolesByGroup struct {
	handler SentryGenericPolicyService
}

func (p *sentryGenericPolicyServiceProcessorListSentryRolesByGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SentryGenericPolicyServiceListSentryRolesByGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("list_sentry_roles_by_group", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SentryGenericPolicyServiceListSentryRolesByGroupResult{}
	var retval *TListSentryRolesResponse
	var err2 error
	if retval, err2 = p.handler.ListSentryRolesByGroup(args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing list_sentry_roles_by_group: "+err2.Error())
		oprot.WriteMessageBegin("list_sentry_roles_by_group", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("list_sentry_roles_by_group", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type sentryGenericPolicyServiceProcessorListSentryPrivilegesByRole struct {
	handler SentryGenericPolicyService
}

func (p *sentryGenericPolicyServiceProcessorListSentryPrivilegesByRole) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SentryGenericPolicyServiceListSentryPrivilegesByRoleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("list_sentry_privileges_by_role", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SentryGenericPolicyServiceListSentryPrivilegesByRoleResult{}
	var retval *TListSentryPrivilegesResponse
	var err2 error
	if retval, err2 = p.handler.ListSentryPrivilegesByRole(args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing list_sentry_privileges_by_role: "+err2.Error())
		oprot.WriteMessageBegin("list_sentry_privileges_by_role", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("list_sentry_privileges_by_role", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type sentryGenericPolicyServiceProcessorListSentryPrivilegesForProvider struct {
	handler SentryGenericPolicyService
}

func (p *sentryGenericPolicyServiceProcessorListSentryPrivilegesForProvider) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SentryGenericPolicyServiceListSentryPrivilegesForProviderArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("list_sentry_privileges_for_provider", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SentryGenericPolicyServiceListSentryPrivilegesForProviderResult{}
	var retval *TListSentryPrivilegesForProviderResponse
	var err2 error
	if retval, err2 = p.handler.ListSentryPrivilegesForProvider(args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing list_sentry_privileges_for_provider: "+err2.Error())
		oprot.WriteMessageBegin("list_sentry_privileges_for_provider", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("list_sentry_privileges_for_provider", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type sentryGenericPolicyServiceProcessorListSentryPrivilegesByAuthorizable struct {
	handler SentryGenericPolicyService
}

func (p *sentryGenericPolicyServiceProcessorListSentryPrivilegesByAuthorizable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("list_sentry_privileges_by_authorizable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableResult{}
	var retval *TListSentryPrivilegesByAuthResponse
	var err2 error
	if retval, err2 = p.handler.ListSentryPrivilegesByAuthorizable(args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing list_sentry_privileges_by_authorizable: "+err2.Error())
		oprot.WriteMessageBegin("list_sentry_privileges_by_authorizable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("list_sentry_privileges_by_authorizable", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type sentryGenericPolicyServiceProcessorDropSentryPrivilege struct {
	handler SentryGenericPolicyService
}

func (p *sentryGenericPolicyServiceProcessorDropSentryPrivilege) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SentryGenericPolicyServiceDropSentryPrivilegeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("drop_sentry_privilege", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SentryGenericPolicyServiceDropSentryPrivilegeResult{}
	var retval *TDropPrivilegesResponse
	var err2 error
	if retval, err2 = p.handler.DropSentryPrivilege(args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_sentry_privilege: "+err2.Error())
		oprot.WriteMessageBegin("drop_sentry_privilege", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("drop_sentry_privilege", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type sentryGenericPolicyServiceProcessorRenameSentryPrivilege struct {
	handler SentryGenericPolicyService
}

func (p *sentryGenericPolicyServiceProcessorRenameSentryPrivilege) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SentryGenericPolicyServiceRenameSentryPrivilegeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rename_sentry_privilege", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SentryGenericPolicyServiceRenameSentryPrivilegeResult{}
	var retval *TRenamePrivilegesResponse
	var err2 error
	if retval, err2 = p.handler.RenameSentryPrivilege(args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rename_sentry_privilege: "+err2.Error())
		oprot.WriteMessageBegin("rename_sentry_privilege", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rename_sentry_privilege", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Request
type SentryGenericPolicyServiceCreateSentryRoleArgs struct {
	Request *TCreateSentryRoleRequest `thrift:"request,1" json:"request"`
}

func NewSentryGenericPolicyServiceCreateSentryRoleArgs() *SentryGenericPolicyServiceCreateSentryRoleArgs {
	return &SentryGenericPolicyServiceCreateSentryRoleArgs{}
}

var SentryGenericPolicyServiceCreateSentryRoleArgs_Request_DEFAULT *TCreateSentryRoleRequest

func (p *SentryGenericPolicyServiceCreateSentryRoleArgs) GetRequest() *TCreateSentryRoleRequest {
	if !p.IsSetRequest() {
		return SentryGenericPolicyServiceCreateSentryRoleArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *SentryGenericPolicyServiceCreateSentryRoleArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SentryGenericPolicyServiceCreateSentryRoleArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceCreateSentryRoleArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &TCreateSentryRoleRequest{
		ProtocolVersion: 2,
	}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceCreateSentryRoleArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_sentry_role_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceCreateSentryRoleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *SentryGenericPolicyServiceCreateSentryRoleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryGenericPolicyServiceCreateSentryRoleArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryGenericPolicyServiceCreateSentryRoleResult struct {
	Success *TCreateSentryRoleResponse `thrift:"success,0" json:"success,omitempty"`
}

func NewSentryGenericPolicyServiceCreateSentryRoleResult() *SentryGenericPolicyServiceCreateSentryRoleResult {
	return &SentryGenericPolicyServiceCreateSentryRoleResult{}
}

var SentryGenericPolicyServiceCreateSentryRoleResult_Success_DEFAULT *TCreateSentryRoleResponse

func (p *SentryGenericPolicyServiceCreateSentryRoleResult) GetSuccess() *TCreateSentryRoleResponse {
	if !p.IsSetSuccess() {
		return SentryGenericPolicyServiceCreateSentryRoleResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SentryGenericPolicyServiceCreateSentryRoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SentryGenericPolicyServiceCreateSentryRoleResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceCreateSentryRoleResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TCreateSentryRoleResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceCreateSentryRoleResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_sentry_role_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceCreateSentryRoleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SentryGenericPolicyServiceCreateSentryRoleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryGenericPolicyServiceCreateSentryRoleResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryGenericPolicyServiceDropSentryRoleArgs struct {
	Request *TDropSentryRoleRequest `thrift:"request,1" json:"request"`
}

func NewSentryGenericPolicyServiceDropSentryRoleArgs() *SentryGenericPolicyServiceDropSentryRoleArgs {
	return &SentryGenericPolicyServiceDropSentryRoleArgs{}
}

var SentryGenericPolicyServiceDropSentryRoleArgs_Request_DEFAULT *TDropSentryRoleRequest

func (p *SentryGenericPolicyServiceDropSentryRoleArgs) GetRequest() *TDropSentryRoleRequest {
	if !p.IsSetRequest() {
		return SentryGenericPolicyServiceDropSentryRoleArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *SentryGenericPolicyServiceDropSentryRoleArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SentryGenericPolicyServiceDropSentryRoleArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceDropSentryRoleArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &TDropSentryRoleRequest{
		ProtocolVersion: 2,
	}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceDropSentryRoleArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_sentry_role_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceDropSentryRoleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *SentryGenericPolicyServiceDropSentryRoleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryGenericPolicyServiceDropSentryRoleArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryGenericPolicyServiceDropSentryRoleResult struct {
	Success *TDropSentryRoleResponse `thrift:"success,0" json:"success,omitempty"`
}

func NewSentryGenericPolicyServiceDropSentryRoleResult() *SentryGenericPolicyServiceDropSentryRoleResult {
	return &SentryGenericPolicyServiceDropSentryRoleResult{}
}

var SentryGenericPolicyServiceDropSentryRoleResult_Success_DEFAULT *TDropSentryRoleResponse

func (p *SentryGenericPolicyServiceDropSentryRoleResult) GetSuccess() *TDropSentryRoleResponse {
	if !p.IsSetSuccess() {
		return SentryGenericPolicyServiceDropSentryRoleResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SentryGenericPolicyServiceDropSentryRoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SentryGenericPolicyServiceDropSentryRoleResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceDropSentryRoleResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TDropSentryRoleResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceDropSentryRoleResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_sentry_role_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceDropSentryRoleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SentryGenericPolicyServiceDropSentryRoleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryGenericPolicyServiceDropSentryRoleResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeArgs struct {
	Request *TAlterSentryRoleGrantPrivilegeRequest `thrift:"request,1" json:"request"`
}

func NewSentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeArgs() *SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeArgs {
	return &SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeArgs{}
}

var SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeArgs_Request_DEFAULT *TAlterSentryRoleGrantPrivilegeRequest

func (p *SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeArgs) GetRequest() *TAlterSentryRoleGrantPrivilegeRequest {
	if !p.IsSetRequest() {
		return SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &TAlterSentryRoleGrantPrivilegeRequest{
		ProtocolVersion: 2,
	}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_sentry_role_grant_privilege_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeResult struct {
	Success *TAlterSentryRoleGrantPrivilegeResponse `thrift:"success,0" json:"success,omitempty"`
}

func NewSentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeResult() *SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeResult {
	return &SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeResult{}
}

var SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeResult_Success_DEFAULT *TAlterSentryRoleGrantPrivilegeResponse

func (p *SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeResult) GetSuccess() *TAlterSentryRoleGrantPrivilegeResponse {
	if !p.IsSetSuccess() {
		return SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TAlterSentryRoleGrantPrivilegeResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_sentry_role_grant_privilege_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryGenericPolicyServiceAlterSentryRoleGrantPrivilegeResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeArgs struct {
	Request *TAlterSentryRoleRevokePrivilegeRequest `thrift:"request,1" json:"request"`
}

func NewSentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeArgs() *SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeArgs {
	return &SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeArgs{}
}

var SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeArgs_Request_DEFAULT *TAlterSentryRoleRevokePrivilegeRequest

func (p *SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeArgs) GetRequest() *TAlterSentryRoleRevokePrivilegeRequest {
	if !p.IsSetRequest() {
		return SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &TAlterSentryRoleRevokePrivilegeRequest{
		ProtocolVersion: 2,
	}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_sentry_role_revoke_privilege_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeResult struct {
	Success *TAlterSentryRoleRevokePrivilegeResponse `thrift:"success,0" json:"success,omitempty"`
}

func NewSentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeResult() *SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeResult {
	return &SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeResult{}
}

var SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeResult_Success_DEFAULT *TAlterSentryRoleRevokePrivilegeResponse

func (p *SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeResult) GetSuccess() *TAlterSentryRoleRevokePrivilegeResponse {
	if !p.IsSetSuccess() {
		return SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TAlterSentryRoleRevokePrivilegeResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_sentry_role_revoke_privilege_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryGenericPolicyServiceAlterSentryRoleRevokePrivilegeResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryGenericPolicyServiceAlterSentryRoleAddGroupsArgs struct {
	Request *TAlterSentryRoleAddGroupsRequest `thrift:"request,1" json:"request"`
}

func NewSentryGenericPolicyServiceAlterSentryRoleAddGroupsArgs() *SentryGenericPolicyServiceAlterSentryRoleAddGroupsArgs {
	return &SentryGenericPolicyServiceAlterSentryRoleAddGroupsArgs{}
}

var SentryGenericPolicyServiceAlterSentryRoleAddGroupsArgs_Request_DEFAULT *TAlterSentryRoleAddGroupsRequest

func (p *SentryGenericPolicyServiceAlterSentryRoleAddGroupsArgs) GetRequest() *TAlterSentryRoleAddGroupsRequest {
	if !p.IsSetRequest() {
		return SentryGenericPolicyServiceAlterSentryRoleAddGroupsArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *SentryGenericPolicyServiceAlterSentryRoleAddGroupsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleAddGroupsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleAddGroupsArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &TAlterSentryRoleAddGroupsRequest{
		ProtocolVersion: 2,
	}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleAddGroupsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_sentry_role_add_groups_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleAddGroupsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *SentryGenericPolicyServiceAlterSentryRoleAddGroupsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryGenericPolicyServiceAlterSentryRoleAddGroupsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryGenericPolicyServiceAlterSentryRoleAddGroupsResult struct {
	Success *TAlterSentryRoleAddGroupsResponse `thrift:"success,0" json:"success,omitempty"`
}

func NewSentryGenericPolicyServiceAlterSentryRoleAddGroupsResult() *SentryGenericPolicyServiceAlterSentryRoleAddGroupsResult {
	return &SentryGenericPolicyServiceAlterSentryRoleAddGroupsResult{}
}

var SentryGenericPolicyServiceAlterSentryRoleAddGroupsResult_Success_DEFAULT *TAlterSentryRoleAddGroupsResponse

func (p *SentryGenericPolicyServiceAlterSentryRoleAddGroupsResult) GetSuccess() *TAlterSentryRoleAddGroupsResponse {
	if !p.IsSetSuccess() {
		return SentryGenericPolicyServiceAlterSentryRoleAddGroupsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SentryGenericPolicyServiceAlterSentryRoleAddGroupsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleAddGroupsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleAddGroupsResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TAlterSentryRoleAddGroupsResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleAddGroupsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_sentry_role_add_groups_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleAddGroupsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SentryGenericPolicyServiceAlterSentryRoleAddGroupsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryGenericPolicyServiceAlterSentryRoleAddGroupsResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsArgs struct {
	Request *TAlterSentryRoleDeleteGroupsRequest `thrift:"request,1" json:"request"`
}

func NewSentryGenericPolicyServiceAlterSentryRoleDeleteGroupsArgs() *SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsArgs {
	return &SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsArgs{}
}

var SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsArgs_Request_DEFAULT *TAlterSentryRoleDeleteGroupsRequest

func (p *SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsArgs) GetRequest() *TAlterSentryRoleDeleteGroupsRequest {
	if !p.IsSetRequest() {
		return SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &TAlterSentryRoleDeleteGroupsRequest{
		ProtocolVersion: 2,
	}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_sentry_role_delete_groups_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsResult struct {
	Success *TAlterSentryRoleDeleteGroupsResponse `thrift:"success,0" json:"success,omitempty"`
}

func NewSentryGenericPolicyServiceAlterSentryRoleDeleteGroupsResult() *SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsResult {
	return &SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsResult{}
}

var SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsResult_Success_DEFAULT *TAlterSentryRoleDeleteGroupsResponse

func (p *SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsResult) GetSuccess() *TAlterSentryRoleDeleteGroupsResponse {
	if !p.IsSetSuccess() {
		return SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TAlterSentryRoleDeleteGroupsResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_sentry_role_delete_groups_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryGenericPolicyServiceAlterSentryRoleDeleteGroupsResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryGenericPolicyServiceListSentryRolesByGroupArgs struct {
	Request *TListSentryRolesRequest `thrift:"request,1" json:"request"`
}

func NewSentryGenericPolicyServiceListSentryRolesByGroupArgs() *SentryGenericPolicyServiceListSentryRolesByGroupArgs {
	return &SentryGenericPolicyServiceListSentryRolesByGroupArgs{}
}

var SentryGenericPolicyServiceListSentryRolesByGroupArgs_Request_DEFAULT *TListSentryRolesRequest

func (p *SentryGenericPolicyServiceListSentryRolesByGroupArgs) GetRequest() *TListSentryRolesRequest {
	if !p.IsSetRequest() {
		return SentryGenericPolicyServiceListSentryRolesByGroupArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *SentryGenericPolicyServiceListSentryRolesByGroupArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SentryGenericPolicyServiceListSentryRolesByGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceListSentryRolesByGroupArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &TListSentryRolesRequest{
		ProtocolVersion: 2,
	}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceListSentryRolesByGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("list_sentry_roles_by_group_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceListSentryRolesByGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *SentryGenericPolicyServiceListSentryRolesByGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryGenericPolicyServiceListSentryRolesByGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryGenericPolicyServiceListSentryRolesByGroupResult struct {
	Success *TListSentryRolesResponse `thrift:"success,0" json:"success,omitempty"`
}

func NewSentryGenericPolicyServiceListSentryRolesByGroupResult() *SentryGenericPolicyServiceListSentryRolesByGroupResult {
	return &SentryGenericPolicyServiceListSentryRolesByGroupResult{}
}

var SentryGenericPolicyServiceListSentryRolesByGroupResult_Success_DEFAULT *TListSentryRolesResponse

func (p *SentryGenericPolicyServiceListSentryRolesByGroupResult) GetSuccess() *TListSentryRolesResponse {
	if !p.IsSetSuccess() {
		return SentryGenericPolicyServiceListSentryRolesByGroupResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SentryGenericPolicyServiceListSentryRolesByGroupResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SentryGenericPolicyServiceListSentryRolesByGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceListSentryRolesByGroupResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TListSentryRolesResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceListSentryRolesByGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("list_sentry_roles_by_group_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceListSentryRolesByGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SentryGenericPolicyServiceListSentryRolesByGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryGenericPolicyServiceListSentryRolesByGroupResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryGenericPolicyServiceListSentryPrivilegesByRoleArgs struct {
	Request *TListSentryPrivilegesRequest `thrift:"request,1" json:"request"`
}

func NewSentryGenericPolicyServiceListSentryPrivilegesByRoleArgs() *SentryGenericPolicyServiceListSentryPrivilegesByRoleArgs {
	return &SentryGenericPolicyServiceListSentryPrivilegesByRoleArgs{}
}

var SentryGenericPolicyServiceListSentryPrivilegesByRoleArgs_Request_DEFAULT *TListSentryPrivilegesRequest

func (p *SentryGenericPolicyServiceListSentryPrivilegesByRoleArgs) GetRequest() *TListSentryPrivilegesRequest {
	if !p.IsSetRequest() {
		return SentryGenericPolicyServiceListSentryPrivilegesByRoleArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *SentryGenericPolicyServiceListSentryPrivilegesByRoleArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesByRoleArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesByRoleArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &TListSentryPrivilegesRequest{
		ProtocolVersion: 2,
	}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesByRoleArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("list_sentry_privileges_by_role_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesByRoleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesByRoleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryGenericPolicyServiceListSentryPrivilegesByRoleArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryGenericPolicyServiceListSentryPrivilegesByRoleResult struct {
	Success *TListSentryPrivilegesResponse `thrift:"success,0" json:"success,omitempty"`
}

func NewSentryGenericPolicyServiceListSentryPrivilegesByRoleResult() *SentryGenericPolicyServiceListSentryPrivilegesByRoleResult {
	return &SentryGenericPolicyServiceListSentryPrivilegesByRoleResult{}
}

var SentryGenericPolicyServiceListSentryPrivilegesByRoleResult_Success_DEFAULT *TListSentryPrivilegesResponse

func (p *SentryGenericPolicyServiceListSentryPrivilegesByRoleResult) GetSuccess() *TListSentryPrivilegesResponse {
	if !p.IsSetSuccess() {
		return SentryGenericPolicyServiceListSentryPrivilegesByRoleResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SentryGenericPolicyServiceListSentryPrivilegesByRoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesByRoleResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesByRoleResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TListSentryPrivilegesResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesByRoleResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("list_sentry_privileges_by_role_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesByRoleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesByRoleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryGenericPolicyServiceListSentryPrivilegesByRoleResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryGenericPolicyServiceListSentryPrivilegesForProviderArgs struct {
	Request *TListSentryPrivilegesForProviderRequest `thrift:"request,1" json:"request"`
}

func NewSentryGenericPolicyServiceListSentryPrivilegesForProviderArgs() *SentryGenericPolicyServiceListSentryPrivilegesForProviderArgs {
	return &SentryGenericPolicyServiceListSentryPrivilegesForProviderArgs{}
}

var SentryGenericPolicyServiceListSentryPrivilegesForProviderArgs_Request_DEFAULT *TListSentryPrivilegesForProviderRequest

func (p *SentryGenericPolicyServiceListSentryPrivilegesForProviderArgs) GetRequest() *TListSentryPrivilegesForProviderRequest {
	if !p.IsSetRequest() {
		return SentryGenericPolicyServiceListSentryPrivilegesForProviderArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *SentryGenericPolicyServiceListSentryPrivilegesForProviderArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesForProviderArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesForProviderArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &TListSentryPrivilegesForProviderRequest{
		ProtocolVersion: 2,
	}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesForProviderArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("list_sentry_privileges_for_provider_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesForProviderArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesForProviderArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryGenericPolicyServiceListSentryPrivilegesForProviderArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryGenericPolicyServiceListSentryPrivilegesForProviderResult struct {
	Success *TListSentryPrivilegesForProviderResponse `thrift:"success,0" json:"success,omitempty"`
}

func NewSentryGenericPolicyServiceListSentryPrivilegesForProviderResult() *SentryGenericPolicyServiceListSentryPrivilegesForProviderResult {
	return &SentryGenericPolicyServiceListSentryPrivilegesForProviderResult{}
}

var SentryGenericPolicyServiceListSentryPrivilegesForProviderResult_Success_DEFAULT *TListSentryPrivilegesForProviderResponse

func (p *SentryGenericPolicyServiceListSentryPrivilegesForProviderResult) GetSuccess() *TListSentryPrivilegesForProviderResponse {
	if !p.IsSetSuccess() {
		return SentryGenericPolicyServiceListSentryPrivilegesForProviderResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SentryGenericPolicyServiceListSentryPrivilegesForProviderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesForProviderResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesForProviderResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TListSentryPrivilegesForProviderResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesForProviderResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("list_sentry_privileges_for_provider_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesForProviderResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesForProviderResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryGenericPolicyServiceListSentryPrivilegesForProviderResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableArgs struct {
	Request *TListSentryPrivilegesByAuthRequest `thrift:"request,1" json:"request"`
}

func NewSentryGenericPolicyServiceListSentryPrivilegesByAuthorizableArgs() *SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableArgs {
	return &SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableArgs{}
}

var SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableArgs_Request_DEFAULT *TListSentryPrivilegesByAuthRequest

func (p *SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableArgs) GetRequest() *TListSentryPrivilegesByAuthRequest {
	if !p.IsSetRequest() {
		return SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &TListSentryPrivilegesByAuthRequest{
		ProtocolVersion: 2,
	}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("list_sentry_privileges_by_authorizable_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableResult struct {
	Success *TListSentryPrivilegesByAuthResponse `thrift:"success,0" json:"success,omitempty"`
}

func NewSentryGenericPolicyServiceListSentryPrivilegesByAuthorizableResult() *SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableResult {
	return &SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableResult{}
}

var SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableResult_Success_DEFAULT *TListSentryPrivilegesByAuthResponse

func (p *SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableResult) GetSuccess() *TListSentryPrivilegesByAuthResponse {
	if !p.IsSetSuccess() {
		return SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TListSentryPrivilegesByAuthResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("list_sentry_privileges_by_authorizable_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryGenericPolicyServiceListSentryPrivilegesByAuthorizableResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryGenericPolicyServiceDropSentryPrivilegeArgs struct {
	Request *TDropPrivilegesRequest `thrift:"request,1" json:"request"`
}

func NewSentryGenericPolicyServiceDropSentryPrivilegeArgs() *SentryGenericPolicyServiceDropSentryPrivilegeArgs {
	return &SentryGenericPolicyServiceDropSentryPrivilegeArgs{}
}

var SentryGenericPolicyServiceDropSentryPrivilegeArgs_Request_DEFAULT *TDropPrivilegesRequest

func (p *SentryGenericPolicyServiceDropSentryPrivilegeArgs) GetRequest() *TDropPrivilegesRequest {
	if !p.IsSetRequest() {
		return SentryGenericPolicyServiceDropSentryPrivilegeArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *SentryGenericPolicyServiceDropSentryPrivilegeArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SentryGenericPolicyServiceDropSentryPrivilegeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceDropSentryPrivilegeArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &TDropPrivilegesRequest{
		ProtocolVersion: 2,
	}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceDropSentryPrivilegeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_sentry_privilege_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceDropSentryPrivilegeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *SentryGenericPolicyServiceDropSentryPrivilegeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryGenericPolicyServiceDropSentryPrivilegeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryGenericPolicyServiceDropSentryPrivilegeResult struct {
	Success *TDropPrivilegesResponse `thrift:"success,0" json:"success,omitempty"`
}

func NewSentryGenericPolicyServiceDropSentryPrivilegeResult() *SentryGenericPolicyServiceDropSentryPrivilegeResult {
	return &SentryGenericPolicyServiceDropSentryPrivilegeResult{}
}

var SentryGenericPolicyServiceDropSentryPrivilegeResult_Success_DEFAULT *TDropPrivilegesResponse

func (p *SentryGenericPolicyServiceDropSentryPrivilegeResult) GetSuccess() *TDropPrivilegesResponse {
	if !p.IsSetSuccess() {
		return SentryGenericPolicyServiceDropSentryPrivilegeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SentryGenericPolicyServiceDropSentryPrivilegeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SentryGenericPolicyServiceDropSentryPrivilegeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceDropSentryPrivilegeResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TDropPrivilegesResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceDropSentryPrivilegeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_sentry_privilege_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceDropSentryPrivilegeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SentryGenericPolicyServiceDropSentryPrivilegeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryGenericPolicyServiceDropSentryPrivilegeResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryGenericPolicyServiceRenameSentryPrivilegeArgs struct {
	Request *TRenamePrivilegesRequest `thrift:"request,1" json:"request"`
}

func NewSentryGenericPolicyServiceRenameSentryPrivilegeArgs() *SentryGenericPolicyServiceRenameSentryPrivilegeArgs {
	return &SentryGenericPolicyServiceRenameSentryPrivilegeArgs{}
}

var SentryGenericPolicyServiceRenameSentryPrivilegeArgs_Request_DEFAULT *TRenamePrivilegesRequest

func (p *SentryGenericPolicyServiceRenameSentryPrivilegeArgs) GetRequest() *TRenamePrivilegesRequest {
	if !p.IsSetRequest() {
		return SentryGenericPolicyServiceRenameSentryPrivilegeArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *SentryGenericPolicyServiceRenameSentryPrivilegeArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SentryGenericPolicyServiceRenameSentryPrivilegeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceRenameSentryPrivilegeArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &TRenamePrivilegesRequest{
		ProtocolVersion: 2,
	}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceRenameSentryPrivilegeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rename_sentry_privilege_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceRenameSentryPrivilegeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *SentryGenericPolicyServiceRenameSentryPrivilegeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryGenericPolicyServiceRenameSentryPrivilegeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryGenericPolicyServiceRenameSentryPrivilegeResult struct {
	Success *TRenamePrivilegesResponse `thrift:"success,0" json:"success,omitempty"`
}

func NewSentryGenericPolicyServiceRenameSentryPrivilegeResult() *SentryGenericPolicyServiceRenameSentryPrivilegeResult {
	return &SentryGenericPolicyServiceRenameSentryPrivilegeResult{}
}

var SentryGenericPolicyServiceRenameSentryPrivilegeResult_Success_DEFAULT *TRenamePrivilegesResponse

func (p *SentryGenericPolicyServiceRenameSentryPrivilegeResult) GetSuccess() *TRenamePrivilegesResponse {
	if !p.IsSetSuccess() {
		return SentryGenericPolicyServiceRenameSentryPrivilegeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SentryGenericPolicyServiceRenameSentryPrivilegeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SentryGenericPolicyServiceRenameSentryPrivilegeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceRenameSentryPrivilegeResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TRenamePrivilegesResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceRenameSentryPrivilegeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rename_sentry_privilege_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryGenericPolicyServiceRenameSentryPrivilegeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SentryGenericPolicyServiceRenameSentryPrivilegeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryGenericPolicyServiceRenameSentryPrivilegeResult(%+v)", *p)
}
