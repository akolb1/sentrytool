// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package sentry_generic_policy_service

import (
	"bytes"
	"fmt"

	"git.apache.org/thrift.git/lib/go/thrift"
	"github.com/akolb1/sentrytool/sentryapi/thrift/sentry_common_service"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = sentry_common_service.GoUnusedProtection__

// var _ = sentry_policy_service.GoUnusedProtection__
var GoUnusedProtection__ int

type TSentryGrantOption int64

const (
	TSentryGrantOption_TRUE  TSentryGrantOption = 1
	TSentryGrantOption_FALSE TSentryGrantOption = 0
	TSentryGrantOption_UNSET TSentryGrantOption = -1
)

func (p TSentryGrantOption) String() string {
	switch p {
	case TSentryGrantOption_TRUE:
		return "TRUE"
	case TSentryGrantOption_FALSE:
		return "FALSE"
	case TSentryGrantOption_UNSET:
		return "UNSET"
	}
	return "<UNSET>"
}

func TSentryGrantOptionFromString(s string) (TSentryGrantOption, error) {
	switch s {
	case "TRUE":
		return TSentryGrantOption_TRUE, nil
	case "FALSE":
		return TSentryGrantOption_FALSE, nil
	case "UNSET":
		return TSentryGrantOption_UNSET, nil
	}
	return TSentryGrantOption(0), fmt.Errorf("not a valid TSentryGrantOption string")
}

func TSentryGrantOptionPtr(v TSentryGrantOption) *TSentryGrantOption { return &v }

func (p TSentryGrantOption) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TSentryGrantOption) UnmarshalText(text []byte) error {
	q, err := TSentryGrantOptionFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type TSentryResponseStatus sentry_common_service.TSentryResponseStatus

func TSentryResponseStatusPtr(v TSentryResponseStatus) *TSentryResponseStatus { return &v }

// Attributes:
//  - Type
//  - Name
type TAuthorizable struct {
	Type string `thrift:"type,1,required" json:"type"`
	Name string `thrift:"name,2,required" json:"name"`
}

func NewTAuthorizable() *TAuthorizable {
	return &TAuthorizable{}
}

func (p *TAuthorizable) GetType() string {
	return p.Type
}

func (p *TAuthorizable) GetName() string {
	return p.Name
}
func (p *TAuthorizable) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetType bool = false
	var issetName bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetType = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetName = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"))
	}
	if !issetName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"))
	}
	return nil
}

func (p *TAuthorizable) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *TAuthorizable) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *TAuthorizable) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TAuthorizable"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TAuthorizable) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err)
	}
	if err := oprot.WriteString(string(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err)
	}
	return err
}

func (p *TAuthorizable) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err)
	}
	return err
}

func (p *TAuthorizable) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAuthorizable(%+v)", *p)
}

// Attributes:
//  - Component
//  - ServiceName
//  - Authorizables
//  - Action
//  - CreateTime
//  - GrantorPrincipal
//  - GrantOption
type TSentryPrivilege struct {
	Component        string             `thrift:"component,1,required" json:"component"`
	ServiceName      string             `thrift:"serviceName,2,required" json:"serviceName"`
	Authorizables    []*TAuthorizable   `thrift:"authorizables,3,required" json:"authorizables"`
	Action           string             `thrift:"action,4,required" json:"action"`
	CreateTime       *int64             `thrift:"createTime,5" json:"createTime,omitempty"`
	GrantorPrincipal *string            `thrift:"grantorPrincipal,6" json:"grantorPrincipal,omitempty"`
	GrantOption      TSentryGrantOption `thrift:"grantOption,7" json:"grantOption,omitempty"`
}

func NewTSentryPrivilege() *TSentryPrivilege {
	return &TSentryPrivilege{
		GrantOption: 0,
	}
}

func (p *TSentryPrivilege) GetComponent() string {
	return p.Component
}

func (p *TSentryPrivilege) GetServiceName() string {
	return p.ServiceName
}

func (p *TSentryPrivilege) GetAuthorizables() []*TAuthorizable {
	return p.Authorizables
}

func (p *TSentryPrivilege) GetAction() string {
	return p.Action
}

var TSentryPrivilege_CreateTime_DEFAULT int64

func (p *TSentryPrivilege) GetCreateTime() int64 {
	if !p.IsSetCreateTime() {
		return TSentryPrivilege_CreateTime_DEFAULT
	}
	return *p.CreateTime
}

var TSentryPrivilege_GrantorPrincipal_DEFAULT string

func (p *TSentryPrivilege) GetGrantorPrincipal() string {
	if !p.IsSetGrantorPrincipal() {
		return TSentryPrivilege_GrantorPrincipal_DEFAULT
	}
	return *p.GrantorPrincipal
}

var TSentryPrivilege_GrantOption_DEFAULT TSentryGrantOption = 0

func (p *TSentryPrivilege) GetGrantOption() TSentryGrantOption {
	return p.GrantOption
}
func (p *TSentryPrivilege) IsSetCreateTime() bool {
	return p.CreateTime != nil
}

func (p *TSentryPrivilege) IsSetGrantorPrincipal() bool {
	return p.GrantorPrincipal != nil
}

func (p *TSentryPrivilege) IsSetGrantOption() bool {
	return p.GrantOption != TSentryPrivilege_GrantOption_DEFAULT
}

func (p *TSentryPrivilege) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetComponent bool = false
	var issetServiceName bool = false
	var issetAuthorizables bool = false
	var issetAction bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetComponent = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetServiceName = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetAuthorizables = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetAction = true
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetComponent {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Component is not set"))
	}
	if !issetServiceName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ServiceName is not set"))
	}
	if !issetAuthorizables {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Authorizables is not set"))
	}
	if !issetAction {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Action is not set"))
	}
	return nil
}

func (p *TSentryPrivilege) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Component = v
	}
	return nil
}

func (p *TSentryPrivilege) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ServiceName = v
	}
	return nil
}

func (p *TSentryPrivilege) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TAuthorizable, 0, size)
	p.Authorizables = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &TAuthorizable{}
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.Authorizables = append(p.Authorizables, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TSentryPrivilege) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Action = v
	}
	return nil
}

func (p *TSentryPrivilege) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.CreateTime = &v
	}
	return nil
}

func (p *TSentryPrivilege) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.GrantorPrincipal = &v
	}
	return nil
}

func (p *TSentryPrivilege) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		temp := TSentryGrantOption(v)
		p.GrantOption = temp
	}
	return nil
}

func (p *TSentryPrivilege) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TSentryPrivilege"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TSentryPrivilege) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("component", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:component: ", p), err)
	}
	if err := oprot.WriteString(string(p.Component)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.component (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:component: ", p), err)
	}
	return err
}

func (p *TSentryPrivilege) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("serviceName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:serviceName: ", p), err)
	}
	if err := oprot.WriteString(string(p.ServiceName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.serviceName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:serviceName: ", p), err)
	}
	return err
}

func (p *TSentryPrivilege) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authorizables", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:authorizables: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Authorizables)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Authorizables {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:authorizables: ", p), err)
	}
	return err
}

func (p *TSentryPrivilege) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("action", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:action: ", p), err)
	}
	if err := oprot.WriteString(string(p.Action)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.action (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:action: ", p), err)
	}
	return err
}

func (p *TSentryPrivilege) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreateTime() {
		if err := oprot.WriteFieldBegin("createTime", thrift.I64, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:createTime: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.CreateTime)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.createTime (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:createTime: ", p), err)
		}
	}
	return err
}

func (p *TSentryPrivilege) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetGrantorPrincipal() {
		if err := oprot.WriteFieldBegin("grantorPrincipal", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:grantorPrincipal: ", p), err)
		}
		if err := oprot.WriteString(string(*p.GrantorPrincipal)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.grantorPrincipal (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:grantorPrincipal: ", p), err)
		}
	}
	return err
}

func (p *TSentryPrivilege) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetGrantOption() {
		if err := oprot.WriteFieldBegin("grantOption", thrift.I32, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:grantOption: ", p), err)
		}
		if err := oprot.WriteI32(int32(p.GrantOption)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.grantOption (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:grantOption: ", p), err)
		}
	}
	return err
}

func (p *TSentryPrivilege) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TSentryPrivilege(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - RoleName
//  - Component
type TCreateSentryRoleRequest struct {
	ProtocolVersion   int32  `thrift:"protocol_version,1,required" json:"protocol_version"`
	RequestorUserName string `thrift:"requestorUserName,2,required" json:"requestorUserName"`
	RoleName          string `thrift:"roleName,3,required" json:"roleName"`
	Component         string `thrift:"component,4,required" json:"component"`
}

func NewTCreateSentryRoleRequest() *TCreateSentryRoleRequest {
	return &TCreateSentryRoleRequest{
		ProtocolVersion: 2,
	}
}

func (p *TCreateSentryRoleRequest) GetProtocolVersion() int32 {
	return p.ProtocolVersion
}

func (p *TCreateSentryRoleRequest) GetRequestorUserName() string {
	return p.RequestorUserName
}

func (p *TCreateSentryRoleRequest) GetRoleName() string {
	return p.RoleName
}

func (p *TCreateSentryRoleRequest) GetComponent() string {
	return p.Component
}
func (p *TCreateSentryRoleRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetProtocolVersion bool = false
	var issetRequestorUserName bool = false
	var issetRoleName bool = false
	var issetComponent bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetProtocolVersion = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetRequestorUserName = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetRoleName = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetComponent = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetProtocolVersion {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"))
	}
	if !issetRequestorUserName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"))
	}
	if !issetRoleName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoleName is not set"))
	}
	if !issetComponent {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Component is not set"))
	}
	return nil
}

func (p *TCreateSentryRoleRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ProtocolVersion = v
	}
	return nil
}

func (p *TCreateSentryRoleRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RequestorUserName = v
	}
	return nil
}

func (p *TCreateSentryRoleRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.RoleName = v
	}
	return nil
}

func (p *TCreateSentryRoleRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Component = v
	}
	return nil
}

func (p *TCreateSentryRoleRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TCreateSentryRoleRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCreateSentryRoleRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err)
	}
	return err
}

func (p *TCreateSentryRoleRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err)
	}
	if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err)
	}
	return err
}

func (p *TCreateSentryRoleRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roleName", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roleName: ", p), err)
	}
	if err := oprot.WriteString(string(p.RoleName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.roleName (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roleName: ", p), err)
	}
	return err
}

func (p *TCreateSentryRoleRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("component", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:component: ", p), err)
	}
	if err := oprot.WriteString(string(p.Component)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.component (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:component: ", p), err)
	}
	return err
}

func (p *TCreateSentryRoleRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCreateSentryRoleRequest(%+v)", *p)
}

// Attributes:
//  - Status
type TCreateSentryRoleResponse struct {
	Status *sentry_common_service.TSentryResponseStatus `thrift:"status,1,required" json:"status"`
}

func NewTCreateSentryRoleResponse() *TCreateSentryRoleResponse {
	return &TCreateSentryRoleResponse{}
}

var TCreateSentryRoleResponse_Status_DEFAULT sentry_common_service.TSentryResponseStatus

func (p *TCreateSentryRoleResponse) GetStatus() sentry_common_service.TSentryResponseStatus {
	if !p.IsSetStatus() {
		return TCreateSentryRoleResponse_Status_DEFAULT
	}
	return *p.Status
}
func (p *TCreateSentryRoleResponse) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TCreateSentryRoleResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetStatus = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	return nil
}

func (p *TCreateSentryRoleResponse) readField1(iprot thrift.TProtocol) error {
	p.Status = &sentry_common_service.TSentryResponseStatus{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *TCreateSentryRoleResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TCreateSentryRoleResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCreateSentryRoleResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *TCreateSentryRoleResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCreateSentryRoleResponse(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - RoleName
//  - Component
type TDropSentryRoleRequest struct {
	ProtocolVersion   int32  `thrift:"protocol_version,1,required" json:"protocol_version"`
	RequestorUserName string `thrift:"requestorUserName,2,required" json:"requestorUserName"`
	RoleName          string `thrift:"roleName,3,required" json:"roleName"`
	Component         string `thrift:"component,4,required" json:"component"`
}

func NewTDropSentryRoleRequest() *TDropSentryRoleRequest {
	return &TDropSentryRoleRequest{
		ProtocolVersion: 2,
	}
}

func (p *TDropSentryRoleRequest) GetProtocolVersion() int32 {
	return p.ProtocolVersion
}

func (p *TDropSentryRoleRequest) GetRequestorUserName() string {
	return p.RequestorUserName
}

func (p *TDropSentryRoleRequest) GetRoleName() string {
	return p.RoleName
}

func (p *TDropSentryRoleRequest) GetComponent() string {
	return p.Component
}
func (p *TDropSentryRoleRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetProtocolVersion bool = false
	var issetRequestorUserName bool = false
	var issetRoleName bool = false
	var issetComponent bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetProtocolVersion = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetRequestorUserName = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetRoleName = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetComponent = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetProtocolVersion {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"))
	}
	if !issetRequestorUserName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"))
	}
	if !issetRoleName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoleName is not set"))
	}
	if !issetComponent {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Component is not set"))
	}
	return nil
}

func (p *TDropSentryRoleRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ProtocolVersion = v
	}
	return nil
}

func (p *TDropSentryRoleRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RequestorUserName = v
	}
	return nil
}

func (p *TDropSentryRoleRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.RoleName = v
	}
	return nil
}

func (p *TDropSentryRoleRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Component = v
	}
	return nil
}

func (p *TDropSentryRoleRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TDropSentryRoleRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TDropSentryRoleRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err)
	}
	return err
}

func (p *TDropSentryRoleRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err)
	}
	if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err)
	}
	return err
}

func (p *TDropSentryRoleRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roleName", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roleName: ", p), err)
	}
	if err := oprot.WriteString(string(p.RoleName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.roleName (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roleName: ", p), err)
	}
	return err
}

func (p *TDropSentryRoleRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("component", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:component: ", p), err)
	}
	if err := oprot.WriteString(string(p.Component)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.component (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:component: ", p), err)
	}
	return err
}

func (p *TDropSentryRoleRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDropSentryRoleRequest(%+v)", *p)
}

// Attributes:
//  - Status
type TDropSentryRoleResponse struct {
	Status *sentry_common_service.TSentryResponseStatus `thrift:"status,1,required" json:"status"`
}

func NewTDropSentryRoleResponse() *TDropSentryRoleResponse {
	return &TDropSentryRoleResponse{}
}

var TDropSentryRoleResponse_Status_DEFAULT sentry_common_service.TSentryResponseStatus

func (p *TDropSentryRoleResponse) GetStatus() sentry_common_service.TSentryResponseStatus {
	if !p.IsSetStatus() {
		return TDropSentryRoleResponse_Status_DEFAULT
	}
	return *p.Status
}
func (p *TDropSentryRoleResponse) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TDropSentryRoleResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetStatus = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	return nil
}

func (p *TDropSentryRoleResponse) readField1(iprot thrift.TProtocol) error {
	p.Status = &sentry_common_service.TSentryResponseStatus{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *TDropSentryRoleResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TDropSentryRoleResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TDropSentryRoleResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *TDropSentryRoleResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDropSentryRoleResponse(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - RoleName
//  - Component
//  - Groups
type TAlterSentryRoleAddGroupsRequest struct {
	ProtocolVersion   int32           `thrift:"protocol_version,1,required" json:"protocol_version"`
	RequestorUserName string          `thrift:"requestorUserName,2,required" json:"requestorUserName"`
	RoleName          string          `thrift:"roleName,3,required" json:"roleName"`
	Component         string          `thrift:"component,4,required" json:"component"`
	Groups            map[string]bool `thrift:"groups,5,required" json:"groups"`
}

func NewTAlterSentryRoleAddGroupsRequest() *TAlterSentryRoleAddGroupsRequest {
	return &TAlterSentryRoleAddGroupsRequest{
		ProtocolVersion: 2,
	}
}

func (p *TAlterSentryRoleAddGroupsRequest) GetProtocolVersion() int32 {
	return p.ProtocolVersion
}

func (p *TAlterSentryRoleAddGroupsRequest) GetRequestorUserName() string {
	return p.RequestorUserName
}

func (p *TAlterSentryRoleAddGroupsRequest) GetRoleName() string {
	return p.RoleName
}

func (p *TAlterSentryRoleAddGroupsRequest) GetComponent() string {
	return p.Component
}

func (p *TAlterSentryRoleAddGroupsRequest) GetGroups() map[string]bool {
	return p.Groups
}
func (p *TAlterSentryRoleAddGroupsRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetProtocolVersion bool = false
	var issetRequestorUserName bool = false
	var issetRoleName bool = false
	var issetComponent bool = false
	var issetGroups bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetProtocolVersion = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetRequestorUserName = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetRoleName = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetComponent = true
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
			issetGroups = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetProtocolVersion {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"))
	}
	if !issetRequestorUserName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"))
	}
	if !issetRoleName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoleName is not set"))
	}
	if !issetComponent {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Component is not set"))
	}
	if !issetGroups {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Groups is not set"))
	}
	return nil
}

func (p *TAlterSentryRoleAddGroupsRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ProtocolVersion = v
	}
	return nil
}

func (p *TAlterSentryRoleAddGroupsRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RequestorUserName = v
	}
	return nil
}

func (p *TAlterSentryRoleAddGroupsRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.RoleName = v
	}
	return nil
}

func (p *TAlterSentryRoleAddGroupsRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Component = v
	}
	return nil
}

func (p *TAlterSentryRoleAddGroupsRequest) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[string]bool, size)
	p.Groups = tSet
	for i := 0; i < size; i++ {
		var _elem1 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem1 = v
		}
		p.Groups[_elem1] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *TAlterSentryRoleAddGroupsRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TAlterSentryRoleAddGroupsRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TAlterSentryRoleAddGroupsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleAddGroupsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err)
	}
	if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleAddGroupsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roleName", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roleName: ", p), err)
	}
	if err := oprot.WriteString(string(p.RoleName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.roleName (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roleName: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleAddGroupsRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("component", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:component: ", p), err)
	}
	if err := oprot.WriteString(string(p.Component)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.component (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:component: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleAddGroupsRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groups", thrift.SET, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:groups: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.STRING, len(p.Groups)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for v, _ := range p.Groups {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:groups: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleAddGroupsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAlterSentryRoleAddGroupsRequest(%+v)", *p)
}

// Attributes:
//  - Status
type TAlterSentryRoleAddGroupsResponse struct {
	Status *sentry_common_service.TSentryResponseStatus `thrift:"status,1,required" json:"status"`
}

func NewTAlterSentryRoleAddGroupsResponse() *TAlterSentryRoleAddGroupsResponse {
	return &TAlterSentryRoleAddGroupsResponse{}
}

var TAlterSentryRoleAddGroupsResponse_Status_DEFAULT sentry_common_service.TSentryResponseStatus

func (p *TAlterSentryRoleAddGroupsResponse) GetStatus() sentry_common_service.TSentryResponseStatus {
	if !p.IsSetStatus() {
		return TAlterSentryRoleAddGroupsResponse_Status_DEFAULT
	}
	return *p.Status
}
func (p *TAlterSentryRoleAddGroupsResponse) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TAlterSentryRoleAddGroupsResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetStatus = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	return nil
}

func (p *TAlterSentryRoleAddGroupsResponse) readField1(iprot thrift.TProtocol) error {
	p.Status = &sentry_common_service.TSentryResponseStatus{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *TAlterSentryRoleAddGroupsResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TAlterSentryRoleAddGroupsResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TAlterSentryRoleAddGroupsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleAddGroupsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAlterSentryRoleAddGroupsResponse(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - RoleName
//  - Component
//  - Groups
type TAlterSentryRoleDeleteGroupsRequest struct {
	ProtocolVersion   int32           `thrift:"protocol_version,1,required" json:"protocol_version"`
	RequestorUserName string          `thrift:"requestorUserName,2,required" json:"requestorUserName"`
	RoleName          string          `thrift:"roleName,3,required" json:"roleName"`
	Component         string          `thrift:"component,4,required" json:"component"`
	Groups            map[string]bool `thrift:"groups,5,required" json:"groups"`
}

func NewTAlterSentryRoleDeleteGroupsRequest() *TAlterSentryRoleDeleteGroupsRequest {
	return &TAlterSentryRoleDeleteGroupsRequest{
		ProtocolVersion: 2,
	}
}

func (p *TAlterSentryRoleDeleteGroupsRequest) GetProtocolVersion() int32 {
	return p.ProtocolVersion
}

func (p *TAlterSentryRoleDeleteGroupsRequest) GetRequestorUserName() string {
	return p.RequestorUserName
}

func (p *TAlterSentryRoleDeleteGroupsRequest) GetRoleName() string {
	return p.RoleName
}

func (p *TAlterSentryRoleDeleteGroupsRequest) GetComponent() string {
	return p.Component
}

func (p *TAlterSentryRoleDeleteGroupsRequest) GetGroups() map[string]bool {
	return p.Groups
}
func (p *TAlterSentryRoleDeleteGroupsRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetProtocolVersion bool = false
	var issetRequestorUserName bool = false
	var issetRoleName bool = false
	var issetComponent bool = false
	var issetGroups bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetProtocolVersion = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetRequestorUserName = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetRoleName = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetComponent = true
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
			issetGroups = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetProtocolVersion {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"))
	}
	if !issetRequestorUserName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"))
	}
	if !issetRoleName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoleName is not set"))
	}
	if !issetComponent {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Component is not set"))
	}
	if !issetGroups {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Groups is not set"))
	}
	return nil
}

func (p *TAlterSentryRoleDeleteGroupsRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ProtocolVersion = v
	}
	return nil
}

func (p *TAlterSentryRoleDeleteGroupsRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RequestorUserName = v
	}
	return nil
}

func (p *TAlterSentryRoleDeleteGroupsRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.RoleName = v
	}
	return nil
}

func (p *TAlterSentryRoleDeleteGroupsRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Component = v
	}
	return nil
}

func (p *TAlterSentryRoleDeleteGroupsRequest) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[string]bool, size)
	p.Groups = tSet
	for i := 0; i < size; i++ {
		var _elem2 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem2 = v
		}
		p.Groups[_elem2] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *TAlterSentryRoleDeleteGroupsRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TAlterSentryRoleDeleteGroupsRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TAlterSentryRoleDeleteGroupsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleDeleteGroupsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err)
	}
	if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleDeleteGroupsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roleName", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roleName: ", p), err)
	}
	if err := oprot.WriteString(string(p.RoleName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.roleName (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roleName: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleDeleteGroupsRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("component", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:component: ", p), err)
	}
	if err := oprot.WriteString(string(p.Component)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.component (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:component: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleDeleteGroupsRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groups", thrift.SET, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:groups: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.STRING, len(p.Groups)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for v, _ := range p.Groups {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:groups: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleDeleteGroupsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAlterSentryRoleDeleteGroupsRequest(%+v)", *p)
}

// Attributes:
//  - Status
type TAlterSentryRoleDeleteGroupsResponse struct {
	Status *sentry_common_service.TSentryResponseStatus `thrift:"status,1,required" json:"status"`
}

func NewTAlterSentryRoleDeleteGroupsResponse() *TAlterSentryRoleDeleteGroupsResponse {
	return &TAlterSentryRoleDeleteGroupsResponse{}
}

var TAlterSentryRoleDeleteGroupsResponse_Status_DEFAULT sentry_common_service.TSentryResponseStatus

func (p *TAlterSentryRoleDeleteGroupsResponse) GetStatus() sentry_common_service.TSentryResponseStatus {
	if !p.IsSetStatus() {
		return TAlterSentryRoleDeleteGroupsResponse_Status_DEFAULT
	}
	return *p.Status
}
func (p *TAlterSentryRoleDeleteGroupsResponse) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TAlterSentryRoleDeleteGroupsResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetStatus = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	return nil
}

func (p *TAlterSentryRoleDeleteGroupsResponse) readField1(iprot thrift.TProtocol) error {
	p.Status = &sentry_common_service.TSentryResponseStatus{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *TAlterSentryRoleDeleteGroupsResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TAlterSentryRoleDeleteGroupsResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TAlterSentryRoleDeleteGroupsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleDeleteGroupsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAlterSentryRoleDeleteGroupsResponse(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - RoleName
//  - Component
//  - Privilege
type TAlterSentryRoleGrantPrivilegeRequest struct {
	ProtocolVersion   int32             `thrift:"protocol_version,1,required" json:"protocol_version"`
	RequestorUserName string            `thrift:"requestorUserName,2,required" json:"requestorUserName"`
	RoleName          string            `thrift:"roleName,3,required" json:"roleName"`
	Component         string            `thrift:"component,4,required" json:"component"`
	Privilege         *TSentryPrivilege `thrift:"privilege,5,required" json:"privilege"`
}

func NewTAlterSentryRoleGrantPrivilegeRequest() *TAlterSentryRoleGrantPrivilegeRequest {
	return &TAlterSentryRoleGrantPrivilegeRequest{
		ProtocolVersion: 2,
	}
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) GetProtocolVersion() int32 {
	return p.ProtocolVersion
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) GetRequestorUserName() string {
	return p.RequestorUserName
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) GetRoleName() string {
	return p.RoleName
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) GetComponent() string {
	return p.Component
}

var TAlterSentryRoleGrantPrivilegeRequest_Privilege_DEFAULT *TSentryPrivilege

func (p *TAlterSentryRoleGrantPrivilegeRequest) GetPrivilege() *TSentryPrivilege {
	if !p.IsSetPrivilege() {
		return TAlterSentryRoleGrantPrivilegeRequest_Privilege_DEFAULT
	}
	return p.Privilege
}
func (p *TAlterSentryRoleGrantPrivilegeRequest) IsSetPrivilege() bool {
	return p.Privilege != nil
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetProtocolVersion bool = false
	var issetRequestorUserName bool = false
	var issetRoleName bool = false
	var issetComponent bool = false
	var issetPrivilege bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetProtocolVersion = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetRequestorUserName = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetRoleName = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetComponent = true
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
			issetPrivilege = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetProtocolVersion {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"))
	}
	if !issetRequestorUserName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"))
	}
	if !issetRoleName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoleName is not set"))
	}
	if !issetComponent {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Component is not set"))
	}
	if !issetPrivilege {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Privilege is not set"))
	}
	return nil
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ProtocolVersion = v
	}
	return nil
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RequestorUserName = v
	}
	return nil
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.RoleName = v
	}
	return nil
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Component = v
	}
	return nil
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) readField5(iprot thrift.TProtocol) error {
	p.Privilege = &TSentryPrivilege{
		GrantOption: 0,
	}
	if err := p.Privilege.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Privilege), err)
	}
	return nil
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TAlterSentryRoleGrantPrivilegeRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err)
	}
	if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roleName", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roleName: ", p), err)
	}
	if err := oprot.WriteString(string(p.RoleName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.roleName (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roleName: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("component", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:component: ", p), err)
	}
	if err := oprot.WriteString(string(p.Component)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.component (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:component: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privilege", thrift.STRUCT, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:privilege: ", p), err)
	}
	if err := p.Privilege.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Privilege), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:privilege: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAlterSentryRoleGrantPrivilegeRequest(%+v)", *p)
}

// Attributes:
//  - Status
type TAlterSentryRoleGrantPrivilegeResponse struct {
	Status *sentry_common_service.TSentryResponseStatus `thrift:"status,1,required" json:"status"`
}

func NewTAlterSentryRoleGrantPrivilegeResponse() *TAlterSentryRoleGrantPrivilegeResponse {
	return &TAlterSentryRoleGrantPrivilegeResponse{}
}

var TAlterSentryRoleGrantPrivilegeResponse_Status_DEFAULT sentry_common_service.TSentryResponseStatus

func (p *TAlterSentryRoleGrantPrivilegeResponse) GetStatus() sentry_common_service.TSentryResponseStatus {
	if !p.IsSetStatus() {
		return TAlterSentryRoleGrantPrivilegeResponse_Status_DEFAULT
	}
	return *p.Status
}
func (p *TAlterSentryRoleGrantPrivilegeResponse) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TAlterSentryRoleGrantPrivilegeResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetStatus = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	return nil
}

func (p *TAlterSentryRoleGrantPrivilegeResponse) readField1(iprot thrift.TProtocol) error {
	p.Status = &sentry_common_service.TSentryResponseStatus{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *TAlterSentryRoleGrantPrivilegeResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TAlterSentryRoleGrantPrivilegeResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TAlterSentryRoleGrantPrivilegeResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleGrantPrivilegeResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAlterSentryRoleGrantPrivilegeResponse(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - RoleName
//  - Component
//  - Privilege
type TAlterSentryRoleRevokePrivilegeRequest struct {
	ProtocolVersion   int32             `thrift:"protocol_version,1,required" json:"protocol_version"`
	RequestorUserName string            `thrift:"requestorUserName,2,required" json:"requestorUserName"`
	RoleName          string            `thrift:"roleName,3,required" json:"roleName"`
	Component         string            `thrift:"component,4,required" json:"component"`
	Privilege         *TSentryPrivilege `thrift:"privilege,5,required" json:"privilege"`
}

func NewTAlterSentryRoleRevokePrivilegeRequest() *TAlterSentryRoleRevokePrivilegeRequest {
	return &TAlterSentryRoleRevokePrivilegeRequest{
		ProtocolVersion: 2,
	}
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) GetProtocolVersion() int32 {
	return p.ProtocolVersion
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) GetRequestorUserName() string {
	return p.RequestorUserName
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) GetRoleName() string {
	return p.RoleName
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) GetComponent() string {
	return p.Component
}

var TAlterSentryRoleRevokePrivilegeRequest_Privilege_DEFAULT *TSentryPrivilege

func (p *TAlterSentryRoleRevokePrivilegeRequest) GetPrivilege() *TSentryPrivilege {
	if !p.IsSetPrivilege() {
		return TAlterSentryRoleRevokePrivilegeRequest_Privilege_DEFAULT
	}
	return p.Privilege
}
func (p *TAlterSentryRoleRevokePrivilegeRequest) IsSetPrivilege() bool {
	return p.Privilege != nil
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetProtocolVersion bool = false
	var issetRequestorUserName bool = false
	var issetRoleName bool = false
	var issetComponent bool = false
	var issetPrivilege bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetProtocolVersion = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetRequestorUserName = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetRoleName = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetComponent = true
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
			issetPrivilege = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetProtocolVersion {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"))
	}
	if !issetRequestorUserName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"))
	}
	if !issetRoleName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoleName is not set"))
	}
	if !issetComponent {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Component is not set"))
	}
	if !issetPrivilege {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Privilege is not set"))
	}
	return nil
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ProtocolVersion = v
	}
	return nil
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RequestorUserName = v
	}
	return nil
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.RoleName = v
	}
	return nil
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Component = v
	}
	return nil
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) readField5(iprot thrift.TProtocol) error {
	p.Privilege = &TSentryPrivilege{
		GrantOption: 0,
	}
	if err := p.Privilege.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Privilege), err)
	}
	return nil
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TAlterSentryRoleRevokePrivilegeRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err)
	}
	if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roleName", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roleName: ", p), err)
	}
	if err := oprot.WriteString(string(p.RoleName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.roleName (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roleName: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("component", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:component: ", p), err)
	}
	if err := oprot.WriteString(string(p.Component)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.component (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:component: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privilege", thrift.STRUCT, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:privilege: ", p), err)
	}
	if err := p.Privilege.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Privilege), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:privilege: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAlterSentryRoleRevokePrivilegeRequest(%+v)", *p)
}

// Attributes:
//  - Status
type TAlterSentryRoleRevokePrivilegeResponse struct {
	Status *sentry_common_service.TSentryResponseStatus `thrift:"status,1,required" json:"status"`
}

func NewTAlterSentryRoleRevokePrivilegeResponse() *TAlterSentryRoleRevokePrivilegeResponse {
	return &TAlterSentryRoleRevokePrivilegeResponse{}
}

var TAlterSentryRoleRevokePrivilegeResponse_Status_DEFAULT sentry_common_service.TSentryResponseStatus

func (p *TAlterSentryRoleRevokePrivilegeResponse) GetStatus() sentry_common_service.TSentryResponseStatus {
	if !p.IsSetStatus() {
		return TAlterSentryRoleRevokePrivilegeResponse_Status_DEFAULT
	}
	return *p.Status
}
func (p *TAlterSentryRoleRevokePrivilegeResponse) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TAlterSentryRoleRevokePrivilegeResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetStatus = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	return nil
}

func (p *TAlterSentryRoleRevokePrivilegeResponse) readField1(iprot thrift.TProtocol) error {
	p.Status = &sentry_common_service.TSentryResponseStatus{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *TAlterSentryRoleRevokePrivilegeResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TAlterSentryRoleRevokePrivilegeResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TAlterSentryRoleRevokePrivilegeResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleRevokePrivilegeResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAlterSentryRoleRevokePrivilegeResponse(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - GroupName
//  - Component
type TListSentryRolesRequest struct {
	ProtocolVersion   int32   `thrift:"protocol_version,1,required" json:"protocol_version"`
	RequestorUserName string  `thrift:"requestorUserName,2,required" json:"requestorUserName"`
	GroupName         *string `thrift:"groupName,3" json:"groupName,omitempty"`
	Component         string  `thrift:"component,4,required" json:"component"`
}

func NewTListSentryRolesRequest() *TListSentryRolesRequest {
	return &TListSentryRolesRequest{
		ProtocolVersion: 2,
	}
}

func (p *TListSentryRolesRequest) GetProtocolVersion() int32 {
	return p.ProtocolVersion
}

func (p *TListSentryRolesRequest) GetRequestorUserName() string {
	return p.RequestorUserName
}

var TListSentryRolesRequest_GroupName_DEFAULT string

func (p *TListSentryRolesRequest) GetGroupName() string {
	if !p.IsSetGroupName() {
		return TListSentryRolesRequest_GroupName_DEFAULT
	}
	return *p.GroupName
}

func (p *TListSentryRolesRequest) GetComponent() string {
	return p.Component
}
func (p *TListSentryRolesRequest) IsSetGroupName() bool {
	return p.GroupName != nil
}

func (p *TListSentryRolesRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetProtocolVersion bool = false
	var issetRequestorUserName bool = false
	var issetComponent bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetProtocolVersion = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetRequestorUserName = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetComponent = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetProtocolVersion {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"))
	}
	if !issetRequestorUserName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"))
	}
	if !issetComponent {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Component is not set"))
	}
	return nil
}

func (p *TListSentryRolesRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ProtocolVersion = v
	}
	return nil
}

func (p *TListSentryRolesRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RequestorUserName = v
	}
	return nil
}

func (p *TListSentryRolesRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.GroupName = &v
	}
	return nil
}

func (p *TListSentryRolesRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Component = v
	}
	return nil
}

func (p *TListSentryRolesRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TListSentryRolesRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TListSentryRolesRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err)
	}
	return err
}

func (p *TListSentryRolesRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err)
	}
	if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err)
	}
	return err
}

func (p *TListSentryRolesRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupName() {
		if err := oprot.WriteFieldBegin("groupName", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:groupName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.GroupName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.groupName (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:groupName: ", p), err)
		}
	}
	return err
}

func (p *TListSentryRolesRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("component", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:component: ", p), err)
	}
	if err := oprot.WriteString(string(p.Component)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.component (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:component: ", p), err)
	}
	return err
}

func (p *TListSentryRolesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TListSentryRolesRequest(%+v)", *p)
}

// Attributes:
//  - RoleName
//  - Groups
type TSentryRole struct {
	RoleName string          `thrift:"roleName,1,required" json:"roleName"`
	Groups   map[string]bool `thrift:"groups,2,required" json:"groups"`
}

func NewTSentryRole() *TSentryRole {
	return &TSentryRole{}
}

func (p *TSentryRole) GetRoleName() string {
	return p.RoleName
}

func (p *TSentryRole) GetGroups() map[string]bool {
	return p.Groups
}
func (p *TSentryRole) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetRoleName bool = false
	var issetGroups bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetRoleName = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetGroups = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetRoleName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoleName is not set"))
	}
	if !issetGroups {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Groups is not set"))
	}
	return nil
}

func (p *TSentryRole) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.RoleName = v
	}
	return nil
}

func (p *TSentryRole) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[string]bool, size)
	p.Groups = tSet
	for i := 0; i < size; i++ {
		var _elem3 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem3 = v
		}
		p.Groups[_elem3] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *TSentryRole) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TSentryRole"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TSentryRole) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roleName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:roleName: ", p), err)
	}
	if err := oprot.WriteString(string(p.RoleName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.roleName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:roleName: ", p), err)
	}
	return err
}

func (p *TSentryRole) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groups", thrift.SET, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groups: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.STRING, len(p.Groups)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for v, _ := range p.Groups {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groups: ", p), err)
	}
	return err
}

func (p *TSentryRole) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TSentryRole(%+v)", *p)
}

// Attributes:
//  - Status
//  - Roles
type TListSentryRolesResponse struct {
	Status *sentry_common_service.TSentryResponseStatus `thrift:"status,1,required" json:"status"`
	Roles  map[*TSentryRole]bool                        `thrift:"roles,2" json:"roles,omitempty"`
}

func NewTListSentryRolesResponse() *TListSentryRolesResponse {
	return &TListSentryRolesResponse{}
}

var TListSentryRolesResponse_Status_DEFAULT sentry_common_service.TSentryResponseStatus

func (p *TListSentryRolesResponse) GetStatus() sentry_common_service.TSentryResponseStatus {
	if !p.IsSetStatus() {
		return TListSentryRolesResponse_Status_DEFAULT
	}
	return *p.Status
}

var TListSentryRolesResponse_Roles_DEFAULT map[*TSentryRole]bool

func (p *TListSentryRolesResponse) GetRoles() map[*TSentryRole]bool {
	return p.Roles
}
func (p *TListSentryRolesResponse) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TListSentryRolesResponse) IsSetRoles() bool {
	return p.Roles != nil
}

func (p *TListSentryRolesResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetStatus = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	return nil
}

func (p *TListSentryRolesResponse) readField1(iprot thrift.TProtocol) error {
	p.Status = &sentry_common_service.TSentryResponseStatus{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *TListSentryRolesResponse) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[*TSentryRole]bool, size)
	p.Roles = tSet
	for i := 0; i < size; i++ {
		_elem4 := &TSentryRole{}
		if err := _elem4.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
		}
		p.Roles[_elem4] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *TListSentryRolesResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TListSentryRolesResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TListSentryRolesResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *TListSentryRolesResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRoles() {
		if err := oprot.WriteFieldBegin("roles", thrift.SET, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:roles: ", p), err)
		}
		if err := oprot.WriteSetBegin(thrift.STRUCT, len(p.Roles)); err != nil {
			return thrift.PrependError("error writing set begin: ", err)
		}
		for v, _ := range p.Roles {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return thrift.PrependError("error writing set end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:roles: ", p), err)
		}
	}
	return err
}

func (p *TListSentryRolesResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TListSentryRolesResponse(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - RoleName
//  - Component
//  - ServiceName
//  - Authorizables
type TListSentryPrivilegesRequest struct {
	ProtocolVersion   int32            `thrift:"protocol_version,1,required" json:"protocol_version"`
	RequestorUserName string           `thrift:"requestorUserName,2,required" json:"requestorUserName"`
	RoleName          string           `thrift:"roleName,3,required" json:"roleName"`
	Component         string           `thrift:"component,4,required" json:"component"`
	ServiceName       string           `thrift:"serviceName,5,required" json:"serviceName"`
	Authorizables     []*TAuthorizable `thrift:"authorizables,6" json:"authorizables,omitempty"`
}

func NewTListSentryPrivilegesRequest() *TListSentryPrivilegesRequest {
	return &TListSentryPrivilegesRequest{
		ProtocolVersion: 2,
	}
}

func (p *TListSentryPrivilegesRequest) GetProtocolVersion() int32 {
	return p.ProtocolVersion
}

func (p *TListSentryPrivilegesRequest) GetRequestorUserName() string {
	return p.RequestorUserName
}

func (p *TListSentryPrivilegesRequest) GetRoleName() string {
	return p.RoleName
}

func (p *TListSentryPrivilegesRequest) GetComponent() string {
	return p.Component
}

func (p *TListSentryPrivilegesRequest) GetServiceName() string {
	return p.ServiceName
}

var TListSentryPrivilegesRequest_Authorizables_DEFAULT []*TAuthorizable

func (p *TListSentryPrivilegesRequest) GetAuthorizables() []*TAuthorizable {
	return p.Authorizables
}
func (p *TListSentryPrivilegesRequest) IsSetAuthorizables() bool {
	return p.Authorizables != nil
}

func (p *TListSentryPrivilegesRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetProtocolVersion bool = false
	var issetRequestorUserName bool = false
	var issetRoleName bool = false
	var issetComponent bool = false
	var issetServiceName bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetProtocolVersion = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetRequestorUserName = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetRoleName = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetComponent = true
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
			issetServiceName = true
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetProtocolVersion {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"))
	}
	if !issetRequestorUserName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"))
	}
	if !issetRoleName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoleName is not set"))
	}
	if !issetComponent {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Component is not set"))
	}
	if !issetServiceName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ServiceName is not set"))
	}
	return nil
}

func (p *TListSentryPrivilegesRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ProtocolVersion = v
	}
	return nil
}

func (p *TListSentryPrivilegesRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RequestorUserName = v
	}
	return nil
}

func (p *TListSentryPrivilegesRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.RoleName = v
	}
	return nil
}

func (p *TListSentryPrivilegesRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Component = v
	}
	return nil
}

func (p *TListSentryPrivilegesRequest) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.ServiceName = v
	}
	return nil
}

func (p *TListSentryPrivilegesRequest) readField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TAuthorizable, 0, size)
	p.Authorizables = tSlice
	for i := 0; i < size; i++ {
		_elem5 := &TAuthorizable{}
		if err := _elem5.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem5), err)
		}
		p.Authorizables = append(p.Authorizables, _elem5)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TListSentryPrivilegesRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TListSentryPrivilegesRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TListSentryPrivilegesRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err)
	}
	return err
}

func (p *TListSentryPrivilegesRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err)
	}
	if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err)
	}
	return err
}

func (p *TListSentryPrivilegesRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roleName", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roleName: ", p), err)
	}
	if err := oprot.WriteString(string(p.RoleName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.roleName (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roleName: ", p), err)
	}
	return err
}

func (p *TListSentryPrivilegesRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("component", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:component: ", p), err)
	}
	if err := oprot.WriteString(string(p.Component)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.component (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:component: ", p), err)
	}
	return err
}

func (p *TListSentryPrivilegesRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("serviceName", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:serviceName: ", p), err)
	}
	if err := oprot.WriteString(string(p.ServiceName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.serviceName (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:serviceName: ", p), err)
	}
	return err
}

func (p *TListSentryPrivilegesRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthorizables() {
		if err := oprot.WriteFieldBegin("authorizables", thrift.LIST, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:authorizables: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Authorizables)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Authorizables {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:authorizables: ", p), err)
		}
	}
	return err
}

func (p *TListSentryPrivilegesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TListSentryPrivilegesRequest(%+v)", *p)
}

// Attributes:
//  - Status
//  - Privileges
type TListSentryPrivilegesResponse struct {
	Status     *sentry_common_service.TSentryResponseStatus `thrift:"status,1,required" json:"status"`
	Privileges map[*TSentryPrivilege]bool                   `thrift:"privileges,2" json:"privileges,omitempty"`
}

func NewTListSentryPrivilegesResponse() *TListSentryPrivilegesResponse {
	return &TListSentryPrivilegesResponse{}
}

var TListSentryPrivilegesResponse_Status_DEFAULT sentry_common_service.TSentryResponseStatus

func (p *TListSentryPrivilegesResponse) GetStatus() sentry_common_service.TSentryResponseStatus {
	if !p.IsSetStatus() {
		return TListSentryPrivilegesResponse_Status_DEFAULT
	}
	return *p.Status
}

var TListSentryPrivilegesResponse_Privileges_DEFAULT map[*TSentryPrivilege]bool

func (p *TListSentryPrivilegesResponse) GetPrivileges() map[*TSentryPrivilege]bool {
	return p.Privileges
}
func (p *TListSentryPrivilegesResponse) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TListSentryPrivilegesResponse) IsSetPrivileges() bool {
	return p.Privileges != nil
}

func (p *TListSentryPrivilegesResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetStatus = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	return nil
}

func (p *TListSentryPrivilegesResponse) readField1(iprot thrift.TProtocol) error {
	p.Status = &sentry_common_service.TSentryResponseStatus{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *TListSentryPrivilegesResponse) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[*TSentryPrivilege]bool, size)
	p.Privileges = tSet
	for i := 0; i < size; i++ {
		_elem6 := &TSentryPrivilege{
			GrantOption: 0,
		}
		if err := _elem6.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
		}
		p.Privileges[_elem6] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *TListSentryPrivilegesResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TListSentryPrivilegesResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TListSentryPrivilegesResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *TListSentryPrivilegesResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrivileges() {
		if err := oprot.WriteFieldBegin("privileges", thrift.SET, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:privileges: ", p), err)
		}
		if err := oprot.WriteSetBegin(thrift.STRUCT, len(p.Privileges)); err != nil {
			return thrift.PrependError("error writing set begin: ", err)
		}
		for v, _ := range p.Privileges {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return thrift.PrependError("error writing set end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:privileges: ", p), err)
		}
	}
	return err
}

func (p *TListSentryPrivilegesResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TListSentryPrivilegesResponse(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - Privilege
//  - Component
type TDropPrivilegesRequest struct {
	ProtocolVersion   int32             `thrift:"protocol_version,1,required" json:"protocol_version"`
	RequestorUserName string            `thrift:"requestorUserName,2,required" json:"requestorUserName"`
	Privilege         *TSentryPrivilege `thrift:"privilege,3,required" json:"privilege"`
	Component         string            `thrift:"component,4,required" json:"component"`
}

func NewTDropPrivilegesRequest() *TDropPrivilegesRequest {
	return &TDropPrivilegesRequest{
		ProtocolVersion: 2,
	}
}

func (p *TDropPrivilegesRequest) GetProtocolVersion() int32 {
	return p.ProtocolVersion
}

func (p *TDropPrivilegesRequest) GetRequestorUserName() string {
	return p.RequestorUserName
}

var TDropPrivilegesRequest_Privilege_DEFAULT *TSentryPrivilege

func (p *TDropPrivilegesRequest) GetPrivilege() *TSentryPrivilege {
	if !p.IsSetPrivilege() {
		return TDropPrivilegesRequest_Privilege_DEFAULT
	}
	return p.Privilege
}

func (p *TDropPrivilegesRequest) GetComponent() string {
	return p.Component
}
func (p *TDropPrivilegesRequest) IsSetPrivilege() bool {
	return p.Privilege != nil
}

func (p *TDropPrivilegesRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetProtocolVersion bool = false
	var issetRequestorUserName bool = false
	var issetPrivilege bool = false
	var issetComponent bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetProtocolVersion = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetRequestorUserName = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetPrivilege = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetComponent = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetProtocolVersion {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"))
	}
	if !issetRequestorUserName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"))
	}
	if !issetPrivilege {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Privilege is not set"))
	}
	if !issetComponent {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Component is not set"))
	}
	return nil
}

func (p *TDropPrivilegesRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ProtocolVersion = v
	}
	return nil
}

func (p *TDropPrivilegesRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RequestorUserName = v
	}
	return nil
}

func (p *TDropPrivilegesRequest) readField3(iprot thrift.TProtocol) error {
	p.Privilege = &TSentryPrivilege{
		GrantOption: 0,
	}
	if err := p.Privilege.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Privilege), err)
	}
	return nil
}

func (p *TDropPrivilegesRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Component = v
	}
	return nil
}

func (p *TDropPrivilegesRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TDropPrivilegesRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TDropPrivilegesRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err)
	}
	return err
}

func (p *TDropPrivilegesRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err)
	}
	if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err)
	}
	return err
}

func (p *TDropPrivilegesRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privilege", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:privilege: ", p), err)
	}
	if err := p.Privilege.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Privilege), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:privilege: ", p), err)
	}
	return err
}

func (p *TDropPrivilegesRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("component", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:component: ", p), err)
	}
	if err := oprot.WriteString(string(p.Component)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.component (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:component: ", p), err)
	}
	return err
}

func (p *TDropPrivilegesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDropPrivilegesRequest(%+v)", *p)
}

// Attributes:
//  - Status
type TDropPrivilegesResponse struct {
	Status *sentry_common_service.TSentryResponseStatus `thrift:"status,1,required" json:"status"`
}

func NewTDropPrivilegesResponse() *TDropPrivilegesResponse {
	return &TDropPrivilegesResponse{}
}

var TDropPrivilegesResponse_Status_DEFAULT sentry_common_service.TSentryResponseStatus

func (p *TDropPrivilegesResponse) GetStatus() sentry_common_service.TSentryResponseStatus {
	if !p.IsSetStatus() {
		return TDropPrivilegesResponse_Status_DEFAULT
	}
	return *p.Status
}
func (p *TDropPrivilegesResponse) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TDropPrivilegesResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetStatus = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	return nil
}

func (p *TDropPrivilegesResponse) readField1(iprot thrift.TProtocol) error {
	p.Status = &sentry_common_service.TSentryResponseStatus{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *TDropPrivilegesResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TDropPrivilegesResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TDropPrivilegesResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *TDropPrivilegesResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDropPrivilegesResponse(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - Component
//  - ServiceName
//  - OldAuthorizables
//  - NewAuthorizables_
type TRenamePrivilegesRequest struct {
	ProtocolVersion   int32            `thrift:"protocol_version,1,required" json:"protocol_version"`
	RequestorUserName string           `thrift:"requestorUserName,2,required" json:"requestorUserName"`
	Component         string           `thrift:"component,3,required" json:"component"`
	ServiceName       string           `thrift:"serviceName,4,required" json:"serviceName"`
	OldAuthorizables  []*TAuthorizable `thrift:"oldAuthorizables,5,required" json:"oldAuthorizables"`
	NewAuthorizables_ []*TAuthorizable `thrift:"newAuthorizables,6,required" json:"newAuthorizables"`
}

func NewTRenamePrivilegesRequest() *TRenamePrivilegesRequest {
	return &TRenamePrivilegesRequest{
		ProtocolVersion: 2,
	}
}

func (p *TRenamePrivilegesRequest) GetProtocolVersion() int32 {
	return p.ProtocolVersion
}

func (p *TRenamePrivilegesRequest) GetRequestorUserName() string {
	return p.RequestorUserName
}

func (p *TRenamePrivilegesRequest) GetComponent() string {
	return p.Component
}

func (p *TRenamePrivilegesRequest) GetServiceName() string {
	return p.ServiceName
}

func (p *TRenamePrivilegesRequest) GetOldAuthorizables() []*TAuthorizable {
	return p.OldAuthorizables
}

func (p *TRenamePrivilegesRequest) GetNewAuthorizables_() []*TAuthorizable {
	return p.NewAuthorizables_
}
func (p *TRenamePrivilegesRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetProtocolVersion bool = false
	var issetRequestorUserName bool = false
	var issetComponent bool = false
	var issetServiceName bool = false
	var issetOldAuthorizables bool = false
	var issetNewAuthorizables_ bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetProtocolVersion = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetRequestorUserName = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetComponent = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetServiceName = true
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
			issetOldAuthorizables = true
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
			issetNewAuthorizables_ = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetProtocolVersion {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"))
	}
	if !issetRequestorUserName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"))
	}
	if !issetComponent {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Component is not set"))
	}
	if !issetServiceName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ServiceName is not set"))
	}
	if !issetOldAuthorizables {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field OldAuthorizables is not set"))
	}
	if !issetNewAuthorizables_ {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NewAuthorizables_ is not set"))
	}
	return nil
}

func (p *TRenamePrivilegesRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ProtocolVersion = v
	}
	return nil
}

func (p *TRenamePrivilegesRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RequestorUserName = v
	}
	return nil
}

func (p *TRenamePrivilegesRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Component = v
	}
	return nil
}

func (p *TRenamePrivilegesRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ServiceName = v
	}
	return nil
}

func (p *TRenamePrivilegesRequest) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TAuthorizable, 0, size)
	p.OldAuthorizables = tSlice
	for i := 0; i < size; i++ {
		_elem7 := &TAuthorizable{}
		if err := _elem7.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem7), err)
		}
		p.OldAuthorizables = append(p.OldAuthorizables, _elem7)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TRenamePrivilegesRequest) readField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TAuthorizable, 0, size)
	p.NewAuthorizables_ = tSlice
	for i := 0; i < size; i++ {
		_elem8 := &TAuthorizable{}
		if err := _elem8.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem8), err)
		}
		p.NewAuthorizables_ = append(p.NewAuthorizables_, _elem8)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TRenamePrivilegesRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TRenamePrivilegesRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TRenamePrivilegesRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err)
	}
	return err
}

func (p *TRenamePrivilegesRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err)
	}
	if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err)
	}
	return err
}

func (p *TRenamePrivilegesRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("component", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:component: ", p), err)
	}
	if err := oprot.WriteString(string(p.Component)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.component (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:component: ", p), err)
	}
	return err
}

func (p *TRenamePrivilegesRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("serviceName", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:serviceName: ", p), err)
	}
	if err := oprot.WriteString(string(p.ServiceName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.serviceName (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:serviceName: ", p), err)
	}
	return err
}

func (p *TRenamePrivilegesRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("oldAuthorizables", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:oldAuthorizables: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.OldAuthorizables)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.OldAuthorizables {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:oldAuthorizables: ", p), err)
	}
	return err
}

func (p *TRenamePrivilegesRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("newAuthorizables", thrift.LIST, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:newAuthorizables: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.NewAuthorizables_)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.NewAuthorizables_ {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:newAuthorizables: ", p), err)
	}
	return err
}

func (p *TRenamePrivilegesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TRenamePrivilegesRequest(%+v)", *p)
}

// Attributes:
//  - Status
type TRenamePrivilegesResponse struct {
	Status *sentry_common_service.TSentryResponseStatus `thrift:"status,1,required" json:"status"`
}

func NewTRenamePrivilegesResponse() *TRenamePrivilegesResponse {
	return &TRenamePrivilegesResponse{}
}

var TRenamePrivilegesResponse_Status_DEFAULT sentry_common_service.TSentryResponseStatus

func (p *TRenamePrivilegesResponse) GetStatus() sentry_common_service.TSentryResponseStatus {
	if !p.IsSetStatus() {
		return TRenamePrivilegesResponse_Status_DEFAULT
	}
	return *p.Status
}
func (p *TRenamePrivilegesResponse) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TRenamePrivilegesResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetStatus = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	return nil
}

func (p *TRenamePrivilegesResponse) readField1(iprot thrift.TProtocol) error {
	p.Status = &sentry_common_service.TSentryResponseStatus{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *TRenamePrivilegesResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TRenamePrivilegesResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TRenamePrivilegesResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *TRenamePrivilegesResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TRenamePrivilegesResponse(%+v)", *p)
}

// Attributes:
//  - All
//  - Roles
type TSentryActiveRoleSet struct {
	All   bool            `thrift:"all,1,required" json:"all"`
	Roles map[string]bool `thrift:"roles,2,required" json:"roles"`
}

func NewTSentryActiveRoleSet() *TSentryActiveRoleSet {
	return &TSentryActiveRoleSet{}
}

func (p *TSentryActiveRoleSet) GetAll() bool {
	return p.All
}

func (p *TSentryActiveRoleSet) GetRoles() map[string]bool {
	return p.Roles
}
func (p *TSentryActiveRoleSet) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetAll bool = false
	var issetRoles bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetAll = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetRoles = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetAll {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field All is not set"))
	}
	if !issetRoles {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Roles is not set"))
	}
	return nil
}

func (p *TSentryActiveRoleSet) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.All = v
	}
	return nil
}

func (p *TSentryActiveRoleSet) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[string]bool, size)
	p.Roles = tSet
	for i := 0; i < size; i++ {
		var _elem9 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem9 = v
		}
		p.Roles[_elem9] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *TSentryActiveRoleSet) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TSentryActiveRoleSet"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TSentryActiveRoleSet) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("all", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:all: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.All)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.all (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:all: ", p), err)
	}
	return err
}

func (p *TSentryActiveRoleSet) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roles", thrift.SET, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:roles: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.STRING, len(p.Roles)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for v, _ := range p.Roles {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:roles: ", p), err)
	}
	return err
}

func (p *TSentryActiveRoleSet) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TSentryActiveRoleSet(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - Component
//  - ServiceName
//  - Groups
//  - RoleSet
//  - Authorizables
type TListSentryPrivilegesForProviderRequest struct {
	ProtocolVersion int32                 `thrift:"protocol_version,1,required" json:"protocol_version"`
	Component       string                `thrift:"component,2,required" json:"component"`
	ServiceName     string                `thrift:"serviceName,3,required" json:"serviceName"`
	Groups          map[string]bool       `thrift:"groups,4,required" json:"groups"`
	RoleSet         *TSentryActiveRoleSet `thrift:"roleSet,5,required" json:"roleSet"`
	Authorizables   []*TAuthorizable      `thrift:"authorizables,6" json:"authorizables,omitempty"`
}

func NewTListSentryPrivilegesForProviderRequest() *TListSentryPrivilegesForProviderRequest {
	return &TListSentryPrivilegesForProviderRequest{
		ProtocolVersion: 2,
	}
}

func (p *TListSentryPrivilegesForProviderRequest) GetProtocolVersion() int32 {
	return p.ProtocolVersion
}

func (p *TListSentryPrivilegesForProviderRequest) GetComponent() string {
	return p.Component
}

func (p *TListSentryPrivilegesForProviderRequest) GetServiceName() string {
	return p.ServiceName
}

func (p *TListSentryPrivilegesForProviderRequest) GetGroups() map[string]bool {
	return p.Groups
}

var TListSentryPrivilegesForProviderRequest_RoleSet_DEFAULT *TSentryActiveRoleSet

func (p *TListSentryPrivilegesForProviderRequest) GetRoleSet() *TSentryActiveRoleSet {
	if !p.IsSetRoleSet() {
		return TListSentryPrivilegesForProviderRequest_RoleSet_DEFAULT
	}
	return p.RoleSet
}

var TListSentryPrivilegesForProviderRequest_Authorizables_DEFAULT []*TAuthorizable

func (p *TListSentryPrivilegesForProviderRequest) GetAuthorizables() []*TAuthorizable {
	return p.Authorizables
}
func (p *TListSentryPrivilegesForProviderRequest) IsSetRoleSet() bool {
	return p.RoleSet != nil
}

func (p *TListSentryPrivilegesForProviderRequest) IsSetAuthorizables() bool {
	return p.Authorizables != nil
}

func (p *TListSentryPrivilegesForProviderRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetProtocolVersion bool = false
	var issetComponent bool = false
	var issetServiceName bool = false
	var issetGroups bool = false
	var issetRoleSet bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetProtocolVersion = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetComponent = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetServiceName = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetGroups = true
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
			issetRoleSet = true
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetProtocolVersion {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"))
	}
	if !issetComponent {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Component is not set"))
	}
	if !issetServiceName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ServiceName is not set"))
	}
	if !issetGroups {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Groups is not set"))
	}
	if !issetRoleSet {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoleSet is not set"))
	}
	return nil
}

func (p *TListSentryPrivilegesForProviderRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ProtocolVersion = v
	}
	return nil
}

func (p *TListSentryPrivilegesForProviderRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Component = v
	}
	return nil
}

func (p *TListSentryPrivilegesForProviderRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ServiceName = v
	}
	return nil
}

func (p *TListSentryPrivilegesForProviderRequest) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[string]bool, size)
	p.Groups = tSet
	for i := 0; i < size; i++ {
		var _elem10 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem10 = v
		}
		p.Groups[_elem10] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *TListSentryPrivilegesForProviderRequest) readField5(iprot thrift.TProtocol) error {
	p.RoleSet = &TSentryActiveRoleSet{}
	if err := p.RoleSet.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RoleSet), err)
	}
	return nil
}

func (p *TListSentryPrivilegesForProviderRequest) readField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TAuthorizable, 0, size)
	p.Authorizables = tSlice
	for i := 0; i < size; i++ {
		_elem11 := &TAuthorizable{}
		if err := _elem11.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem11), err)
		}
		p.Authorizables = append(p.Authorizables, _elem11)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TListSentryPrivilegesForProviderRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TListSentryPrivilegesForProviderRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TListSentryPrivilegesForProviderRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err)
	}
	return err
}

func (p *TListSentryPrivilegesForProviderRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("component", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:component: ", p), err)
	}
	if err := oprot.WriteString(string(p.Component)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.component (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:component: ", p), err)
	}
	return err
}

func (p *TListSentryPrivilegesForProviderRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("serviceName", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:serviceName: ", p), err)
	}
	if err := oprot.WriteString(string(p.ServiceName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.serviceName (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:serviceName: ", p), err)
	}
	return err
}

func (p *TListSentryPrivilegesForProviderRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groups", thrift.SET, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:groups: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.STRING, len(p.Groups)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for v, _ := range p.Groups {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:groups: ", p), err)
	}
	return err
}

func (p *TListSentryPrivilegesForProviderRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roleSet", thrift.STRUCT, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:roleSet: ", p), err)
	}
	if err := p.RoleSet.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RoleSet), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:roleSet: ", p), err)
	}
	return err
}

func (p *TListSentryPrivilegesForProviderRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthorizables() {
		if err := oprot.WriteFieldBegin("authorizables", thrift.LIST, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:authorizables: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Authorizables)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Authorizables {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:authorizables: ", p), err)
		}
	}
	return err
}

func (p *TListSentryPrivilegesForProviderRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TListSentryPrivilegesForProviderRequest(%+v)", *p)
}

// Attributes:
//  - Status
//  - Privileges
type TListSentryPrivilegesForProviderResponse struct {
	Status     *sentry_common_service.TSentryResponseStatus `thrift:"status,1,required" json:"status"`
	Privileges map[string]bool                              `thrift:"privileges,2,required" json:"privileges"`
}

func NewTListSentryPrivilegesForProviderResponse() *TListSentryPrivilegesForProviderResponse {
	return &TListSentryPrivilegesForProviderResponse{}
}

var TListSentryPrivilegesForProviderResponse_Status_DEFAULT sentry_common_service.TSentryResponseStatus

func (p *TListSentryPrivilegesForProviderResponse) GetStatus() sentry_common_service.TSentryResponseStatus {
	if !p.IsSetStatus() {
		return TListSentryPrivilegesForProviderResponse_Status_DEFAULT
	}
	return *p.Status
}

func (p *TListSentryPrivilegesForProviderResponse) GetPrivileges() map[string]bool {
	return p.Privileges
}
func (p *TListSentryPrivilegesForProviderResponse) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TListSentryPrivilegesForProviderResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false
	var issetPrivileges bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetStatus = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetPrivileges = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	if !issetPrivileges {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Privileges is not set"))
	}
	return nil
}

func (p *TListSentryPrivilegesForProviderResponse) readField1(iprot thrift.TProtocol) error {
	p.Status = &sentry_common_service.TSentryResponseStatus{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *TListSentryPrivilegesForProviderResponse) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[string]bool, size)
	p.Privileges = tSet
	for i := 0; i < size; i++ {
		var _elem12 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem12 = v
		}
		p.Privileges[_elem12] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *TListSentryPrivilegesForProviderResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TListSentryPrivilegesForProviderResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TListSentryPrivilegesForProviderResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *TListSentryPrivilegesForProviderResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privileges", thrift.SET, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:privileges: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.STRING, len(p.Privileges)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for v, _ := range p.Privileges {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:privileges: ", p), err)
	}
	return err
}

func (p *TListSentryPrivilegesForProviderResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TListSentryPrivilegesForProviderResponse(%+v)", *p)
}

// Attributes:
//  - PrivilegeMap
type TSentryPrivilegeMap struct {
	PrivilegeMap map[string]map[*TSentryPrivilege]bool `thrift:"privilegeMap,1,required" json:"privilegeMap"`
}

func NewTSentryPrivilegeMap() *TSentryPrivilegeMap {
	return &TSentryPrivilegeMap{}
}

func (p *TSentryPrivilegeMap) GetPrivilegeMap() map[string]map[*TSentryPrivilege]bool {
	return p.PrivilegeMap
}
func (p *TSentryPrivilegeMap) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetPrivilegeMap bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetPrivilegeMap = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetPrivilegeMap {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PrivilegeMap is not set"))
	}
	return nil
}

func (p *TSentryPrivilegeMap) readField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]map[*TSentryPrivilege]bool, size)
	p.PrivilegeMap = tMap
	for i := 0; i < size; i++ {
		var _key13 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key13 = v
		}
		_, size, err := iprot.ReadSetBegin()
		if err != nil {
			return thrift.PrependError("error reading set begin: ", err)
		}
		tSet := make(map[*TSentryPrivilege]bool, size)
		_val14 := tSet
		for i := 0; i < size; i++ {
			_elem15 := &TSentryPrivilege{
				GrantOption: 0,
			}
			if err := _elem15.Read(iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem15), err)
			}
			_val14[_elem15] = true
		}
		if err := iprot.ReadSetEnd(); err != nil {
			return thrift.PrependError("error reading set end: ", err)
		}
		p.PrivilegeMap[_key13] = _val14
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TSentryPrivilegeMap) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TSentryPrivilegeMap"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TSentryPrivilegeMap) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privilegeMap", thrift.MAP, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:privilegeMap: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.SET, len(p.PrivilegeMap)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.PrivilegeMap {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteSetBegin(thrift.STRUCT, len(v)); err != nil {
			return thrift.PrependError("error writing set begin: ", err)
		}
		for v, _ := range v {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return thrift.PrependError("error writing set end: ", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:privilegeMap: ", p), err)
	}
	return err
}

func (p *TSentryPrivilegeMap) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TSentryPrivilegeMap(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - Component
//  - ServiceName
//  - AuthorizablesSet
//  - Groups
//  - RoleSet
type TListSentryPrivilegesByAuthRequest struct {
	ProtocolVersion   int32                 `thrift:"protocol_version,1,required" json:"protocol_version"`
	RequestorUserName string                `thrift:"requestorUserName,2,required" json:"requestorUserName"`
	Component         string                `thrift:"component,3,required" json:"component"`
	ServiceName       string                `thrift:"serviceName,4,required" json:"serviceName"`
	AuthorizablesSet  map[string]bool       `thrift:"authorizablesSet,5,required" json:"authorizablesSet"`
	Groups            map[string]bool       `thrift:"groups,6" json:"groups,omitempty"`
	RoleSet           *TSentryActiveRoleSet `thrift:"roleSet,7" json:"roleSet,omitempty"`
}

func NewTListSentryPrivilegesByAuthRequest() *TListSentryPrivilegesByAuthRequest {
	return &TListSentryPrivilegesByAuthRequest{
		ProtocolVersion: 2,
	}
}

func (p *TListSentryPrivilegesByAuthRequest) GetProtocolVersion() int32 {
	return p.ProtocolVersion
}

func (p *TListSentryPrivilegesByAuthRequest) GetRequestorUserName() string {
	return p.RequestorUserName
}

func (p *TListSentryPrivilegesByAuthRequest) GetComponent() string {
	return p.Component
}

func (p *TListSentryPrivilegesByAuthRequest) GetServiceName() string {
	return p.ServiceName
}

func (p *TListSentryPrivilegesByAuthRequest) GetAuthorizablesSet() map[string]bool {
	return p.AuthorizablesSet
}

var TListSentryPrivilegesByAuthRequest_Groups_DEFAULT map[string]bool

func (p *TListSentryPrivilegesByAuthRequest) GetGroups() map[string]bool {
	return p.Groups
}

var TListSentryPrivilegesByAuthRequest_RoleSet_DEFAULT *TSentryActiveRoleSet

func (p *TListSentryPrivilegesByAuthRequest) GetRoleSet() *TSentryActiveRoleSet {
	if !p.IsSetRoleSet() {
		return TListSentryPrivilegesByAuthRequest_RoleSet_DEFAULT
	}
	return p.RoleSet
}
func (p *TListSentryPrivilegesByAuthRequest) IsSetGroups() bool {
	return p.Groups != nil
}

func (p *TListSentryPrivilegesByAuthRequest) IsSetRoleSet() bool {
	return p.RoleSet != nil
}

func (p *TListSentryPrivilegesByAuthRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetProtocolVersion bool = false
	var issetRequestorUserName bool = false
	var issetComponent bool = false
	var issetServiceName bool = false
	var issetAuthorizablesSet bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetProtocolVersion = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetRequestorUserName = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetComponent = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetServiceName = true
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
			issetAuthorizablesSet = true
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetProtocolVersion {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"))
	}
	if !issetRequestorUserName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"))
	}
	if !issetComponent {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Component is not set"))
	}
	if !issetServiceName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ServiceName is not set"))
	}
	if !issetAuthorizablesSet {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthorizablesSet is not set"))
	}
	return nil
}

func (p *TListSentryPrivilegesByAuthRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ProtocolVersion = v
	}
	return nil
}

func (p *TListSentryPrivilegesByAuthRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RequestorUserName = v
	}
	return nil
}

func (p *TListSentryPrivilegesByAuthRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Component = v
	}
	return nil
}

func (p *TListSentryPrivilegesByAuthRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ServiceName = v
	}
	return nil
}

func (p *TListSentryPrivilegesByAuthRequest) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[string]bool, size)
	p.AuthorizablesSet = tSet
	for i := 0; i < size; i++ {
		var _elem16 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem16 = v
		}
		p.AuthorizablesSet[_elem16] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *TListSentryPrivilegesByAuthRequest) readField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[string]bool, size)
	p.Groups = tSet
	for i := 0; i < size; i++ {
		var _elem17 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem17 = v
		}
		p.Groups[_elem17] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *TListSentryPrivilegesByAuthRequest) readField7(iprot thrift.TProtocol) error {
	p.RoleSet = &TSentryActiveRoleSet{}
	if err := p.RoleSet.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RoleSet), err)
	}
	return nil
}

func (p *TListSentryPrivilegesByAuthRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TListSentryPrivilegesByAuthRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TListSentryPrivilegesByAuthRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err)
	}
	return err
}

func (p *TListSentryPrivilegesByAuthRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err)
	}
	if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err)
	}
	return err
}

func (p *TListSentryPrivilegesByAuthRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("component", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:component: ", p), err)
	}
	if err := oprot.WriteString(string(p.Component)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.component (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:component: ", p), err)
	}
	return err
}

func (p *TListSentryPrivilegesByAuthRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("serviceName", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:serviceName: ", p), err)
	}
	if err := oprot.WriteString(string(p.ServiceName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.serviceName (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:serviceName: ", p), err)
	}
	return err
}

func (p *TListSentryPrivilegesByAuthRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authorizablesSet", thrift.SET, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:authorizablesSet: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.STRING, len(p.AuthorizablesSet)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for v, _ := range p.AuthorizablesSet {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:authorizablesSet: ", p), err)
	}
	return err
}

func (p *TListSentryPrivilegesByAuthRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroups() {
		if err := oprot.WriteFieldBegin("groups", thrift.SET, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:groups: ", p), err)
		}
		if err := oprot.WriteSetBegin(thrift.STRING, len(p.Groups)); err != nil {
			return thrift.PrependError("error writing set begin: ", err)
		}
		for v, _ := range p.Groups {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return thrift.PrependError("error writing set end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:groups: ", p), err)
		}
	}
	return err
}

func (p *TListSentryPrivilegesByAuthRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetRoleSet() {
		if err := oprot.WriteFieldBegin("roleSet", thrift.STRUCT, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:roleSet: ", p), err)
		}
		if err := p.RoleSet.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RoleSet), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:roleSet: ", p), err)
		}
	}
	return err
}

func (p *TListSentryPrivilegesByAuthRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TListSentryPrivilegesByAuthRequest(%+v)", *p)
}

// Attributes:
//  - Status
//  - PrivilegesMapByAuth
type TListSentryPrivilegesByAuthResponse struct {
	Status              *sentry_common_service.TSentryResponseStatus `thrift:"status,1,required" json:"status"`
	PrivilegesMapByAuth map[string]*TSentryPrivilegeMap              `thrift:"privilegesMapByAuth,2" json:"privilegesMapByAuth,omitempty"`
}

func NewTListSentryPrivilegesByAuthResponse() *TListSentryPrivilegesByAuthResponse {
	return &TListSentryPrivilegesByAuthResponse{}
}

var TListSentryPrivilegesByAuthResponse_Status_DEFAULT *sentry_common_service.TSentryResponseStatus

func (p *TListSentryPrivilegesByAuthResponse) GetStatus() *sentry_common_service.TSentryResponseStatus {
	if !p.IsSetStatus() {
		return TListSentryPrivilegesByAuthResponse_Status_DEFAULT
	}
	return p.Status
}

var TListSentryPrivilegesByAuthResponse_PrivilegesMapByAuth_DEFAULT map[string]*TSentryPrivilegeMap

func (p *TListSentryPrivilegesByAuthResponse) GetPrivilegesMapByAuth() map[string]*TSentryPrivilegeMap {
	return p.PrivilegesMapByAuth
}
func (p *TListSentryPrivilegesByAuthResponse) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TListSentryPrivilegesByAuthResponse) IsSetPrivilegesMapByAuth() bool {
	return p.PrivilegesMapByAuth != nil
}

func (p *TListSentryPrivilegesByAuthResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetStatus = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	return nil
}

func (p *TListSentryPrivilegesByAuthResponse) readField1(iprot thrift.TProtocol) error {
	p.Status = &sentry_common_service.TSentryResponseStatus{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *TListSentryPrivilegesByAuthResponse) readField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]*TSentryPrivilegeMap, size)
	p.PrivilegesMapByAuth = tMap
	for i := 0; i < size; i++ {
		var _key18 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key18 = v
		}
		_val19 := &TSentryPrivilegeMap{}
		if err := _val19.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val19), err)
		}
		p.PrivilegesMapByAuth[_key18] = _val19
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TListSentryPrivilegesByAuthResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TListSentryPrivilegesByAuthResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TListSentryPrivilegesByAuthResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *TListSentryPrivilegesByAuthResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrivilegesMapByAuth() {
		if err := oprot.WriteFieldBegin("privilegesMapByAuth", thrift.MAP, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:privilegesMapByAuth: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.PrivilegesMapByAuth)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.PrivilegesMapByAuth {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:privilegesMapByAuth: ", p), err)
		}
	}
	return err
}

func (p *TListSentryPrivilegesByAuthResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TListSentryPrivilegesByAuthResponse(%+v)", *p)
}
