// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package sentry_policy_service

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"github.com/akolb1/sentrytool/sentryapi/thrift/sentry_common_service"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = sentry_common_service.GoUnusedProtection__
var GoUnusedProtection__ int

type TSentryGrantOption int64

const (
	TSentryGrantOption_TRUE  TSentryGrantOption = 1
	TSentryGrantOption_FALSE TSentryGrantOption = 0
	TSentryGrantOption_UNSET TSentryGrantOption = -1
)

func (p TSentryGrantOption) String() string {
	switch p {
	case TSentryGrantOption_TRUE:
		return "TRUE"
	case TSentryGrantOption_FALSE:
		return "FALSE"
	case TSentryGrantOption_UNSET:
		return "UNSET"
	}
	return "<UNSET>"
}

func TSentryGrantOptionFromString(s string) (TSentryGrantOption, error) {
	switch s {
	case "TRUE":
		return TSentryGrantOption_TRUE, nil
	case "FALSE":
		return TSentryGrantOption_FALSE, nil
	case "UNSET":
		return TSentryGrantOption_UNSET, nil
	}
	return TSentryGrantOption(0), fmt.Errorf("not a valid TSentryGrantOption string")
}

func TSentryGrantOptionPtr(v TSentryGrantOption) *TSentryGrantOption { return &v }

func (p TSentryGrantOption) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TSentryGrantOption) UnmarshalText(text []byte) error {
	q, err := TSentryGrantOptionFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

// Attributes:
//  - PrivilegeScope
//  - ServerName
//  - DbName
//  - TableName
//  - URI
//  - Action
//  - CreateTime
//  - GrantOption
//  - ColumnName
type TSentryPrivilege struct {
	PrivilegeScope string `thrift:"privilegeScope,1,required" json:"privilegeScope"`
	// unused field # 2
	ServerName  string             `thrift:"serverName,3,required" json:"serverName"`
	DbName      string             `thrift:"dbName,4" json:"dbName,omitempty"`
	TableName   string             `thrift:"tableName,5" json:"tableName,omitempty"`
	URI         string             `thrift:"URI,6" json:"URI,omitempty"`
	Action      string             `thrift:"action,7,required" json:"action"`
	CreateTime  *int64             `thrift:"createTime,8" json:"createTime,omitempty"`
	GrantOption TSentryGrantOption `thrift:"grantOption,9" json:"grantOption,omitempty"`
	ColumnName  string             `thrift:"columnName,10" json:"columnName,omitempty"`
}

func NewTSentryPrivilege() *TSentryPrivilege {
	return &TSentryPrivilege{
		GrantOption: 0,
	}
}

func (p *TSentryPrivilege) GetPrivilegeScope() string {
	return p.PrivilegeScope
}

func (p *TSentryPrivilege) GetServerName() string {
	return p.ServerName
}

var TSentryPrivilege_DbName_DEFAULT string = ""

func (p *TSentryPrivilege) GetDbName() string {
	return p.DbName
}

var TSentryPrivilege_TableName_DEFAULT string = ""

func (p *TSentryPrivilege) GetTableName() string {
	return p.TableName
}

var TSentryPrivilege_URI_DEFAULT string = ""

func (p *TSentryPrivilege) GetURI() string {
	return p.URI
}

func (p *TSentryPrivilege) GetAction() string {
	return p.Action
}

var TSentryPrivilege_CreateTime_DEFAULT int64

func (p *TSentryPrivilege) GetCreateTime() int64 {
	if !p.IsSetCreateTime() {
		return TSentryPrivilege_CreateTime_DEFAULT
	}
	return *p.CreateTime
}

var TSentryPrivilege_GrantOption_DEFAULT TSentryGrantOption = 0

func (p *TSentryPrivilege) GetGrantOption() TSentryGrantOption {
	return p.GrantOption
}

var TSentryPrivilege_ColumnName_DEFAULT string = ""

func (p *TSentryPrivilege) GetColumnName() string {
	return p.ColumnName
}
func (p *TSentryPrivilege) IsSetDbName() bool {
	return p.DbName != TSentryPrivilege_DbName_DEFAULT
}

func (p *TSentryPrivilege) IsSetTableName() bool {
	return p.TableName != TSentryPrivilege_TableName_DEFAULT
}

func (p *TSentryPrivilege) IsSetURI() bool {
	return p.URI != TSentryPrivilege_URI_DEFAULT
}

func (p *TSentryPrivilege) IsSetCreateTime() bool {
	return p.CreateTime != nil
}

func (p *TSentryPrivilege) IsSetGrantOption() bool {
	return p.GrantOption != TSentryPrivilege_GrantOption_DEFAULT
}

func (p *TSentryPrivilege) IsSetColumnName() bool {
	return p.ColumnName != TSentryPrivilege_ColumnName_DEFAULT
}

func (p *TSentryPrivilege) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetPrivilegeScope bool = false
	var issetServerName bool = false
	var issetAction bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetPrivilegeScope = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetServerName = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
			issetAction = true
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetPrivilegeScope {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PrivilegeScope is not set"))
	}
	if !issetServerName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ServerName is not set"))
	}
	if !issetAction {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Action is not set"))
	}
	return nil
}

func (p *TSentryPrivilege) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.PrivilegeScope = v
	}
	return nil
}

func (p *TSentryPrivilege) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ServerName = v
	}
	return nil
}

func (p *TSentryPrivilege) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *TSentryPrivilege) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *TSentryPrivilege) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.URI = v
	}
	return nil
}

func (p *TSentryPrivilege) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Action = v
	}
	return nil
}

func (p *TSentryPrivilege) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.CreateTime = &v
	}
	return nil
}

func (p *TSentryPrivilege) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		temp := TSentryGrantOption(v)
		p.GrantOption = temp
	}
	return nil
}

func (p *TSentryPrivilege) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.ColumnName = v
	}
	return nil
}

func (p *TSentryPrivilege) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TSentryPrivilege"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TSentryPrivilege) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privilegeScope", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:privilegeScope: ", p), err)
	}
	if err := oprot.WriteString(string(p.PrivilegeScope)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.privilegeScope (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:privilegeScope: ", p), err)
	}
	return err
}

func (p *TSentryPrivilege) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("serverName", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:serverName: ", p), err)
	}
	if err := oprot.WriteString(string(p.ServerName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.serverName (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:serverName: ", p), err)
	}
	return err
}

func (p *TSentryPrivilege) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDbName() {
		if err := oprot.WriteFieldBegin("dbName", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:dbName: ", p), err)
		}
		if err := oprot.WriteString(string(p.DbName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.dbName (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:dbName: ", p), err)
		}
	}
	return err
}

func (p *TSentryPrivilege) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableName() {
		if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:tableName: ", p), err)
		}
		if err := oprot.WriteString(string(p.TableName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.tableName (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:tableName: ", p), err)
		}
	}
	return err
}

func (p *TSentryPrivilege) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetURI() {
		if err := oprot.WriteFieldBegin("URI", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:URI: ", p), err)
		}
		if err := oprot.WriteString(string(p.URI)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.URI (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:URI: ", p), err)
		}
	}
	return err
}

func (p *TSentryPrivilege) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("action", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:action: ", p), err)
	}
	if err := oprot.WriteString(string(p.Action)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.action (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:action: ", p), err)
	}
	return err
}

func (p *TSentryPrivilege) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreateTime() {
		if err := oprot.WriteFieldBegin("createTime", thrift.I64, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:createTime: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.CreateTime)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.createTime (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:createTime: ", p), err)
		}
	}
	return err
}

func (p *TSentryPrivilege) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetGrantOption() {
		if err := oprot.WriteFieldBegin("grantOption", thrift.I32, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:grantOption: ", p), err)
		}
		if err := oprot.WriteI32(int32(p.GrantOption)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.grantOption (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:grantOption: ", p), err)
		}
	}
	return err
}

func (p *TSentryPrivilege) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumnName() {
		if err := oprot.WriteFieldBegin("columnName", thrift.STRING, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:columnName: ", p), err)
		}
		if err := oprot.WriteString(string(p.ColumnName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.columnName (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:columnName: ", p), err)
		}
	}
	return err
}

func (p *TSentryPrivilege) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TSentryPrivilege(%+v)", *p)
}

// Attributes:
//  - GroupName
type TSentryGroup struct {
	GroupName string `thrift:"groupName,1,required" json:"groupName"`
}

func NewTSentryGroup() *TSentryGroup {
	return &TSentryGroup{}
}

func (p *TSentryGroup) GetGroupName() string {
	return p.GroupName
}
func (p *TSentryGroup) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetGroupName bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetGroupName = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetGroupName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GroupName is not set"))
	}
	return nil
}

func (p *TSentryGroup) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.GroupName = v
	}
	return nil
}

func (p *TSentryGroup) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TSentryGroup"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TSentryGroup) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:groupName: ", p), err)
	}
	if err := oprot.WriteString(string(p.GroupName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:groupName: ", p), err)
	}
	return err
}

func (p *TSentryGroup) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TSentryGroup(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - RoleName
type TCreateSentryRoleRequest struct {
	ProtocolVersion   int32  `thrift:"protocol_version,1,required" json:"protocol_version"`
	RequestorUserName string `thrift:"requestorUserName,2,required" json:"requestorUserName"`
	RoleName          string `thrift:"roleName,3,required" json:"roleName"`
}

func NewTCreateSentryRoleRequest() *TCreateSentryRoleRequest {
	return &TCreateSentryRoleRequest{
		ProtocolVersion: 2,
	}
}

func (p *TCreateSentryRoleRequest) GetProtocolVersion() int32 {
	return p.ProtocolVersion
}

func (p *TCreateSentryRoleRequest) GetRequestorUserName() string {
	return p.RequestorUserName
}

func (p *TCreateSentryRoleRequest) GetRoleName() string {
	return p.RoleName
}
func (p *TCreateSentryRoleRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetProtocolVersion bool = false
	var issetRequestorUserName bool = false
	var issetRoleName bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetProtocolVersion = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetRequestorUserName = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetRoleName = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetProtocolVersion {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"))
	}
	if !issetRequestorUserName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"))
	}
	if !issetRoleName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoleName is not set"))
	}
	return nil
}

func (p *TCreateSentryRoleRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ProtocolVersion = v
	}
	return nil
}

func (p *TCreateSentryRoleRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RequestorUserName = v
	}
	return nil
}

func (p *TCreateSentryRoleRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.RoleName = v
	}
	return nil
}

func (p *TCreateSentryRoleRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TCreateSentryRoleRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCreateSentryRoleRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err)
	}
	return err
}

func (p *TCreateSentryRoleRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err)
	}
	if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err)
	}
	return err
}

func (p *TCreateSentryRoleRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roleName", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roleName: ", p), err)
	}
	if err := oprot.WriteString(string(p.RoleName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.roleName (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roleName: ", p), err)
	}
	return err
}

func (p *TCreateSentryRoleRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCreateSentryRoleRequest(%+v)", *p)
}

// Attributes:
//  - Status
type TCreateSentryRoleResponse struct {
	Status *sentry_common_service.TSentryResponseStatus `thrift:"status,1,required" json:"status"`
}

func NewTCreateSentryRoleResponse() *TCreateSentryRoleResponse {
	return &TCreateSentryRoleResponse{}
}

var TCreateSentryRoleResponse_Status_DEFAULT *sentry_common_service.TSentryResponseStatus

func (p *TCreateSentryRoleResponse) GetStatus() *sentry_common_service.TSentryResponseStatus {
	if !p.IsSetStatus() {
		return TCreateSentryRoleResponse_Status_DEFAULT
	}
	return p.Status
}
func (p *TCreateSentryRoleResponse) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TCreateSentryRoleResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetStatus = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	return nil
}

func (p *TCreateSentryRoleResponse) readField1(iprot thrift.TProtocol) error {
	p.Status = &sentry_common_service.TSentryResponseStatus{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *TCreateSentryRoleResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TCreateSentryRoleResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCreateSentryRoleResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *TCreateSentryRoleResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCreateSentryRoleResponse(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - RoleName
type TDropSentryRoleRequest struct {
	ProtocolVersion   int32  `thrift:"protocol_version,1,required" json:"protocol_version"`
	RequestorUserName string `thrift:"requestorUserName,2,required" json:"requestorUserName"`
	RoleName          string `thrift:"roleName,3,required" json:"roleName"`
}

func NewTDropSentryRoleRequest() *TDropSentryRoleRequest {
	return &TDropSentryRoleRequest{
		ProtocolVersion: 2,
	}
}

func (p *TDropSentryRoleRequest) GetProtocolVersion() int32 {
	return p.ProtocolVersion
}

func (p *TDropSentryRoleRequest) GetRequestorUserName() string {
	return p.RequestorUserName
}

func (p *TDropSentryRoleRequest) GetRoleName() string {
	return p.RoleName
}
func (p *TDropSentryRoleRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetProtocolVersion bool = false
	var issetRequestorUserName bool = false
	var issetRoleName bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetProtocolVersion = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetRequestorUserName = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetRoleName = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetProtocolVersion {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"))
	}
	if !issetRequestorUserName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"))
	}
	if !issetRoleName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoleName is not set"))
	}
	return nil
}

func (p *TDropSentryRoleRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ProtocolVersion = v
	}
	return nil
}

func (p *TDropSentryRoleRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RequestorUserName = v
	}
	return nil
}

func (p *TDropSentryRoleRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.RoleName = v
	}
	return nil
}

func (p *TDropSentryRoleRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TDropSentryRoleRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TDropSentryRoleRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err)
	}
	return err
}

func (p *TDropSentryRoleRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err)
	}
	if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err)
	}
	return err
}

func (p *TDropSentryRoleRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roleName", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roleName: ", p), err)
	}
	if err := oprot.WriteString(string(p.RoleName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.roleName (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roleName: ", p), err)
	}
	return err
}

func (p *TDropSentryRoleRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDropSentryRoleRequest(%+v)", *p)
}

// Attributes:
//  - Status
type TDropSentryRoleResponse struct {
	Status *sentry_common_service.TSentryResponseStatus `thrift:"status,1,required" json:"status"`
}

func NewTDropSentryRoleResponse() *TDropSentryRoleResponse {
	return &TDropSentryRoleResponse{}
}

var TDropSentryRoleResponse_Status_DEFAULT *sentry_common_service.TSentryResponseStatus

func (p *TDropSentryRoleResponse) GetStatus() *sentry_common_service.TSentryResponseStatus {
	if !p.IsSetStatus() {
		return TDropSentryRoleResponse_Status_DEFAULT
	}
	return p.Status
}
func (p *TDropSentryRoleResponse) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TDropSentryRoleResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetStatus = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	return nil
}

func (p *TDropSentryRoleResponse) readField1(iprot thrift.TProtocol) error {
	p.Status = &sentry_common_service.TSentryResponseStatus{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *TDropSentryRoleResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TDropSentryRoleResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TDropSentryRoleResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *TDropSentryRoleResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDropSentryRoleResponse(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - RoleName
//  - Groups
type TAlterSentryRoleAddGroupsRequest struct {
	ProtocolVersion   int32  `thrift:"protocol_version,1,required" json:"protocol_version"`
	RequestorUserName string `thrift:"requestorUserName,2,required" json:"requestorUserName"`
	RoleName          string `thrift:"roleName,3,required" json:"roleName"`
	// unused field # 4
	Groups map[*TSentryGroup]bool `thrift:"groups,5,required" json:"groups"`
}

func NewTAlterSentryRoleAddGroupsRequest() *TAlterSentryRoleAddGroupsRequest {
	return &TAlterSentryRoleAddGroupsRequest{
		ProtocolVersion: 2,
	}
}

func (p *TAlterSentryRoleAddGroupsRequest) GetProtocolVersion() int32 {
	return p.ProtocolVersion
}

func (p *TAlterSentryRoleAddGroupsRequest) GetRequestorUserName() string {
	return p.RequestorUserName
}

func (p *TAlterSentryRoleAddGroupsRequest) GetRoleName() string {
	return p.RoleName
}

func (p *TAlterSentryRoleAddGroupsRequest) GetGroups() map[*TSentryGroup]bool {
	return p.Groups
}
func (p *TAlterSentryRoleAddGroupsRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetProtocolVersion bool = false
	var issetRequestorUserName bool = false
	var issetRoleName bool = false
	var issetGroups bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetProtocolVersion = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetRequestorUserName = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetRoleName = true
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
			issetGroups = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetProtocolVersion {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"))
	}
	if !issetRequestorUserName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"))
	}
	if !issetRoleName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoleName is not set"))
	}
	if !issetGroups {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Groups is not set"))
	}
	return nil
}

func (p *TAlterSentryRoleAddGroupsRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ProtocolVersion = v
	}
	return nil
}

func (p *TAlterSentryRoleAddGroupsRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RequestorUserName = v
	}
	return nil
}

func (p *TAlterSentryRoleAddGroupsRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.RoleName = v
	}
	return nil
}

func (p *TAlterSentryRoleAddGroupsRequest) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[*TSentryGroup]bool, size)
	p.Groups = tSet
	for i := 0; i < size; i++ {
		_elem0 := &TSentryGroup{}
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.Groups[_elem0] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *TAlterSentryRoleAddGroupsRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TAlterSentryRoleAddGroupsRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TAlterSentryRoleAddGroupsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleAddGroupsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err)
	}
	if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleAddGroupsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roleName", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roleName: ", p), err)
	}
	if err := oprot.WriteString(string(p.RoleName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.roleName (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roleName: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleAddGroupsRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groups", thrift.SET, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:groups: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.STRUCT, len(p.Groups)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for v, _ := range p.Groups {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:groups: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleAddGroupsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAlterSentryRoleAddGroupsRequest(%+v)", *p)
}

// Attributes:
//  - Status
type TAlterSentryRoleAddGroupsResponse struct {
	Status *sentry_common_service.TSentryResponseStatus `thrift:"status,1,required" json:"status"`
}

func NewTAlterSentryRoleAddGroupsResponse() *TAlterSentryRoleAddGroupsResponse {
	return &TAlterSentryRoleAddGroupsResponse{}
}

var TAlterSentryRoleAddGroupsResponse_Status_DEFAULT *sentry_common_service.TSentryResponseStatus

func (p *TAlterSentryRoleAddGroupsResponse) GetStatus() *sentry_common_service.TSentryResponseStatus {
	if !p.IsSetStatus() {
		return TAlterSentryRoleAddGroupsResponse_Status_DEFAULT
	}
	return p.Status
}
func (p *TAlterSentryRoleAddGroupsResponse) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TAlterSentryRoleAddGroupsResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetStatus = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	return nil
}

func (p *TAlterSentryRoleAddGroupsResponse) readField1(iprot thrift.TProtocol) error {
	p.Status = &sentry_common_service.TSentryResponseStatus{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *TAlterSentryRoleAddGroupsResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TAlterSentryRoleAddGroupsResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TAlterSentryRoleAddGroupsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleAddGroupsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAlterSentryRoleAddGroupsResponse(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - RoleName
//  - Users
type TAlterSentryRoleAddUsersRequest struct {
	ProtocolVersion   int32           `thrift:"protocol_version,1,required" json:"protocol_version"`
	RequestorUserName string          `thrift:"requestorUserName,2,required" json:"requestorUserName"`
	RoleName          string          `thrift:"roleName,3,required" json:"roleName"`
	Users             map[string]bool `thrift:"users,4,required" json:"users"`
}

func NewTAlterSentryRoleAddUsersRequest() *TAlterSentryRoleAddUsersRequest {
	return &TAlterSentryRoleAddUsersRequest{
		ProtocolVersion: 1,
	}
}

func (p *TAlterSentryRoleAddUsersRequest) GetProtocolVersion() int32 {
	return p.ProtocolVersion
}

func (p *TAlterSentryRoleAddUsersRequest) GetRequestorUserName() string {
	return p.RequestorUserName
}

func (p *TAlterSentryRoleAddUsersRequest) GetRoleName() string {
	return p.RoleName
}

func (p *TAlterSentryRoleAddUsersRequest) GetUsers() map[string]bool {
	return p.Users
}
func (p *TAlterSentryRoleAddUsersRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetProtocolVersion bool = false
	var issetRequestorUserName bool = false
	var issetRoleName bool = false
	var issetUsers bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetProtocolVersion = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetRequestorUserName = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetRoleName = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetUsers = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetProtocolVersion {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"))
	}
	if !issetRequestorUserName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"))
	}
	if !issetRoleName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoleName is not set"))
	}
	if !issetUsers {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Users is not set"))
	}
	return nil
}

func (p *TAlterSentryRoleAddUsersRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ProtocolVersion = v
	}
	return nil
}

func (p *TAlterSentryRoleAddUsersRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RequestorUserName = v
	}
	return nil
}

func (p *TAlterSentryRoleAddUsersRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.RoleName = v
	}
	return nil
}

func (p *TAlterSentryRoleAddUsersRequest) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[string]bool, size)
	p.Users = tSet
	for i := 0; i < size; i++ {
		var _elem1 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem1 = v
		}
		p.Users[_elem1] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *TAlterSentryRoleAddUsersRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TAlterSentryRoleAddUsersRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TAlterSentryRoleAddUsersRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleAddUsersRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err)
	}
	if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleAddUsersRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roleName", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roleName: ", p), err)
	}
	if err := oprot.WriteString(string(p.RoleName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.roleName (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roleName: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleAddUsersRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("users", thrift.SET, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:users: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.STRING, len(p.Users)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for v, _ := range p.Users {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:users: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleAddUsersRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAlterSentryRoleAddUsersRequest(%+v)", *p)
}

// Attributes:
//  - Status
type TAlterSentryRoleAddUsersResponse struct {
	Status *sentry_common_service.TSentryResponseStatus `thrift:"status,1,required" json:"status"`
}

func NewTAlterSentryRoleAddUsersResponse() *TAlterSentryRoleAddUsersResponse {
	return &TAlterSentryRoleAddUsersResponse{}
}

var TAlterSentryRoleAddUsersResponse_Status_DEFAULT *sentry_common_service.TSentryResponseStatus

func (p *TAlterSentryRoleAddUsersResponse) GetStatus() *sentry_common_service.TSentryResponseStatus {
	if !p.IsSetStatus() {
		return TAlterSentryRoleAddUsersResponse_Status_DEFAULT
	}
	return p.Status
}
func (p *TAlterSentryRoleAddUsersResponse) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TAlterSentryRoleAddUsersResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetStatus = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	return nil
}

func (p *TAlterSentryRoleAddUsersResponse) readField1(iprot thrift.TProtocol) error {
	p.Status = &sentry_common_service.TSentryResponseStatus{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *TAlterSentryRoleAddUsersResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TAlterSentryRoleAddUsersResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TAlterSentryRoleAddUsersResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleAddUsersResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAlterSentryRoleAddUsersResponse(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - RoleName
//  - Groups
type TAlterSentryRoleDeleteGroupsRequest struct {
	ProtocolVersion   int32  `thrift:"protocol_version,1,required" json:"protocol_version"`
	RequestorUserName string `thrift:"requestorUserName,2,required" json:"requestorUserName"`
	RoleName          string `thrift:"roleName,3,required" json:"roleName"`
	// unused field # 4
	Groups map[*TSentryGroup]bool `thrift:"groups,5,required" json:"groups"`
}

func NewTAlterSentryRoleDeleteGroupsRequest() *TAlterSentryRoleDeleteGroupsRequest {
	return &TAlterSentryRoleDeleteGroupsRequest{
		ProtocolVersion: 2,
	}
}

func (p *TAlterSentryRoleDeleteGroupsRequest) GetProtocolVersion() int32 {
	return p.ProtocolVersion
}

func (p *TAlterSentryRoleDeleteGroupsRequest) GetRequestorUserName() string {
	return p.RequestorUserName
}

func (p *TAlterSentryRoleDeleteGroupsRequest) GetRoleName() string {
	return p.RoleName
}

func (p *TAlterSentryRoleDeleteGroupsRequest) GetGroups() map[*TSentryGroup]bool {
	return p.Groups
}
func (p *TAlterSentryRoleDeleteGroupsRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetProtocolVersion bool = false
	var issetRequestorUserName bool = false
	var issetRoleName bool = false
	var issetGroups bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetProtocolVersion = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetRequestorUserName = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetRoleName = true
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
			issetGroups = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetProtocolVersion {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"))
	}
	if !issetRequestorUserName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"))
	}
	if !issetRoleName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoleName is not set"))
	}
	if !issetGroups {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Groups is not set"))
	}
	return nil
}

func (p *TAlterSentryRoleDeleteGroupsRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ProtocolVersion = v
	}
	return nil
}

func (p *TAlterSentryRoleDeleteGroupsRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RequestorUserName = v
	}
	return nil
}

func (p *TAlterSentryRoleDeleteGroupsRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.RoleName = v
	}
	return nil
}

func (p *TAlterSentryRoleDeleteGroupsRequest) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[*TSentryGroup]bool, size)
	p.Groups = tSet
	for i := 0; i < size; i++ {
		_elem2 := &TSentryGroup{}
		if err := _elem2.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
		}
		p.Groups[_elem2] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *TAlterSentryRoleDeleteGroupsRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TAlterSentryRoleDeleteGroupsRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TAlterSentryRoleDeleteGroupsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleDeleteGroupsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err)
	}
	if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleDeleteGroupsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roleName", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roleName: ", p), err)
	}
	if err := oprot.WriteString(string(p.RoleName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.roleName (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roleName: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleDeleteGroupsRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groups", thrift.SET, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:groups: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.STRUCT, len(p.Groups)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for v, _ := range p.Groups {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:groups: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleDeleteGroupsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAlterSentryRoleDeleteGroupsRequest(%+v)", *p)
}

// Attributes:
//  - Status
type TAlterSentryRoleDeleteGroupsResponse struct {
	Status *sentry_common_service.TSentryResponseStatus `thrift:"status,1,required" json:"status"`
}

func NewTAlterSentryRoleDeleteGroupsResponse() *TAlterSentryRoleDeleteGroupsResponse {
	return &TAlterSentryRoleDeleteGroupsResponse{}
}

var TAlterSentryRoleDeleteGroupsResponse_Status_DEFAULT *sentry_common_service.TSentryResponseStatus

func (p *TAlterSentryRoleDeleteGroupsResponse) GetStatus() *sentry_common_service.TSentryResponseStatus {
	if !p.IsSetStatus() {
		return TAlterSentryRoleDeleteGroupsResponse_Status_DEFAULT
	}
	return p.Status
}
func (p *TAlterSentryRoleDeleteGroupsResponse) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TAlterSentryRoleDeleteGroupsResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetStatus = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	return nil
}

func (p *TAlterSentryRoleDeleteGroupsResponse) readField1(iprot thrift.TProtocol) error {
	p.Status = &sentry_common_service.TSentryResponseStatus{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *TAlterSentryRoleDeleteGroupsResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TAlterSentryRoleDeleteGroupsResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TAlterSentryRoleDeleteGroupsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleDeleteGroupsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAlterSentryRoleDeleteGroupsResponse(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - RoleName
//  - Users
type TAlterSentryRoleDeleteUsersRequest struct {
	ProtocolVersion   int32           `thrift:"protocol_version,1,required" json:"protocol_version"`
	RequestorUserName string          `thrift:"requestorUserName,2,required" json:"requestorUserName"`
	RoleName          string          `thrift:"roleName,3,required" json:"roleName"`
	Users             map[string]bool `thrift:"users,4,required" json:"users"`
}

func NewTAlterSentryRoleDeleteUsersRequest() *TAlterSentryRoleDeleteUsersRequest {
	return &TAlterSentryRoleDeleteUsersRequest{
		ProtocolVersion: 1,
	}
}

func (p *TAlterSentryRoleDeleteUsersRequest) GetProtocolVersion() int32 {
	return p.ProtocolVersion
}

func (p *TAlterSentryRoleDeleteUsersRequest) GetRequestorUserName() string {
	return p.RequestorUserName
}

func (p *TAlterSentryRoleDeleteUsersRequest) GetRoleName() string {
	return p.RoleName
}

func (p *TAlterSentryRoleDeleteUsersRequest) GetUsers() map[string]bool {
	return p.Users
}
func (p *TAlterSentryRoleDeleteUsersRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetProtocolVersion bool = false
	var issetRequestorUserName bool = false
	var issetRoleName bool = false
	var issetUsers bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetProtocolVersion = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetRequestorUserName = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetRoleName = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetUsers = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetProtocolVersion {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"))
	}
	if !issetRequestorUserName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"))
	}
	if !issetRoleName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoleName is not set"))
	}
	if !issetUsers {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Users is not set"))
	}
	return nil
}

func (p *TAlterSentryRoleDeleteUsersRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ProtocolVersion = v
	}
	return nil
}

func (p *TAlterSentryRoleDeleteUsersRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RequestorUserName = v
	}
	return nil
}

func (p *TAlterSentryRoleDeleteUsersRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.RoleName = v
	}
	return nil
}

func (p *TAlterSentryRoleDeleteUsersRequest) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[string]bool, size)
	p.Users = tSet
	for i := 0; i < size; i++ {
		var _elem3 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem3 = v
		}
		p.Users[_elem3] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *TAlterSentryRoleDeleteUsersRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TAlterSentryRoleDeleteUsersRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TAlterSentryRoleDeleteUsersRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleDeleteUsersRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err)
	}
	if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleDeleteUsersRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roleName", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roleName: ", p), err)
	}
	if err := oprot.WriteString(string(p.RoleName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.roleName (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roleName: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleDeleteUsersRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("users", thrift.SET, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:users: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.STRING, len(p.Users)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for v, _ := range p.Users {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:users: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleDeleteUsersRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAlterSentryRoleDeleteUsersRequest(%+v)", *p)
}

// Attributes:
//  - Status
type TAlterSentryRoleDeleteUsersResponse struct {
	Status *sentry_common_service.TSentryResponseStatus `thrift:"status,1,required" json:"status"`
}

func NewTAlterSentryRoleDeleteUsersResponse() *TAlterSentryRoleDeleteUsersResponse {
	return &TAlterSentryRoleDeleteUsersResponse{}
}

var TAlterSentryRoleDeleteUsersResponse_Status_DEFAULT *sentry_common_service.TSentryResponseStatus

func (p *TAlterSentryRoleDeleteUsersResponse) GetStatus() *sentry_common_service.TSentryResponseStatus {
	if !p.IsSetStatus() {
		return TAlterSentryRoleDeleteUsersResponse_Status_DEFAULT
	}
	return p.Status
}
func (p *TAlterSentryRoleDeleteUsersResponse) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TAlterSentryRoleDeleteUsersResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetStatus = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	return nil
}

func (p *TAlterSentryRoleDeleteUsersResponse) readField1(iprot thrift.TProtocol) error {
	p.Status = &sentry_common_service.TSentryResponseStatus{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *TAlterSentryRoleDeleteUsersResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TAlterSentryRoleDeleteUsersResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TAlterSentryRoleDeleteUsersResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleDeleteUsersResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAlterSentryRoleDeleteUsersResponse(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - RoleName
//  - Privilege
//  - Privileges
type TAlterSentryRoleGrantPrivilegeRequest struct {
	ProtocolVersion   int32  `thrift:"protocol_version,1,required" json:"protocol_version"`
	RequestorUserName string `thrift:"requestorUserName,2,required" json:"requestorUserName"`
	RoleName          string `thrift:"roleName,3,required" json:"roleName"`
	// unused field # 4
	Privilege  *TSentryPrivilege          `thrift:"privilege,5" json:"privilege,omitempty"`
	Privileges map[*TSentryPrivilege]bool `thrift:"privileges,6" json:"privileges,omitempty"`
}

func NewTAlterSentryRoleGrantPrivilegeRequest() *TAlterSentryRoleGrantPrivilegeRequest {
	return &TAlterSentryRoleGrantPrivilegeRequest{
		ProtocolVersion: 2,
	}
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) GetProtocolVersion() int32 {
	return p.ProtocolVersion
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) GetRequestorUserName() string {
	return p.RequestorUserName
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) GetRoleName() string {
	return p.RoleName
}

var TAlterSentryRoleGrantPrivilegeRequest_Privilege_DEFAULT *TSentryPrivilege

func (p *TAlterSentryRoleGrantPrivilegeRequest) GetPrivilege() *TSentryPrivilege {
	if !p.IsSetPrivilege() {
		return TAlterSentryRoleGrantPrivilegeRequest_Privilege_DEFAULT
	}
	return p.Privilege
}

var TAlterSentryRoleGrantPrivilegeRequest_Privileges_DEFAULT map[*TSentryPrivilege]bool

func (p *TAlterSentryRoleGrantPrivilegeRequest) GetPrivileges() map[*TSentryPrivilege]bool {
	return p.Privileges
}
func (p *TAlterSentryRoleGrantPrivilegeRequest) IsSetPrivilege() bool {
	return p.Privilege != nil
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) IsSetPrivileges() bool {
	return p.Privileges != nil
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetProtocolVersion bool = false
	var issetRequestorUserName bool = false
	var issetRoleName bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetProtocolVersion = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetRequestorUserName = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetRoleName = true
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetProtocolVersion {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"))
	}
	if !issetRequestorUserName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"))
	}
	if !issetRoleName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoleName is not set"))
	}
	return nil
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ProtocolVersion = v
	}
	return nil
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RequestorUserName = v
	}
	return nil
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.RoleName = v
	}
	return nil
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) readField5(iprot thrift.TProtocol) error {
	p.Privilege = &TSentryPrivilege{
		GrantOption: 0,
	}
	if err := p.Privilege.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Privilege), err)
	}
	return nil
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) readField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[*TSentryPrivilege]bool, size)
	p.Privileges = tSet
	for i := 0; i < size; i++ {
		_elem4 := &TSentryPrivilege{
			GrantOption: 0,
		}
		if err := _elem4.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
		}
		p.Privileges[_elem4] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TAlterSentryRoleGrantPrivilegeRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err)
	}
	if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roleName", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roleName: ", p), err)
	}
	if err := oprot.WriteString(string(p.RoleName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.roleName (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roleName: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrivilege() {
		if err := oprot.WriteFieldBegin("privilege", thrift.STRUCT, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:privilege: ", p), err)
		}
		if err := p.Privilege.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Privilege), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:privilege: ", p), err)
		}
	}
	return err
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrivileges() {
		if err := oprot.WriteFieldBegin("privileges", thrift.SET, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:privileges: ", p), err)
		}
		if err := oprot.WriteSetBegin(thrift.STRUCT, len(p.Privileges)); err != nil {
			return thrift.PrependError("error writing set begin: ", err)
		}
		for v, _ := range p.Privileges {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return thrift.PrependError("error writing set end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:privileges: ", p), err)
		}
	}
	return err
}

func (p *TAlterSentryRoleGrantPrivilegeRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAlterSentryRoleGrantPrivilegeRequest(%+v)", *p)
}

// Attributes:
//  - Status
//  - Privilege
//  - Privileges
type TAlterSentryRoleGrantPrivilegeResponse struct {
	Status     *sentry_common_service.TSentryResponseStatus `thrift:"status,1,required" json:"status"`
	Privilege  *TSentryPrivilege                            `thrift:"privilege,2" json:"privilege,omitempty"`
	Privileges map[*TSentryPrivilege]bool                   `thrift:"privileges,3" json:"privileges,omitempty"`
}

func NewTAlterSentryRoleGrantPrivilegeResponse() *TAlterSentryRoleGrantPrivilegeResponse {
	return &TAlterSentryRoleGrantPrivilegeResponse{}
}

var TAlterSentryRoleGrantPrivilegeResponse_Status_DEFAULT *sentry_common_service.TSentryResponseStatus

func (p *TAlterSentryRoleGrantPrivilegeResponse) GetStatus() *sentry_common_service.TSentryResponseStatus {
	if !p.IsSetStatus() {
		return TAlterSentryRoleGrantPrivilegeResponse_Status_DEFAULT
	}
	return p.Status
}

var TAlterSentryRoleGrantPrivilegeResponse_Privilege_DEFAULT *TSentryPrivilege

func (p *TAlterSentryRoleGrantPrivilegeResponse) GetPrivilege() *TSentryPrivilege {
	if !p.IsSetPrivilege() {
		return TAlterSentryRoleGrantPrivilegeResponse_Privilege_DEFAULT
	}
	return p.Privilege
}

var TAlterSentryRoleGrantPrivilegeResponse_Privileges_DEFAULT map[*TSentryPrivilege]bool

func (p *TAlterSentryRoleGrantPrivilegeResponse) GetPrivileges() map[*TSentryPrivilege]bool {
	return p.Privileges
}
func (p *TAlterSentryRoleGrantPrivilegeResponse) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TAlterSentryRoleGrantPrivilegeResponse) IsSetPrivilege() bool {
	return p.Privilege != nil
}

func (p *TAlterSentryRoleGrantPrivilegeResponse) IsSetPrivileges() bool {
	return p.Privileges != nil
}

func (p *TAlterSentryRoleGrantPrivilegeResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetStatus = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	return nil
}

func (p *TAlterSentryRoleGrantPrivilegeResponse) readField1(iprot thrift.TProtocol) error {
	p.Status = &sentry_common_service.TSentryResponseStatus{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *TAlterSentryRoleGrantPrivilegeResponse) readField2(iprot thrift.TProtocol) error {
	p.Privilege = &TSentryPrivilege{
		GrantOption: 0,
	}
	if err := p.Privilege.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Privilege), err)
	}
	return nil
}

func (p *TAlterSentryRoleGrantPrivilegeResponse) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[*TSentryPrivilege]bool, size)
	p.Privileges = tSet
	for i := 0; i < size; i++ {
		_elem5 := &TSentryPrivilege{
			GrantOption: 0,
		}
		if err := _elem5.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem5), err)
		}
		p.Privileges[_elem5] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *TAlterSentryRoleGrantPrivilegeResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TAlterSentryRoleGrantPrivilegeResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TAlterSentryRoleGrantPrivilegeResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleGrantPrivilegeResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrivilege() {
		if err := oprot.WriteFieldBegin("privilege", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:privilege: ", p), err)
		}
		if err := p.Privilege.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Privilege), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:privilege: ", p), err)
		}
	}
	return err
}

func (p *TAlterSentryRoleGrantPrivilegeResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrivileges() {
		if err := oprot.WriteFieldBegin("privileges", thrift.SET, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:privileges: ", p), err)
		}
		if err := oprot.WriteSetBegin(thrift.STRUCT, len(p.Privileges)); err != nil {
			return thrift.PrependError("error writing set begin: ", err)
		}
		for v, _ := range p.Privileges {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return thrift.PrependError("error writing set end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:privileges: ", p), err)
		}
	}
	return err
}

func (p *TAlterSentryRoleGrantPrivilegeResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAlterSentryRoleGrantPrivilegeResponse(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - RoleName
//  - Privilege
//  - Privileges
type TAlterSentryRoleRevokePrivilegeRequest struct {
	ProtocolVersion   int32  `thrift:"protocol_version,1,required" json:"protocol_version"`
	RequestorUserName string `thrift:"requestorUserName,2,required" json:"requestorUserName"`
	RoleName          string `thrift:"roleName,3,required" json:"roleName"`
	// unused field # 4
	Privilege  *TSentryPrivilege          `thrift:"privilege,5" json:"privilege,omitempty"`
	Privileges map[*TSentryPrivilege]bool `thrift:"privileges,6" json:"privileges,omitempty"`
}

func NewTAlterSentryRoleRevokePrivilegeRequest() *TAlterSentryRoleRevokePrivilegeRequest {
	return &TAlterSentryRoleRevokePrivilegeRequest{
		ProtocolVersion: 2,
	}
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) GetProtocolVersion() int32 {
	return p.ProtocolVersion
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) GetRequestorUserName() string {
	return p.RequestorUserName
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) GetRoleName() string {
	return p.RoleName
}

var TAlterSentryRoleRevokePrivilegeRequest_Privilege_DEFAULT *TSentryPrivilege

func (p *TAlterSentryRoleRevokePrivilegeRequest) GetPrivilege() *TSentryPrivilege {
	if !p.IsSetPrivilege() {
		return TAlterSentryRoleRevokePrivilegeRequest_Privilege_DEFAULT
	}
	return p.Privilege
}

var TAlterSentryRoleRevokePrivilegeRequest_Privileges_DEFAULT map[*TSentryPrivilege]bool

func (p *TAlterSentryRoleRevokePrivilegeRequest) GetPrivileges() map[*TSentryPrivilege]bool {
	return p.Privileges
}
func (p *TAlterSentryRoleRevokePrivilegeRequest) IsSetPrivilege() bool {
	return p.Privilege != nil
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) IsSetPrivileges() bool {
	return p.Privileges != nil
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetProtocolVersion bool = false
	var issetRequestorUserName bool = false
	var issetRoleName bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetProtocolVersion = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetRequestorUserName = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetRoleName = true
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetProtocolVersion {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"))
	}
	if !issetRequestorUserName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"))
	}
	if !issetRoleName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoleName is not set"))
	}
	return nil
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ProtocolVersion = v
	}
	return nil
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RequestorUserName = v
	}
	return nil
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.RoleName = v
	}
	return nil
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) readField5(iprot thrift.TProtocol) error {
	p.Privilege = &TSentryPrivilege{
		GrantOption: 0,
	}
	if err := p.Privilege.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Privilege), err)
	}
	return nil
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) readField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[*TSentryPrivilege]bool, size)
	p.Privileges = tSet
	for i := 0; i < size; i++ {
		_elem6 := &TSentryPrivilege{
			GrantOption: 0,
		}
		if err := _elem6.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
		}
		p.Privileges[_elem6] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TAlterSentryRoleRevokePrivilegeRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err)
	}
	if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roleName", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roleName: ", p), err)
	}
	if err := oprot.WriteString(string(p.RoleName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.roleName (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roleName: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrivilege() {
		if err := oprot.WriteFieldBegin("privilege", thrift.STRUCT, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:privilege: ", p), err)
		}
		if err := p.Privilege.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Privilege), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:privilege: ", p), err)
		}
	}
	return err
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrivileges() {
		if err := oprot.WriteFieldBegin("privileges", thrift.SET, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:privileges: ", p), err)
		}
		if err := oprot.WriteSetBegin(thrift.STRUCT, len(p.Privileges)); err != nil {
			return thrift.PrependError("error writing set begin: ", err)
		}
		for v, _ := range p.Privileges {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return thrift.PrependError("error writing set end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:privileges: ", p), err)
		}
	}
	return err
}

func (p *TAlterSentryRoleRevokePrivilegeRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAlterSentryRoleRevokePrivilegeRequest(%+v)", *p)
}

// Attributes:
//  - Status
type TAlterSentryRoleRevokePrivilegeResponse struct {
	Status *sentry_common_service.TSentryResponseStatus `thrift:"status,1,required" json:"status"`
}

func NewTAlterSentryRoleRevokePrivilegeResponse() *TAlterSentryRoleRevokePrivilegeResponse {
	return &TAlterSentryRoleRevokePrivilegeResponse{}
}

var TAlterSentryRoleRevokePrivilegeResponse_Status_DEFAULT *sentry_common_service.TSentryResponseStatus

func (p *TAlterSentryRoleRevokePrivilegeResponse) GetStatus() *sentry_common_service.TSentryResponseStatus {
	if !p.IsSetStatus() {
		return TAlterSentryRoleRevokePrivilegeResponse_Status_DEFAULT
	}
	return p.Status
}
func (p *TAlterSentryRoleRevokePrivilegeResponse) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TAlterSentryRoleRevokePrivilegeResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetStatus = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	return nil
}

func (p *TAlterSentryRoleRevokePrivilegeResponse) readField1(iprot thrift.TProtocol) error {
	p.Status = &sentry_common_service.TSentryResponseStatus{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *TAlterSentryRoleRevokePrivilegeResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TAlterSentryRoleRevokePrivilegeResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TAlterSentryRoleRevokePrivilegeResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *TAlterSentryRoleRevokePrivilegeResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAlterSentryRoleRevokePrivilegeResponse(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - GroupName
type TListSentryRolesRequest struct {
	ProtocolVersion   int32   `thrift:"protocol_version,1,required" json:"protocol_version"`
	RequestorUserName string  `thrift:"requestorUserName,2,required" json:"requestorUserName"`
	GroupName         *string `thrift:"groupName,3" json:"groupName,omitempty"`
}

func NewTListSentryRolesRequest() *TListSentryRolesRequest {
	return &TListSentryRolesRequest{
		ProtocolVersion: 2,
	}
}

func (p *TListSentryRolesRequest) GetProtocolVersion() int32 {
	return p.ProtocolVersion
}

func (p *TListSentryRolesRequest) GetRequestorUserName() string {
	return p.RequestorUserName
}

var TListSentryRolesRequest_GroupName_DEFAULT string

func (p *TListSentryRolesRequest) GetGroupName() string {
	if !p.IsSetGroupName() {
		return TListSentryRolesRequest_GroupName_DEFAULT
	}
	return *p.GroupName
}
func (p *TListSentryRolesRequest) IsSetGroupName() bool {
	return p.GroupName != nil
}

func (p *TListSentryRolesRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetProtocolVersion bool = false
	var issetRequestorUserName bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetProtocolVersion = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetRequestorUserName = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetProtocolVersion {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"))
	}
	if !issetRequestorUserName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"))
	}
	return nil
}

func (p *TListSentryRolesRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ProtocolVersion = v
	}
	return nil
}

func (p *TListSentryRolesRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RequestorUserName = v
	}
	return nil
}

func (p *TListSentryRolesRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.GroupName = &v
	}
	return nil
}

func (p *TListSentryRolesRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TListSentryRolesRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TListSentryRolesRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err)
	}
	return err
}

func (p *TListSentryRolesRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err)
	}
	if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err)
	}
	return err
}

func (p *TListSentryRolesRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupName() {
		if err := oprot.WriteFieldBegin("groupName", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:groupName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.GroupName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.groupName (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:groupName: ", p), err)
		}
	}
	return err
}

func (p *TListSentryRolesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TListSentryRolesRequest(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - UserName
type TListSentryRolesForUserRequest struct {
	ProtocolVersion   int32  `thrift:"protocol_version,1,required" json:"protocol_version"`
	RequestorUserName string `thrift:"requestorUserName,2,required" json:"requestorUserName"`
	UserName          string `thrift:"userName,3,required" json:"userName"`
}

func NewTListSentryRolesForUserRequest() *TListSentryRolesForUserRequest {
	return &TListSentryRolesForUserRequest{
		ProtocolVersion: 1,
	}
}

func (p *TListSentryRolesForUserRequest) GetProtocolVersion() int32 {
	return p.ProtocolVersion
}

func (p *TListSentryRolesForUserRequest) GetRequestorUserName() string {
	return p.RequestorUserName
}

func (p *TListSentryRolesForUserRequest) GetUserName() string {
	return p.UserName
}
func (p *TListSentryRolesForUserRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetProtocolVersion bool = false
	var issetRequestorUserName bool = false
	var issetUserName bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetProtocolVersion = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetRequestorUserName = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetUserName = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetProtocolVersion {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"))
	}
	if !issetRequestorUserName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"))
	}
	if !issetUserName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserName is not set"))
	}
	return nil
}

func (p *TListSentryRolesForUserRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ProtocolVersion = v
	}
	return nil
}

func (p *TListSentryRolesForUserRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RequestorUserName = v
	}
	return nil
}

func (p *TListSentryRolesForUserRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.UserName = v
	}
	return nil
}

func (p *TListSentryRolesForUserRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TListSentryRolesForUserRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TListSentryRolesForUserRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err)
	}
	return err
}

func (p *TListSentryRolesForUserRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err)
	}
	if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err)
	}
	return err
}

func (p *TListSentryRolesForUserRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userName", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:userName: ", p), err)
	}
	if err := oprot.WriteString(string(p.UserName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userName (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:userName: ", p), err)
	}
	return err
}

func (p *TListSentryRolesForUserRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TListSentryRolesForUserRequest(%+v)", *p)
}

// Attributes:
//  - RoleName
//  - Groups
//  - GrantorPrincipal
type TSentryRole struct {
	RoleName         string                 `thrift:"roleName,1,required" json:"roleName"`
	Groups           map[*TSentryGroup]bool `thrift:"groups,2,required" json:"groups"`
	GrantorPrincipal string                 `thrift:"grantorPrincipal,3,required" json:"grantorPrincipal"`
}

func NewTSentryRole() *TSentryRole {
	return &TSentryRole{}
}

func (p *TSentryRole) GetRoleName() string {
	return p.RoleName
}

func (p *TSentryRole) GetGroups() map[*TSentryGroup]bool {
	return p.Groups
}

func (p *TSentryRole) GetGrantorPrincipal() string {
	return p.GrantorPrincipal
}
func (p *TSentryRole) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetRoleName bool = false
	var issetGroups bool = false
	var issetGrantorPrincipal bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetRoleName = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetGroups = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetGrantorPrincipal = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetRoleName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoleName is not set"))
	}
	if !issetGroups {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Groups is not set"))
	}
	if !issetGrantorPrincipal {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GrantorPrincipal is not set"))
	}
	return nil
}

func (p *TSentryRole) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.RoleName = v
	}
	return nil
}

func (p *TSentryRole) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[*TSentryGroup]bool, size)
	p.Groups = tSet
	for i := 0; i < size; i++ {
		_elem7 := &TSentryGroup{}
		if err := _elem7.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem7), err)
		}
		p.Groups[_elem7] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *TSentryRole) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.GrantorPrincipal = v
	}
	return nil
}

func (p *TSentryRole) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TSentryRole"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TSentryRole) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roleName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:roleName: ", p), err)
	}
	if err := oprot.WriteString(string(p.RoleName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.roleName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:roleName: ", p), err)
	}
	return err
}

func (p *TSentryRole) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groups", thrift.SET, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groups: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.STRUCT, len(p.Groups)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for v, _ := range p.Groups {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groups: ", p), err)
	}
	return err
}

func (p *TSentryRole) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("grantorPrincipal", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:grantorPrincipal: ", p), err)
	}
	if err := oprot.WriteString(string(p.GrantorPrincipal)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.grantorPrincipal (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:grantorPrincipal: ", p), err)
	}
	return err
}

func (p *TSentryRole) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TSentryRole(%+v)", *p)
}

// Attributes:
//  - Status
//  - Roles
type TListSentryRolesResponse struct {
	Status *sentry_common_service.TSentryResponseStatus `thrift:"status,1,required" json:"status"`
	Roles  map[*TSentryRole]bool                        `thrift:"roles,2" json:"roles,omitempty"`
}

func NewTListSentryRolesResponse() *TListSentryRolesResponse {
	return &TListSentryRolesResponse{}
}

var TListSentryRolesResponse_Status_DEFAULT *sentry_common_service.TSentryResponseStatus

func (p *TListSentryRolesResponse) GetStatus() *sentry_common_service.TSentryResponseStatus {
	if !p.IsSetStatus() {
		return TListSentryRolesResponse_Status_DEFAULT
	}
	return p.Status
}

var TListSentryRolesResponse_Roles_DEFAULT map[*TSentryRole]bool

func (p *TListSentryRolesResponse) GetRoles() map[*TSentryRole]bool {
	return p.Roles
}
func (p *TListSentryRolesResponse) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TListSentryRolesResponse) IsSetRoles() bool {
	return p.Roles != nil
}

func (p *TListSentryRolesResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetStatus = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	return nil
}

func (p *TListSentryRolesResponse) readField1(iprot thrift.TProtocol) error {
	p.Status = &sentry_common_service.TSentryResponseStatus{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *TListSentryRolesResponse) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[*TSentryRole]bool, size)
	p.Roles = tSet
	for i := 0; i < size; i++ {
		_elem8 := &TSentryRole{}
		if err := _elem8.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem8), err)
		}
		p.Roles[_elem8] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *TListSentryRolesResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TListSentryRolesResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TListSentryRolesResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *TListSentryRolesResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRoles() {
		if err := oprot.WriteFieldBegin("roles", thrift.SET, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:roles: ", p), err)
		}
		if err := oprot.WriteSetBegin(thrift.STRUCT, len(p.Roles)); err != nil {
			return thrift.PrependError("error writing set begin: ", err)
		}
		for v, _ := range p.Roles {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return thrift.PrependError("error writing set end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:roles: ", p), err)
		}
	}
	return err
}

func (p *TListSentryRolesResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TListSentryRolesResponse(%+v)", *p)
}

// Attributes:
//  - Server
//  - URI
//  - Db
//  - Table
//  - Column
type TSentryAuthorizable struct {
	Server string  `thrift:"server,1,required" json:"server"`
	URI    *string `thrift:"uri,2" json:"uri,omitempty"`
	Db     *string `thrift:"db,3" json:"db,omitempty"`
	Table  *string `thrift:"table,4" json:"table,omitempty"`
	Column *string `thrift:"column,5" json:"column,omitempty"`
}

func NewTSentryAuthorizable() *TSentryAuthorizable {
	return &TSentryAuthorizable{}
}

func (p *TSentryAuthorizable) GetServer() string {
	return p.Server
}

var TSentryAuthorizable_URI_DEFAULT string

func (p *TSentryAuthorizable) GetURI() string {
	if !p.IsSetURI() {
		return TSentryAuthorizable_URI_DEFAULT
	}
	return *p.URI
}

var TSentryAuthorizable_Db_DEFAULT string

func (p *TSentryAuthorizable) GetDb() string {
	if !p.IsSetDb() {
		return TSentryAuthorizable_Db_DEFAULT
	}
	return *p.Db
}

var TSentryAuthorizable_Table_DEFAULT string

func (p *TSentryAuthorizable) GetTable() string {
	if !p.IsSetTable() {
		return TSentryAuthorizable_Table_DEFAULT
	}
	return *p.Table
}

var TSentryAuthorizable_Column_DEFAULT string

func (p *TSentryAuthorizable) GetColumn() string {
	if !p.IsSetColumn() {
		return TSentryAuthorizable_Column_DEFAULT
	}
	return *p.Column
}
func (p *TSentryAuthorizable) IsSetURI() bool {
	return p.URI != nil
}

func (p *TSentryAuthorizable) IsSetDb() bool {
	return p.Db != nil
}

func (p *TSentryAuthorizable) IsSetTable() bool {
	return p.Table != nil
}

func (p *TSentryAuthorizable) IsSetColumn() bool {
	return p.Column != nil
}

func (p *TSentryAuthorizable) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetServer bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetServer = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetServer {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Server is not set"))
	}
	return nil
}

func (p *TSentryAuthorizable) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Server = v
	}
	return nil
}

func (p *TSentryAuthorizable) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.URI = &v
	}
	return nil
}

func (p *TSentryAuthorizable) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Db = &v
	}
	return nil
}

func (p *TSentryAuthorizable) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Table = &v
	}
	return nil
}

func (p *TSentryAuthorizable) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Column = &v
	}
	return nil
}

func (p *TSentryAuthorizable) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TSentryAuthorizable"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TSentryAuthorizable) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("server", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:server: ", p), err)
	}
	if err := oprot.WriteString(string(p.Server)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.server (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:server: ", p), err)
	}
	return err
}

func (p *TSentryAuthorizable) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetURI() {
		if err := oprot.WriteFieldBegin("uri", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uri: ", p), err)
		}
		if err := oprot.WriteString(string(*p.URI)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.uri (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uri: ", p), err)
		}
	}
	return err
}

func (p *TSentryAuthorizable) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDb() {
		if err := oprot.WriteFieldBegin("db", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:db: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Db)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.db (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:db: ", p), err)
		}
	}
	return err
}

func (p *TSentryAuthorizable) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTable() {
		if err := oprot.WriteFieldBegin("table", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:table: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Table)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.table (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:table: ", p), err)
		}
	}
	return err
}

func (p *TSentryAuthorizable) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumn() {
		if err := oprot.WriteFieldBegin("column", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:column: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Column)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.column (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:column: ", p), err)
		}
	}
	return err
}

func (p *TSentryAuthorizable) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TSentryAuthorizable(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - RoleName
//  - AuthorizableHierarchy
type TListSentryPrivilegesRequest struct {
	ProtocolVersion   int32  `thrift:"protocol_version,1,required" json:"protocol_version"`
	RequestorUserName string `thrift:"requestorUserName,2,required" json:"requestorUserName"`
	// unused field # 3
	RoleName              string               `thrift:"roleName,4,required" json:"roleName"`
	AuthorizableHierarchy *TSentryAuthorizable `thrift:"authorizableHierarchy,5" json:"authorizableHierarchy,omitempty"`
}

func NewTListSentryPrivilegesRequest() *TListSentryPrivilegesRequest {
	return &TListSentryPrivilegesRequest{
		ProtocolVersion: 2,
	}
}

func (p *TListSentryPrivilegesRequest) GetProtocolVersion() int32 {
	return p.ProtocolVersion
}

func (p *TListSentryPrivilegesRequest) GetRequestorUserName() string {
	return p.RequestorUserName
}

func (p *TListSentryPrivilegesRequest) GetRoleName() string {
	return p.RoleName
}

var TListSentryPrivilegesRequest_AuthorizableHierarchy_DEFAULT *TSentryAuthorizable

func (p *TListSentryPrivilegesRequest) GetAuthorizableHierarchy() *TSentryAuthorizable {
	if !p.IsSetAuthorizableHierarchy() {
		return TListSentryPrivilegesRequest_AuthorizableHierarchy_DEFAULT
	}
	return p.AuthorizableHierarchy
}
func (p *TListSentryPrivilegesRequest) IsSetAuthorizableHierarchy() bool {
	return p.AuthorizableHierarchy != nil
}

func (p *TListSentryPrivilegesRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetProtocolVersion bool = false
	var issetRequestorUserName bool = false
	var issetRoleName bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetProtocolVersion = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetRequestorUserName = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetRoleName = true
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetProtocolVersion {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"))
	}
	if !issetRequestorUserName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"))
	}
	if !issetRoleName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoleName is not set"))
	}
	return nil
}

func (p *TListSentryPrivilegesRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ProtocolVersion = v
	}
	return nil
}

func (p *TListSentryPrivilegesRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RequestorUserName = v
	}
	return nil
}

func (p *TListSentryPrivilegesRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.RoleName = v
	}
	return nil
}

func (p *TListSentryPrivilegesRequest) readField5(iprot thrift.TProtocol) error {
	p.AuthorizableHierarchy = &TSentryAuthorizable{}
	if err := p.AuthorizableHierarchy.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthorizableHierarchy), err)
	}
	return nil
}

func (p *TListSentryPrivilegesRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TListSentryPrivilegesRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TListSentryPrivilegesRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err)
	}
	return err
}

func (p *TListSentryPrivilegesRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err)
	}
	if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err)
	}
	return err
}

func (p *TListSentryPrivilegesRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roleName", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:roleName: ", p), err)
	}
	if err := oprot.WriteString(string(p.RoleName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.roleName (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:roleName: ", p), err)
	}
	return err
}

func (p *TListSentryPrivilegesRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthorizableHierarchy() {
		if err := oprot.WriteFieldBegin("authorizableHierarchy", thrift.STRUCT, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:authorizableHierarchy: ", p), err)
		}
		if err := p.AuthorizableHierarchy.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthorizableHierarchy), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:authorizableHierarchy: ", p), err)
		}
	}
	return err
}

func (p *TListSentryPrivilegesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TListSentryPrivilegesRequest(%+v)", *p)
}

// Attributes:
//  - Status
//  - Privileges
type TListSentryPrivilegesResponse struct {
	Status     *sentry_common_service.TSentryResponseStatus `thrift:"status,1,required" json:"status"`
	Privileges map[*TSentryPrivilege]bool                   `thrift:"privileges,2" json:"privileges,omitempty"`
}

func NewTListSentryPrivilegesResponse() *TListSentryPrivilegesResponse {
	return &TListSentryPrivilegesResponse{}
}

var TListSentryPrivilegesResponse_Status_DEFAULT *sentry_common_service.TSentryResponseStatus

func (p *TListSentryPrivilegesResponse) GetStatus() *sentry_common_service.TSentryResponseStatus {
	if !p.IsSetStatus() {
		return TListSentryPrivilegesResponse_Status_DEFAULT
	}
	return p.Status
}

var TListSentryPrivilegesResponse_Privileges_DEFAULT map[*TSentryPrivilege]bool

func (p *TListSentryPrivilegesResponse) GetPrivileges() map[*TSentryPrivilege]bool {
	return p.Privileges
}
func (p *TListSentryPrivilegesResponse) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TListSentryPrivilegesResponse) IsSetPrivileges() bool {
	return p.Privileges != nil
}

func (p *TListSentryPrivilegesResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetStatus = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	return nil
}

func (p *TListSentryPrivilegesResponse) readField1(iprot thrift.TProtocol) error {
	p.Status = &sentry_common_service.TSentryResponseStatus{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *TListSentryPrivilegesResponse) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[*TSentryPrivilege]bool, size)
	p.Privileges = tSet
	for i := 0; i < size; i++ {
		_elem9 := &TSentryPrivilege{
			GrantOption: 0,
		}
		if err := _elem9.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem9), err)
		}
		p.Privileges[_elem9] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *TListSentryPrivilegesResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TListSentryPrivilegesResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TListSentryPrivilegesResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *TListSentryPrivilegesResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrivileges() {
		if err := oprot.WriteFieldBegin("privileges", thrift.SET, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:privileges: ", p), err)
		}
		if err := oprot.WriteSetBegin(thrift.STRUCT, len(p.Privileges)); err != nil {
			return thrift.PrependError("error writing set begin: ", err)
		}
		for v, _ := range p.Privileges {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return thrift.PrependError("error writing set end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:privileges: ", p), err)
		}
	}
	return err
}

func (p *TListSentryPrivilegesResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TListSentryPrivilegesResponse(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - Authorizable
type TDropPrivilegesRequest struct {
	ProtocolVersion   int32                `thrift:"protocol_version,1,required" json:"protocol_version"`
	RequestorUserName string               `thrift:"requestorUserName,2,required" json:"requestorUserName"`
	Authorizable      *TSentryAuthorizable `thrift:"authorizable,3,required" json:"authorizable"`
}

func NewTDropPrivilegesRequest() *TDropPrivilegesRequest {
	return &TDropPrivilegesRequest{
		ProtocolVersion: 2,
	}
}

func (p *TDropPrivilegesRequest) GetProtocolVersion() int32 {
	return p.ProtocolVersion
}

func (p *TDropPrivilegesRequest) GetRequestorUserName() string {
	return p.RequestorUserName
}

var TDropPrivilegesRequest_Authorizable_DEFAULT *TSentryAuthorizable

func (p *TDropPrivilegesRequest) GetAuthorizable() *TSentryAuthorizable {
	if !p.IsSetAuthorizable() {
		return TDropPrivilegesRequest_Authorizable_DEFAULT
	}
	return p.Authorizable
}
func (p *TDropPrivilegesRequest) IsSetAuthorizable() bool {
	return p.Authorizable != nil
}

func (p *TDropPrivilegesRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetProtocolVersion bool = false
	var issetRequestorUserName bool = false
	var issetAuthorizable bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetProtocolVersion = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetRequestorUserName = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetAuthorizable = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetProtocolVersion {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"))
	}
	if !issetRequestorUserName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"))
	}
	if !issetAuthorizable {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Authorizable is not set"))
	}
	return nil
}

func (p *TDropPrivilegesRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ProtocolVersion = v
	}
	return nil
}

func (p *TDropPrivilegesRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RequestorUserName = v
	}
	return nil
}

func (p *TDropPrivilegesRequest) readField3(iprot thrift.TProtocol) error {
	p.Authorizable = &TSentryAuthorizable{}
	if err := p.Authorizable.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Authorizable), err)
	}
	return nil
}

func (p *TDropPrivilegesRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TDropPrivilegesRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TDropPrivilegesRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err)
	}
	return err
}

func (p *TDropPrivilegesRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err)
	}
	if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err)
	}
	return err
}

func (p *TDropPrivilegesRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authorizable", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:authorizable: ", p), err)
	}
	if err := p.Authorizable.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Authorizable), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:authorizable: ", p), err)
	}
	return err
}

func (p *TDropPrivilegesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDropPrivilegesRequest(%+v)", *p)
}

// Attributes:
//  - Status
type TDropPrivilegesResponse struct {
	Status *sentry_common_service.TSentryResponseStatus `thrift:"status,1,required" json:"status"`
}

func NewTDropPrivilegesResponse() *TDropPrivilegesResponse {
	return &TDropPrivilegesResponse{}
}

var TDropPrivilegesResponse_Status_DEFAULT *sentry_common_service.TSentryResponseStatus

func (p *TDropPrivilegesResponse) GetStatus() *sentry_common_service.TSentryResponseStatus {
	if !p.IsSetStatus() {
		return TDropPrivilegesResponse_Status_DEFAULT
	}
	return p.Status
}
func (p *TDropPrivilegesResponse) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TDropPrivilegesResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetStatus = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	return nil
}

func (p *TDropPrivilegesResponse) readField1(iprot thrift.TProtocol) error {
	p.Status = &sentry_common_service.TSentryResponseStatus{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *TDropPrivilegesResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TDropPrivilegesResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TDropPrivilegesResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *TDropPrivilegesResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDropPrivilegesResponse(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - OldAuthorizable
//  - NewAuthorizable_
type TRenamePrivilegesRequest struct {
	ProtocolVersion   int32                `thrift:"protocol_version,1,required" json:"protocol_version"`
	RequestorUserName string               `thrift:"requestorUserName,2,required" json:"requestorUserName"`
	OldAuthorizable   *TSentryAuthorizable `thrift:"oldAuthorizable,3,required" json:"oldAuthorizable"`
	NewAuthorizable_  *TSentryAuthorizable `thrift:"newAuthorizable,4,required" json:"newAuthorizable"`
}

func NewTRenamePrivilegesRequest() *TRenamePrivilegesRequest {
	return &TRenamePrivilegesRequest{
		ProtocolVersion: 2,
	}
}

func (p *TRenamePrivilegesRequest) GetProtocolVersion() int32 {
	return p.ProtocolVersion
}

func (p *TRenamePrivilegesRequest) GetRequestorUserName() string {
	return p.RequestorUserName
}

var TRenamePrivilegesRequest_OldAuthorizable_DEFAULT *TSentryAuthorizable

func (p *TRenamePrivilegesRequest) GetOldAuthorizable() *TSentryAuthorizable {
	if !p.IsSetOldAuthorizable() {
		return TRenamePrivilegesRequest_OldAuthorizable_DEFAULT
	}
	return p.OldAuthorizable
}

var TRenamePrivilegesRequest_NewAuthorizable__DEFAULT *TSentryAuthorizable

func (p *TRenamePrivilegesRequest) GetNewAuthorizable_() *TSentryAuthorizable {
	if !p.IsSetNewAuthorizable_() {
		return TRenamePrivilegesRequest_NewAuthorizable__DEFAULT
	}
	return p.NewAuthorizable_
}
func (p *TRenamePrivilegesRequest) IsSetOldAuthorizable() bool {
	return p.OldAuthorizable != nil
}

func (p *TRenamePrivilegesRequest) IsSetNewAuthorizable_() bool {
	return p.NewAuthorizable_ != nil
}

func (p *TRenamePrivilegesRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetProtocolVersion bool = false
	var issetRequestorUserName bool = false
	var issetOldAuthorizable bool = false
	var issetNewAuthorizable_ bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetProtocolVersion = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetRequestorUserName = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetOldAuthorizable = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetNewAuthorizable_ = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetProtocolVersion {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"))
	}
	if !issetRequestorUserName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"))
	}
	if !issetOldAuthorizable {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field OldAuthorizable is not set"))
	}
	if !issetNewAuthorizable_ {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NewAuthorizable_ is not set"))
	}
	return nil
}

func (p *TRenamePrivilegesRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ProtocolVersion = v
	}
	return nil
}

func (p *TRenamePrivilegesRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RequestorUserName = v
	}
	return nil
}

func (p *TRenamePrivilegesRequest) readField3(iprot thrift.TProtocol) error {
	p.OldAuthorizable = &TSentryAuthorizable{}
	if err := p.OldAuthorizable.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OldAuthorizable), err)
	}
	return nil
}

func (p *TRenamePrivilegesRequest) readField4(iprot thrift.TProtocol) error {
	p.NewAuthorizable_ = &TSentryAuthorizable{}
	if err := p.NewAuthorizable_.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NewAuthorizable_), err)
	}
	return nil
}

func (p *TRenamePrivilegesRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TRenamePrivilegesRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TRenamePrivilegesRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err)
	}
	return err
}

func (p *TRenamePrivilegesRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err)
	}
	if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err)
	}
	return err
}

func (p *TRenamePrivilegesRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("oldAuthorizable", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:oldAuthorizable: ", p), err)
	}
	if err := p.OldAuthorizable.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OldAuthorizable), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:oldAuthorizable: ", p), err)
	}
	return err
}

func (p *TRenamePrivilegesRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("newAuthorizable", thrift.STRUCT, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:newAuthorizable: ", p), err)
	}
	if err := p.NewAuthorizable_.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NewAuthorizable_), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:newAuthorizable: ", p), err)
	}
	return err
}

func (p *TRenamePrivilegesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TRenamePrivilegesRequest(%+v)", *p)
}

// Attributes:
//  - Status
type TRenamePrivilegesResponse struct {
	Status *sentry_common_service.TSentryResponseStatus `thrift:"status,1,required" json:"status"`
}

func NewTRenamePrivilegesResponse() *TRenamePrivilegesResponse {
	return &TRenamePrivilegesResponse{}
}

var TRenamePrivilegesResponse_Status_DEFAULT *sentry_common_service.TSentryResponseStatus

func (p *TRenamePrivilegesResponse) GetStatus() *sentry_common_service.TSentryResponseStatus {
	if !p.IsSetStatus() {
		return TRenamePrivilegesResponse_Status_DEFAULT
	}
	return p.Status
}
func (p *TRenamePrivilegesResponse) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TRenamePrivilegesResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetStatus = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	return nil
}

func (p *TRenamePrivilegesResponse) readField1(iprot thrift.TProtocol) error {
	p.Status = &sentry_common_service.TSentryResponseStatus{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *TRenamePrivilegesResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TRenamePrivilegesResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TRenamePrivilegesResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *TRenamePrivilegesResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TRenamePrivilegesResponse(%+v)", *p)
}

// Attributes:
//  - All
//  - Roles
type TSentryActiveRoleSet struct {
	All   bool            `thrift:"all,1,required" json:"all"`
	Roles map[string]bool `thrift:"roles,2,required" json:"roles"`
}

func NewTSentryActiveRoleSet() *TSentryActiveRoleSet {
	return &TSentryActiveRoleSet{}
}

func (p *TSentryActiveRoleSet) GetAll() bool {
	return p.All
}

func (p *TSentryActiveRoleSet) GetRoles() map[string]bool {
	return p.Roles
}
func (p *TSentryActiveRoleSet) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetAll bool = false
	var issetRoles bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetAll = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetRoles = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetAll {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field All is not set"))
	}
	if !issetRoles {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Roles is not set"))
	}
	return nil
}

func (p *TSentryActiveRoleSet) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.All = v
	}
	return nil
}

func (p *TSentryActiveRoleSet) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[string]bool, size)
	p.Roles = tSet
	for i := 0; i < size; i++ {
		var _elem10 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem10 = v
		}
		p.Roles[_elem10] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *TSentryActiveRoleSet) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TSentryActiveRoleSet"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TSentryActiveRoleSet) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("all", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:all: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.All)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.all (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:all: ", p), err)
	}
	return err
}

func (p *TSentryActiveRoleSet) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roles", thrift.SET, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:roles: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.STRING, len(p.Roles)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for v, _ := range p.Roles {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:roles: ", p), err)
	}
	return err
}

func (p *TSentryActiveRoleSet) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TSentryActiveRoleSet(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - Groups
//  - RoleSet
//  - AuthorizableHierarchy
//  - Users
type TListSentryPrivilegesForProviderRequest struct {
	ProtocolVersion       int32                 `thrift:"protocol_version,1,required" json:"protocol_version"`
	Groups                map[string]bool       `thrift:"groups,2,required" json:"groups"`
	RoleSet               *TSentryActiveRoleSet `thrift:"roleSet,3,required" json:"roleSet"`
	AuthorizableHierarchy *TSentryAuthorizable  `thrift:"authorizableHierarchy,4" json:"authorizableHierarchy,omitempty"`
	Users                 map[string]bool       `thrift:"users,5" json:"users,omitempty"`
}

func NewTListSentryPrivilegesForProviderRequest() *TListSentryPrivilegesForProviderRequest {
	return &TListSentryPrivilegesForProviderRequest{
		ProtocolVersion: 2,
	}
}

func (p *TListSentryPrivilegesForProviderRequest) GetProtocolVersion() int32 {
	return p.ProtocolVersion
}

func (p *TListSentryPrivilegesForProviderRequest) GetGroups() map[string]bool {
	return p.Groups
}

var TListSentryPrivilegesForProviderRequest_RoleSet_DEFAULT *TSentryActiveRoleSet

func (p *TListSentryPrivilegesForProviderRequest) GetRoleSet() *TSentryActiveRoleSet {
	if !p.IsSetRoleSet() {
		return TListSentryPrivilegesForProviderRequest_RoleSet_DEFAULT
	}
	return p.RoleSet
}

var TListSentryPrivilegesForProviderRequest_AuthorizableHierarchy_DEFAULT *TSentryAuthorizable

func (p *TListSentryPrivilegesForProviderRequest) GetAuthorizableHierarchy() *TSentryAuthorizable {
	if !p.IsSetAuthorizableHierarchy() {
		return TListSentryPrivilegesForProviderRequest_AuthorizableHierarchy_DEFAULT
	}
	return p.AuthorizableHierarchy
}

var TListSentryPrivilegesForProviderRequest_Users_DEFAULT map[string]bool

func (p *TListSentryPrivilegesForProviderRequest) GetUsers() map[string]bool {
	return p.Users
}
func (p *TListSentryPrivilegesForProviderRequest) IsSetRoleSet() bool {
	return p.RoleSet != nil
}

func (p *TListSentryPrivilegesForProviderRequest) IsSetAuthorizableHierarchy() bool {
	return p.AuthorizableHierarchy != nil
}

func (p *TListSentryPrivilegesForProviderRequest) IsSetUsers() bool {
	return p.Users != nil
}

func (p *TListSentryPrivilegesForProviderRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetProtocolVersion bool = false
	var issetGroups bool = false
	var issetRoleSet bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetProtocolVersion = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetGroups = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetRoleSet = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetProtocolVersion {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"))
	}
	if !issetGroups {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Groups is not set"))
	}
	if !issetRoleSet {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoleSet is not set"))
	}
	return nil
}

func (p *TListSentryPrivilegesForProviderRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ProtocolVersion = v
	}
	return nil
}

func (p *TListSentryPrivilegesForProviderRequest) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[string]bool, size)
	p.Groups = tSet
	for i := 0; i < size; i++ {
		var _elem11 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem11 = v
		}
		p.Groups[_elem11] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *TListSentryPrivilegesForProviderRequest) readField3(iprot thrift.TProtocol) error {
	p.RoleSet = &TSentryActiveRoleSet{}
	if err := p.RoleSet.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RoleSet), err)
	}
	return nil
}

func (p *TListSentryPrivilegesForProviderRequest) readField4(iprot thrift.TProtocol) error {
	p.AuthorizableHierarchy = &TSentryAuthorizable{}
	if err := p.AuthorizableHierarchy.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthorizableHierarchy), err)
	}
	return nil
}

func (p *TListSentryPrivilegesForProviderRequest) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[string]bool, size)
	p.Users = tSet
	for i := 0; i < size; i++ {
		var _elem12 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem12 = v
		}
		p.Users[_elem12] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *TListSentryPrivilegesForProviderRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TListSentryPrivilegesForProviderRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TListSentryPrivilegesForProviderRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err)
	}
	return err
}

func (p *TListSentryPrivilegesForProviderRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groups", thrift.SET, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groups: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.STRING, len(p.Groups)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for v, _ := range p.Groups {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groups: ", p), err)
	}
	return err
}

func (p *TListSentryPrivilegesForProviderRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roleSet", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roleSet: ", p), err)
	}
	if err := p.RoleSet.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RoleSet), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roleSet: ", p), err)
	}
	return err
}

func (p *TListSentryPrivilegesForProviderRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthorizableHierarchy() {
		if err := oprot.WriteFieldBegin("authorizableHierarchy", thrift.STRUCT, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:authorizableHierarchy: ", p), err)
		}
		if err := p.AuthorizableHierarchy.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthorizableHierarchy), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:authorizableHierarchy: ", p), err)
		}
	}
	return err
}

func (p *TListSentryPrivilegesForProviderRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetUsers() {
		if err := oprot.WriteFieldBegin("users", thrift.SET, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:users: ", p), err)
		}
		if err := oprot.WriteSetBegin(thrift.STRING, len(p.Users)); err != nil {
			return thrift.PrependError("error writing set begin: ", err)
		}
		for v, _ := range p.Users {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return thrift.PrependError("error writing set end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:users: ", p), err)
		}
	}
	return err
}

func (p *TListSentryPrivilegesForProviderRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TListSentryPrivilegesForProviderRequest(%+v)", *p)
}

// Attributes:
//  - Status
//  - Privileges
type TListSentryPrivilegesForProviderResponse struct {
	Status     *sentry_common_service.TSentryResponseStatus `thrift:"status,1,required" json:"status"`
	Privileges map[string]bool                              `thrift:"privileges,2,required" json:"privileges"`
}

func NewTListSentryPrivilegesForProviderResponse() *TListSentryPrivilegesForProviderResponse {
	return &TListSentryPrivilegesForProviderResponse{}
}

var TListSentryPrivilegesForProviderResponse_Status_DEFAULT *sentry_common_service.TSentryResponseStatus

func (p *TListSentryPrivilegesForProviderResponse) GetStatus() *sentry_common_service.TSentryResponseStatus {
	if !p.IsSetStatus() {
		return TListSentryPrivilegesForProviderResponse_Status_DEFAULT
	}
	return p.Status
}

func (p *TListSentryPrivilegesForProviderResponse) GetPrivileges() map[string]bool {
	return p.Privileges
}
func (p *TListSentryPrivilegesForProviderResponse) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TListSentryPrivilegesForProviderResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false
	var issetPrivileges bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetStatus = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetPrivileges = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	if !issetPrivileges {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Privileges is not set"))
	}
	return nil
}

func (p *TListSentryPrivilegesForProviderResponse) readField1(iprot thrift.TProtocol) error {
	p.Status = &sentry_common_service.TSentryResponseStatus{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *TListSentryPrivilegesForProviderResponse) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[string]bool, size)
	p.Privileges = tSet
	for i := 0; i < size; i++ {
		var _elem13 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem13 = v
		}
		p.Privileges[_elem13] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *TListSentryPrivilegesForProviderResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TListSentryPrivilegesForProviderResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TListSentryPrivilegesForProviderResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *TListSentryPrivilegesForProviderResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privileges", thrift.SET, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:privileges: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.STRING, len(p.Privileges)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for v, _ := range p.Privileges {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:privileges: ", p), err)
	}
	return err
}

func (p *TListSentryPrivilegesForProviderResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TListSentryPrivilegesForProviderResponse(%+v)", *p)
}

// Attributes:
//  - PrivilegeMap
type TSentryPrivilegeMap struct {
	PrivilegeMap map[string]map[*TSentryPrivilege]bool `thrift:"privilegeMap,1,required" json:"privilegeMap"`
}

func NewTSentryPrivilegeMap() *TSentryPrivilegeMap {
	return &TSentryPrivilegeMap{}
}

func (p *TSentryPrivilegeMap) GetPrivilegeMap() map[string]map[*TSentryPrivilege]bool {
	return p.PrivilegeMap
}
func (p *TSentryPrivilegeMap) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetPrivilegeMap bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetPrivilegeMap = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetPrivilegeMap {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PrivilegeMap is not set"))
	}
	return nil
}

func (p *TSentryPrivilegeMap) readField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]map[*TSentryPrivilege]bool, size)
	p.PrivilegeMap = tMap
	for i := 0; i < size; i++ {
		var _key14 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key14 = v
		}
		_, size, err := iprot.ReadSetBegin()
		if err != nil {
			return thrift.PrependError("error reading set begin: ", err)
		}
		tSet := make(map[*TSentryPrivilege]bool, size)
		_val15 := tSet
		for i := 0; i < size; i++ {
			_elem16 := &TSentryPrivilege{
				GrantOption: 0,
			}
			if err := _elem16.Read(iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem16), err)
			}
			_val15[_elem16] = true
		}
		if err := iprot.ReadSetEnd(); err != nil {
			return thrift.PrependError("error reading set end: ", err)
		}
		p.PrivilegeMap[_key14] = _val15
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TSentryPrivilegeMap) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TSentryPrivilegeMap"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TSentryPrivilegeMap) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privilegeMap", thrift.MAP, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:privilegeMap: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.SET, len(p.PrivilegeMap)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.PrivilegeMap {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteSetBegin(thrift.STRUCT, len(v)); err != nil {
			return thrift.PrependError("error writing set begin: ", err)
		}
		for v, _ := range v {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return thrift.PrependError("error writing set end: ", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:privilegeMap: ", p), err)
	}
	return err
}

func (p *TSentryPrivilegeMap) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TSentryPrivilegeMap(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - AuthorizableSet
//  - Groups
//  - RoleSet
type TListSentryPrivilegesByAuthRequest struct {
	ProtocolVersion   int32                         `thrift:"protocol_version,1,required" json:"protocol_version"`
	RequestorUserName string                        `thrift:"requestorUserName,2,required" json:"requestorUserName"`
	AuthorizableSet   map[*TSentryAuthorizable]bool `thrift:"authorizableSet,3,required" json:"authorizableSet"`
	Groups            map[string]bool               `thrift:"groups,4" json:"groups,omitempty"`
	RoleSet           *TSentryActiveRoleSet         `thrift:"roleSet,5" json:"roleSet,omitempty"`
}

func NewTListSentryPrivilegesByAuthRequest() *TListSentryPrivilegesByAuthRequest {
	return &TListSentryPrivilegesByAuthRequest{
		ProtocolVersion: 2,
	}
}

func (p *TListSentryPrivilegesByAuthRequest) GetProtocolVersion() int32 {
	return p.ProtocolVersion
}

func (p *TListSentryPrivilegesByAuthRequest) GetRequestorUserName() string {
	return p.RequestorUserName
}

func (p *TListSentryPrivilegesByAuthRequest) GetAuthorizableSet() map[*TSentryAuthorizable]bool {
	return p.AuthorizableSet
}

var TListSentryPrivilegesByAuthRequest_Groups_DEFAULT map[string]bool

func (p *TListSentryPrivilegesByAuthRequest) GetGroups() map[string]bool {
	return p.Groups
}

var TListSentryPrivilegesByAuthRequest_RoleSet_DEFAULT *TSentryActiveRoleSet

func (p *TListSentryPrivilegesByAuthRequest) GetRoleSet() *TSentryActiveRoleSet {
	if !p.IsSetRoleSet() {
		return TListSentryPrivilegesByAuthRequest_RoleSet_DEFAULT
	}
	return p.RoleSet
}
func (p *TListSentryPrivilegesByAuthRequest) IsSetGroups() bool {
	return p.Groups != nil
}

func (p *TListSentryPrivilegesByAuthRequest) IsSetRoleSet() bool {
	return p.RoleSet != nil
}

func (p *TListSentryPrivilegesByAuthRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetProtocolVersion bool = false
	var issetRequestorUserName bool = false
	var issetAuthorizableSet bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetProtocolVersion = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetRequestorUserName = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetAuthorizableSet = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetProtocolVersion {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"))
	}
	if !issetRequestorUserName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"))
	}
	if !issetAuthorizableSet {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthorizableSet is not set"))
	}
	return nil
}

func (p *TListSentryPrivilegesByAuthRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ProtocolVersion = v
	}
	return nil
}

func (p *TListSentryPrivilegesByAuthRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RequestorUserName = v
	}
	return nil
}

func (p *TListSentryPrivilegesByAuthRequest) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[*TSentryAuthorizable]bool, size)
	p.AuthorizableSet = tSet
	for i := 0; i < size; i++ {
		_elem17 := &TSentryAuthorizable{}
		if err := _elem17.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem17), err)
		}
		p.AuthorizableSet[_elem17] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *TListSentryPrivilegesByAuthRequest) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[string]bool, size)
	p.Groups = tSet
	for i := 0; i < size; i++ {
		var _elem18 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem18 = v
		}
		p.Groups[_elem18] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *TListSentryPrivilegesByAuthRequest) readField5(iprot thrift.TProtocol) error {
	p.RoleSet = &TSentryActiveRoleSet{}
	if err := p.RoleSet.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RoleSet), err)
	}
	return nil
}

func (p *TListSentryPrivilegesByAuthRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TListSentryPrivilegesByAuthRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TListSentryPrivilegesByAuthRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err)
	}
	return err
}

func (p *TListSentryPrivilegesByAuthRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err)
	}
	if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err)
	}
	return err
}

func (p *TListSentryPrivilegesByAuthRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authorizableSet", thrift.SET, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:authorizableSet: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.STRUCT, len(p.AuthorizableSet)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for v, _ := range p.AuthorizableSet {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:authorizableSet: ", p), err)
	}
	return err
}

func (p *TListSentryPrivilegesByAuthRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroups() {
		if err := oprot.WriteFieldBegin("groups", thrift.SET, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:groups: ", p), err)
		}
		if err := oprot.WriteSetBegin(thrift.STRING, len(p.Groups)); err != nil {
			return thrift.PrependError("error writing set begin: ", err)
		}
		for v, _ := range p.Groups {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return thrift.PrependError("error writing set end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:groups: ", p), err)
		}
	}
	return err
}

func (p *TListSentryPrivilegesByAuthRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetRoleSet() {
		if err := oprot.WriteFieldBegin("roleSet", thrift.STRUCT, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:roleSet: ", p), err)
		}
		if err := p.RoleSet.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RoleSet), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:roleSet: ", p), err)
		}
	}
	return err
}

func (p *TListSentryPrivilegesByAuthRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TListSentryPrivilegesByAuthRequest(%+v)", *p)
}

// Attributes:
//  - Status
//  - PrivilegesMapByAuth
type TListSentryPrivilegesByAuthResponse struct {
	Status              *sentry_common_service.TSentryResponseStatus  `thrift:"status,1,required" json:"status"`
	PrivilegesMapByAuth map[*TSentryAuthorizable]*TSentryPrivilegeMap `thrift:"privilegesMapByAuth,2" json:"privilegesMapByAuth,omitempty"`
}

func NewTListSentryPrivilegesByAuthResponse() *TListSentryPrivilegesByAuthResponse {
	return &TListSentryPrivilegesByAuthResponse{}
}

var TListSentryPrivilegesByAuthResponse_Status_DEFAULT *sentry_common_service.TSentryResponseStatus

func (p *TListSentryPrivilegesByAuthResponse) GetStatus() *sentry_common_service.TSentryResponseStatus {
	if !p.IsSetStatus() {
		return TListSentryPrivilegesByAuthResponse_Status_DEFAULT
	}
	return p.Status
}

var TListSentryPrivilegesByAuthResponse_PrivilegesMapByAuth_DEFAULT map[*TSentryAuthorizable]*TSentryPrivilegeMap

func (p *TListSentryPrivilegesByAuthResponse) GetPrivilegesMapByAuth() map[*TSentryAuthorizable]*TSentryPrivilegeMap {
	return p.PrivilegesMapByAuth
}
func (p *TListSentryPrivilegesByAuthResponse) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TListSentryPrivilegesByAuthResponse) IsSetPrivilegesMapByAuth() bool {
	return p.PrivilegesMapByAuth != nil
}

func (p *TListSentryPrivilegesByAuthResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetStatus = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	return nil
}

func (p *TListSentryPrivilegesByAuthResponse) readField1(iprot thrift.TProtocol) error {
	p.Status = &sentry_common_service.TSentryResponseStatus{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *TListSentryPrivilegesByAuthResponse) readField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[*TSentryAuthorizable]*TSentryPrivilegeMap, size)
	p.PrivilegesMapByAuth = tMap
	for i := 0; i < size; i++ {
		_key19 := &TSentryAuthorizable{}
		if err := _key19.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _key19), err)
		}
		_val20 := &TSentryPrivilegeMap{}
		if err := _val20.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val20), err)
		}
		p.PrivilegesMapByAuth[_key19] = _val20
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TListSentryPrivilegesByAuthResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TListSentryPrivilegesByAuthResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TListSentryPrivilegesByAuthResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *TListSentryPrivilegesByAuthResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrivilegesMapByAuth() {
		if err := oprot.WriteFieldBegin("privilegesMapByAuth", thrift.MAP, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:privilegesMapByAuth: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRUCT, thrift.STRUCT, len(p.PrivilegesMapByAuth)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.PrivilegesMapByAuth {
			if err := k.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", k), err)
			}
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:privilegesMapByAuth: ", p), err)
		}
	}
	return err
}

func (p *TListSentryPrivilegesByAuthResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TListSentryPrivilegesByAuthResponse(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - PropertyName
//  - DefaultValue
type TSentryConfigValueRequest struct {
	ProtocolVersion int32   `thrift:"protocol_version,1,required" json:"protocol_version"`
	PropertyName    string  `thrift:"propertyName,2,required" json:"propertyName"`
	DefaultValue    *string `thrift:"defaultValue,3" json:"defaultValue,omitempty"`
}

func NewTSentryConfigValueRequest() *TSentryConfigValueRequest {
	return &TSentryConfigValueRequest{
		ProtocolVersion: 2,
	}
}

func (p *TSentryConfigValueRequest) GetProtocolVersion() int32 {
	return p.ProtocolVersion
}

func (p *TSentryConfigValueRequest) GetPropertyName() string {
	return p.PropertyName
}

var TSentryConfigValueRequest_DefaultValue_DEFAULT string

func (p *TSentryConfigValueRequest) GetDefaultValue() string {
	if !p.IsSetDefaultValue() {
		return TSentryConfigValueRequest_DefaultValue_DEFAULT
	}
	return *p.DefaultValue
}
func (p *TSentryConfigValueRequest) IsSetDefaultValue() bool {
	return p.DefaultValue != nil
}

func (p *TSentryConfigValueRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetProtocolVersion bool = false
	var issetPropertyName bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetProtocolVersion = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetPropertyName = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetProtocolVersion {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"))
	}
	if !issetPropertyName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PropertyName is not set"))
	}
	return nil
}

func (p *TSentryConfigValueRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ProtocolVersion = v
	}
	return nil
}

func (p *TSentryConfigValueRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.PropertyName = v
	}
	return nil
}

func (p *TSentryConfigValueRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.DefaultValue = &v
	}
	return nil
}

func (p *TSentryConfigValueRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TSentryConfigValueRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TSentryConfigValueRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err)
	}
	return err
}

func (p *TSentryConfigValueRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("propertyName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:propertyName: ", p), err)
	}
	if err := oprot.WriteString(string(p.PropertyName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.propertyName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:propertyName: ", p), err)
	}
	return err
}

func (p *TSentryConfigValueRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDefaultValue() {
		if err := oprot.WriteFieldBegin("defaultValue", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:defaultValue: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DefaultValue)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.defaultValue (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:defaultValue: ", p), err)
		}
	}
	return err
}

func (p *TSentryConfigValueRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TSentryConfigValueRequest(%+v)", *p)
}

// Attributes:
//  - Status
//  - Value
type TSentryConfigValueResponse struct {
	Status *sentry_common_service.TSentryResponseStatus `thrift:"status,1,required" json:"status"`
	Value  *string                                      `thrift:"value,2" json:"value,omitempty"`
}

func NewTSentryConfigValueResponse() *TSentryConfigValueResponse {
	return &TSentryConfigValueResponse{}
}

var TSentryConfigValueResponse_Status_DEFAULT *sentry_common_service.TSentryResponseStatus

func (p *TSentryConfigValueResponse) GetStatus() *sentry_common_service.TSentryResponseStatus {
	if !p.IsSetStatus() {
		return TSentryConfigValueResponse_Status_DEFAULT
	}
	return p.Status
}

var TSentryConfigValueResponse_Value_DEFAULT string

func (p *TSentryConfigValueResponse) GetValue() string {
	if !p.IsSetValue() {
		return TSentryConfigValueResponse_Value_DEFAULT
	}
	return *p.Value
}
func (p *TSentryConfigValueResponse) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TSentryConfigValueResponse) IsSetValue() bool {
	return p.Value != nil
}

func (p *TSentryConfigValueResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetStatus = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	return nil
}

func (p *TSentryConfigValueResponse) readField1(iprot thrift.TProtocol) error {
	p.Status = &sentry_common_service.TSentryResponseStatus{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *TSentryConfigValueResponse) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Value = &v
	}
	return nil
}

func (p *TSentryConfigValueResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TSentryConfigValueResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TSentryConfigValueResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *TSentryConfigValueResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetValue() {
		if err := oprot.WriteFieldBegin("value", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Value)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err)
		}
	}
	return err
}

func (p *TSentryConfigValueResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TSentryConfigValueResponse(%+v)", *p)
}

// Attributes:
//  - GroupRolesMap
//  - RolePrivilegesMap
//  - UserRolesMap
type TSentryMappingData struct {
	GroupRolesMap     map[string]map[string]bool            `thrift:"groupRolesMap,1" json:"groupRolesMap,omitempty"`
	RolePrivilegesMap map[string]map[*TSentryPrivilege]bool `thrift:"rolePrivilegesMap,2" json:"rolePrivilegesMap,omitempty"`
	UserRolesMap      map[string]map[string]bool            `thrift:"userRolesMap,3" json:"userRolesMap,omitempty"`
}

func NewTSentryMappingData() *TSentryMappingData {
	return &TSentryMappingData{}
}

var TSentryMappingData_GroupRolesMap_DEFAULT map[string]map[string]bool

func (p *TSentryMappingData) GetGroupRolesMap() map[string]map[string]bool {
	return p.GroupRolesMap
}

var TSentryMappingData_RolePrivilegesMap_DEFAULT map[string]map[*TSentryPrivilege]bool

func (p *TSentryMappingData) GetRolePrivilegesMap() map[string]map[*TSentryPrivilege]bool {
	return p.RolePrivilegesMap
}

var TSentryMappingData_UserRolesMap_DEFAULT map[string]map[string]bool

func (p *TSentryMappingData) GetUserRolesMap() map[string]map[string]bool {
	return p.UserRolesMap
}
func (p *TSentryMappingData) IsSetGroupRolesMap() bool {
	return p.GroupRolesMap != nil
}

func (p *TSentryMappingData) IsSetRolePrivilegesMap() bool {
	return p.RolePrivilegesMap != nil
}

func (p *TSentryMappingData) IsSetUserRolesMap() bool {
	return p.UserRolesMap != nil
}

func (p *TSentryMappingData) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TSentryMappingData) readField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]map[string]bool, size)
	p.GroupRolesMap = tMap
	for i := 0; i < size; i++ {
		var _key21 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key21 = v
		}
		_, size, err := iprot.ReadSetBegin()
		if err != nil {
			return thrift.PrependError("error reading set begin: ", err)
		}
		tSet := make(map[string]bool, size)
		_val22 := tSet
		for i := 0; i < size; i++ {
			var _elem23 string
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_elem23 = v
			}
			_val22[_elem23] = true
		}
		if err := iprot.ReadSetEnd(); err != nil {
			return thrift.PrependError("error reading set end: ", err)
		}
		p.GroupRolesMap[_key21] = _val22
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TSentryMappingData) readField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]map[*TSentryPrivilege]bool, size)
	p.RolePrivilegesMap = tMap
	for i := 0; i < size; i++ {
		var _key24 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key24 = v
		}
		_, size, err := iprot.ReadSetBegin()
		if err != nil {
			return thrift.PrependError("error reading set begin: ", err)
		}
		tSet := make(map[*TSentryPrivilege]bool, size)
		_val25 := tSet
		for i := 0; i < size; i++ {
			_elem26 := &TSentryPrivilege{
				GrantOption: 0,
			}
			if err := _elem26.Read(iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem26), err)
			}
			_val25[_elem26] = true
		}
		if err := iprot.ReadSetEnd(); err != nil {
			return thrift.PrependError("error reading set end: ", err)
		}
		p.RolePrivilegesMap[_key24] = _val25
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TSentryMappingData) readField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]map[string]bool, size)
	p.UserRolesMap = tMap
	for i := 0; i < size; i++ {
		var _key27 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key27 = v
		}
		_, size, err := iprot.ReadSetBegin()
		if err != nil {
			return thrift.PrependError("error reading set begin: ", err)
		}
		tSet := make(map[string]bool, size)
		_val28 := tSet
		for i := 0; i < size; i++ {
			var _elem29 string
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_elem29 = v
			}
			_val28[_elem29] = true
		}
		if err := iprot.ReadSetEnd(); err != nil {
			return thrift.PrependError("error reading set end: ", err)
		}
		p.UserRolesMap[_key27] = _val28
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TSentryMappingData) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TSentryMappingData"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TSentryMappingData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupRolesMap() {
		if err := oprot.WriteFieldBegin("groupRolesMap", thrift.MAP, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:groupRolesMap: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.SET, len(p.GroupRolesMap)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.GroupRolesMap {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteSetBegin(thrift.STRING, len(v)); err != nil {
				return thrift.PrependError("error writing set begin: ", err)
			}
			for v, _ := range v {
				if err := oprot.WriteString(string(v)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
			}
			if err := oprot.WriteSetEnd(); err != nil {
				return thrift.PrependError("error writing set end: ", err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:groupRolesMap: ", p), err)
		}
	}
	return err
}

func (p *TSentryMappingData) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRolePrivilegesMap() {
		if err := oprot.WriteFieldBegin("rolePrivilegesMap", thrift.MAP, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:rolePrivilegesMap: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.SET, len(p.RolePrivilegesMap)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.RolePrivilegesMap {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteSetBegin(thrift.STRUCT, len(v)); err != nil {
				return thrift.PrependError("error writing set begin: ", err)
			}
			for v, _ := range v {
				if err := v.Write(oprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
				}
			}
			if err := oprot.WriteSetEnd(); err != nil {
				return thrift.PrependError("error writing set end: ", err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:rolePrivilegesMap: ", p), err)
		}
	}
	return err
}

func (p *TSentryMappingData) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserRolesMap() {
		if err := oprot.WriteFieldBegin("userRolesMap", thrift.MAP, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:userRolesMap: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.SET, len(p.UserRolesMap)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.UserRolesMap {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteSetBegin(thrift.STRING, len(v)); err != nil {
				return thrift.PrependError("error writing set begin: ", err)
			}
			for v, _ := range v {
				if err := oprot.WriteString(string(v)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
			}
			if err := oprot.WriteSetEnd(); err != nil {
				return thrift.PrependError("error writing set end: ", err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:userRolesMap: ", p), err)
		}
	}
	return err
}

func (p *TSentryMappingData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TSentryMappingData(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - ObjectPath
type TSentryExportMappingDataRequest struct {
	ProtocolVersion   int32   `thrift:"protocol_version,1,required" json:"protocol_version"`
	RequestorUserName string  `thrift:"requestorUserName,2,required" json:"requestorUserName"`
	ObjectPath        *string `thrift:"objectPath,3" json:"objectPath,omitempty"`
}

func NewTSentryExportMappingDataRequest() *TSentryExportMappingDataRequest {
	return &TSentryExportMappingDataRequest{
		ProtocolVersion: 1,
	}
}

func (p *TSentryExportMappingDataRequest) GetProtocolVersion() int32 {
	return p.ProtocolVersion
}

func (p *TSentryExportMappingDataRequest) GetRequestorUserName() string {
	return p.RequestorUserName
}

var TSentryExportMappingDataRequest_ObjectPath_DEFAULT string

func (p *TSentryExportMappingDataRequest) GetObjectPath() string {
	if !p.IsSetObjectPath() {
		return TSentryExportMappingDataRequest_ObjectPath_DEFAULT
	}
	return *p.ObjectPath
}
func (p *TSentryExportMappingDataRequest) IsSetObjectPath() bool {
	return p.ObjectPath != nil
}

func (p *TSentryExportMappingDataRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetProtocolVersion bool = false
	var issetRequestorUserName bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetProtocolVersion = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetRequestorUserName = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetProtocolVersion {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"))
	}
	if !issetRequestorUserName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"))
	}
	return nil
}

func (p *TSentryExportMappingDataRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ProtocolVersion = v
	}
	return nil
}

func (p *TSentryExportMappingDataRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RequestorUserName = v
	}
	return nil
}

func (p *TSentryExportMappingDataRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ObjectPath = &v
	}
	return nil
}

func (p *TSentryExportMappingDataRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TSentryExportMappingDataRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TSentryExportMappingDataRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err)
	}
	return err
}

func (p *TSentryExportMappingDataRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err)
	}
	if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err)
	}
	return err
}

func (p *TSentryExportMappingDataRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetObjectPath() {
		if err := oprot.WriteFieldBegin("objectPath", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:objectPath: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ObjectPath)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.objectPath (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:objectPath: ", p), err)
		}
	}
	return err
}

func (p *TSentryExportMappingDataRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TSentryExportMappingDataRequest(%+v)", *p)
}

// Attributes:
//  - Status
//  - MappingData
type TSentryExportMappingDataResponse struct {
	Status      *sentry_common_service.TSentryResponseStatus `thrift:"status,1,required" json:"status"`
	MappingData *TSentryMappingData                          `thrift:"mappingData,2,required" json:"mappingData"`
}

func NewTSentryExportMappingDataResponse() *TSentryExportMappingDataResponse {
	return &TSentryExportMappingDataResponse{}
}

var TSentryExportMappingDataResponse_Status_DEFAULT *sentry_common_service.TSentryResponseStatus

func (p *TSentryExportMappingDataResponse) GetStatus() *sentry_common_service.TSentryResponseStatus {
	if !p.IsSetStatus() {
		return TSentryExportMappingDataResponse_Status_DEFAULT
	}
	return p.Status
}

var TSentryExportMappingDataResponse_MappingData_DEFAULT *TSentryMappingData

func (p *TSentryExportMappingDataResponse) GetMappingData() *TSentryMappingData {
	if !p.IsSetMappingData() {
		return TSentryExportMappingDataResponse_MappingData_DEFAULT
	}
	return p.MappingData
}
func (p *TSentryExportMappingDataResponse) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TSentryExportMappingDataResponse) IsSetMappingData() bool {
	return p.MappingData != nil
}

func (p *TSentryExportMappingDataResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false
	var issetMappingData bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetStatus = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetMappingData = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	if !issetMappingData {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MappingData is not set"))
	}
	return nil
}

func (p *TSentryExportMappingDataResponse) readField1(iprot thrift.TProtocol) error {
	p.Status = &sentry_common_service.TSentryResponseStatus{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *TSentryExportMappingDataResponse) readField2(iprot thrift.TProtocol) error {
	p.MappingData = &TSentryMappingData{}
	if err := p.MappingData.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.MappingData), err)
	}
	return nil
}

func (p *TSentryExportMappingDataResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TSentryExportMappingDataResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TSentryExportMappingDataResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *TSentryExportMappingDataResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mappingData", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mappingData: ", p), err)
	}
	if err := p.MappingData.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.MappingData), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mappingData: ", p), err)
	}
	return err
}

func (p *TSentryExportMappingDataResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TSentryExportMappingDataResponse(%+v)", *p)
}

// Attributes:
//  - ProtocolVersion
//  - RequestorUserName
//  - OverwriteRole
//  - MappingData
type TSentryImportMappingDataRequest struct {
	ProtocolVersion   int32               `thrift:"protocol_version,1,required" json:"protocol_version"`
	RequestorUserName string              `thrift:"requestorUserName,2,required" json:"requestorUserName"`
	OverwriteRole     bool                `thrift:"overwriteRole,3,required" json:"overwriteRole"`
	MappingData       *TSentryMappingData `thrift:"mappingData,4,required" json:"mappingData"`
}

func NewTSentryImportMappingDataRequest() *TSentryImportMappingDataRequest {
	return &TSentryImportMappingDataRequest{
		ProtocolVersion: 1,
	}
}

func (p *TSentryImportMappingDataRequest) GetProtocolVersion() int32 {
	return p.ProtocolVersion
}

func (p *TSentryImportMappingDataRequest) GetRequestorUserName() string {
	return p.RequestorUserName
}

func (p *TSentryImportMappingDataRequest) GetOverwriteRole() bool {
	return p.OverwriteRole
}

var TSentryImportMappingDataRequest_MappingData_DEFAULT *TSentryMappingData

func (p *TSentryImportMappingDataRequest) GetMappingData() *TSentryMappingData {
	if !p.IsSetMappingData() {
		return TSentryImportMappingDataRequest_MappingData_DEFAULT
	}
	return p.MappingData
}
func (p *TSentryImportMappingDataRequest) IsSetMappingData() bool {
	return p.MappingData != nil
}

func (p *TSentryImportMappingDataRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetProtocolVersion bool = false
	var issetRequestorUserName bool = false
	var issetOverwriteRole bool = false
	var issetMappingData bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetProtocolVersion = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetRequestorUserName = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetOverwriteRole = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetMappingData = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetProtocolVersion {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProtocolVersion is not set"))
	}
	if !issetRequestorUserName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestorUserName is not set"))
	}
	if !issetOverwriteRole {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field OverwriteRole is not set"))
	}
	if !issetMappingData {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MappingData is not set"))
	}
	return nil
}

func (p *TSentryImportMappingDataRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ProtocolVersion = v
	}
	return nil
}

func (p *TSentryImportMappingDataRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RequestorUserName = v
	}
	return nil
}

func (p *TSentryImportMappingDataRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.OverwriteRole = v
	}
	return nil
}

func (p *TSentryImportMappingDataRequest) readField4(iprot thrift.TProtocol) error {
	p.MappingData = &TSentryMappingData{}
	if err := p.MappingData.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.MappingData), err)
	}
	return nil
}

func (p *TSentryImportMappingDataRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TSentryImportMappingDataRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TSentryImportMappingDataRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:protocol_version: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.protocol_version (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:protocol_version: ", p), err)
	}
	return err
}

func (p *TSentryImportMappingDataRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestorUserName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestorUserName: ", p), err)
	}
	if err := oprot.WriteString(string(p.RequestorUserName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.requestorUserName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestorUserName: ", p), err)
	}
	return err
}

func (p *TSentryImportMappingDataRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("overwriteRole", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:overwriteRole: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.OverwriteRole)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.overwriteRole (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:overwriteRole: ", p), err)
	}
	return err
}

func (p *TSentryImportMappingDataRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mappingData", thrift.STRUCT, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:mappingData: ", p), err)
	}
	if err := p.MappingData.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.MappingData), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:mappingData: ", p), err)
	}
	return err
}

func (p *TSentryImportMappingDataRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TSentryImportMappingDataRequest(%+v)", *p)
}

// Attributes:
//  - Status
type TSentryImportMappingDataResponse struct {
	Status *sentry_common_service.TSentryResponseStatus `thrift:"status,1,required" json:"status"`
}

func NewTSentryImportMappingDataResponse() *TSentryImportMappingDataResponse {
	return &TSentryImportMappingDataResponse{}
}

var TSentryImportMappingDataResponse_Status_DEFAULT *sentry_common_service.TSentryResponseStatus

func (p *TSentryImportMappingDataResponse) GetStatus() *sentry_common_service.TSentryResponseStatus {
	if !p.IsSetStatus() {
		return TSentryImportMappingDataResponse_Status_DEFAULT
	}
	return p.Status
}
func (p *TSentryImportMappingDataResponse) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TSentryImportMappingDataResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetStatus = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	return nil
}

func (p *TSentryImportMappingDataResponse) readField1(iprot thrift.TProtocol) error {
	p.Status = &sentry_common_service.TSentryResponseStatus{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *TSentryImportMappingDataResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TSentryImportMappingDataResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TSentryImportMappingDataResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *TSentryImportMappingDataResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TSentryImportMappingDataResponse(%+v)", *p)
}
