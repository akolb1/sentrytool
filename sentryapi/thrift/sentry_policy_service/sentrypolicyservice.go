// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package sentry_policy_service

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"github.com/akolb1/sentrytool/sentryapi/thrift/sentry_common_service"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = sentry_common_service.GoUnusedProtection__

type SentryPolicyService interface {
	// Parameters:
	//  - Request
	CreateSentryRole(request *TCreateSentryRoleRequest) (r *TCreateSentryRoleResponse, err error)
	// Parameters:
	//  - Request
	DropSentryRole(request *TDropSentryRoleRequest) (r *TDropSentryRoleResponse, err error)
	// Parameters:
	//  - Request
	AlterSentryRoleGrantPrivilege(request *TAlterSentryRoleGrantPrivilegeRequest) (r *TAlterSentryRoleGrantPrivilegeResponse, err error)
	// Parameters:
	//  - Request
	AlterSentryRoleRevokePrivilege(request *TAlterSentryRoleRevokePrivilegeRequest) (r *TAlterSentryRoleRevokePrivilegeResponse, err error)
	// Parameters:
	//  - Request
	AlterSentryRoleAddGroups(request *TAlterSentryRoleAddGroupsRequest) (r *TAlterSentryRoleAddGroupsResponse, err error)
	// Parameters:
	//  - Request
	AlterSentryRoleDeleteGroups(request *TAlterSentryRoleDeleteGroupsRequest) (r *TAlterSentryRoleDeleteGroupsResponse, err error)
	// Parameters:
	//  - Request
	AlterSentryRoleAddUsers(request *TAlterSentryRoleAddUsersRequest) (r *TAlterSentryRoleAddUsersResponse, err error)
	// Parameters:
	//  - Request
	AlterSentryRoleDeleteUsers(request *TAlterSentryRoleDeleteUsersRequest) (r *TAlterSentryRoleDeleteUsersResponse, err error)
	// Parameters:
	//  - Request
	ListSentryRolesByGroup(request *TListSentryRolesRequest) (r *TListSentryRolesResponse, err error)
	// Parameters:
	//  - Request
	ListSentryRolesByUser(request *TListSentryRolesForUserRequest) (r *TListSentryRolesResponse, err error)
	// Parameters:
	//  - Request
	ListSentryPrivilegesByRole(request *TListSentryPrivilegesRequest) (r *TListSentryPrivilegesResponse, err error)
	// Parameters:
	//  - Request
	ListSentryPrivilegesForProvider(request *TListSentryPrivilegesForProviderRequest) (r *TListSentryPrivilegesForProviderResponse, err error)
	// Parameters:
	//  - Request
	DropSentryPrivilege(request *TDropPrivilegesRequest) (r *TDropPrivilegesResponse, err error)
	// Parameters:
	//  - Request
	RenameSentryPrivilege(request *TRenamePrivilegesRequest) (r *TRenamePrivilegesResponse, err error)
	// Parameters:
	//  - Request
	ListSentryPrivilegesByAuthorizable(request *TListSentryPrivilegesByAuthRequest) (r *TListSentryPrivilegesByAuthResponse, err error)
	// Parameters:
	//  - Request
	GetSentryConfigValue(request *TSentryConfigValueRequest) (r *TSentryConfigValueResponse, err error)
	// Parameters:
	//  - Request
	ExportSentryMappingData(request *TSentryExportMappingDataRequest) (r *TSentryExportMappingDataResponse, err error)
	// Parameters:
	//  - Request
	ImportSentryMappingData(request *TSentryImportMappingDataRequest) (r *TSentryImportMappingDataResponse, err error)
}

type SentryPolicyServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewSentryPolicyServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *SentryPolicyServiceClient {
	return &SentryPolicyServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewSentryPolicyServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *SentryPolicyServiceClient {
	return &SentryPolicyServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - Request
func (p *SentryPolicyServiceClient) CreateSentryRole(request *TCreateSentryRoleRequest) (r *TCreateSentryRoleResponse, err error) {
	if err = p.sendCreateSentryRole(request); err != nil {
		return
	}
	return p.recvCreateSentryRole()
}

func (p *SentryPolicyServiceClient) sendCreateSentryRole(request *TCreateSentryRoleRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("create_sentry_role", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SentryPolicyServiceCreateSentryRoleArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SentryPolicyServiceClient) recvCreateSentryRole() (value *TCreateSentryRoleResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "create_sentry_role" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "create_sentry_role failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "create_sentry_role failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error30 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error31 error
		error31, err = error30.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error31
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "create_sentry_role failed: invalid message type")
		return
	}
	result := SentryPolicyServiceCreateSentryRoleResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *SentryPolicyServiceClient) DropSentryRole(request *TDropSentryRoleRequest) (r *TDropSentryRoleResponse, err error) {
	if err = p.sendDropSentryRole(request); err != nil {
		return
	}
	return p.recvDropSentryRole()
}

func (p *SentryPolicyServiceClient) sendDropSentryRole(request *TDropSentryRoleRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("drop_sentry_role", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SentryPolicyServiceDropSentryRoleArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SentryPolicyServiceClient) recvDropSentryRole() (value *TDropSentryRoleResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "drop_sentry_role" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "drop_sentry_role failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "drop_sentry_role failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error32 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error33 error
		error33, err = error32.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error33
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "drop_sentry_role failed: invalid message type")
		return
	}
	result := SentryPolicyServiceDropSentryRoleResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *SentryPolicyServiceClient) AlterSentryRoleGrantPrivilege(request *TAlterSentryRoleGrantPrivilegeRequest) (r *TAlterSentryRoleGrantPrivilegeResponse, err error) {
	if err = p.sendAlterSentryRoleGrantPrivilege(request); err != nil {
		return
	}
	return p.recvAlterSentryRoleGrantPrivilege()
}

func (p *SentryPolicyServiceClient) sendAlterSentryRoleGrantPrivilege(request *TAlterSentryRoleGrantPrivilegeRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("alter_sentry_role_grant_privilege", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SentryPolicyServiceAlterSentryRoleGrantPrivilegeArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SentryPolicyServiceClient) recvAlterSentryRoleGrantPrivilege() (value *TAlterSentryRoleGrantPrivilegeResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "alter_sentry_role_grant_privilege" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "alter_sentry_role_grant_privilege failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "alter_sentry_role_grant_privilege failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error34 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error35 error
		error35, err = error34.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error35
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "alter_sentry_role_grant_privilege failed: invalid message type")
		return
	}
	result := SentryPolicyServiceAlterSentryRoleGrantPrivilegeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *SentryPolicyServiceClient) AlterSentryRoleRevokePrivilege(request *TAlterSentryRoleRevokePrivilegeRequest) (r *TAlterSentryRoleRevokePrivilegeResponse, err error) {
	if err = p.sendAlterSentryRoleRevokePrivilege(request); err != nil {
		return
	}
	return p.recvAlterSentryRoleRevokePrivilege()
}

func (p *SentryPolicyServiceClient) sendAlterSentryRoleRevokePrivilege(request *TAlterSentryRoleRevokePrivilegeRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("alter_sentry_role_revoke_privilege", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SentryPolicyServiceAlterSentryRoleRevokePrivilegeArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SentryPolicyServiceClient) recvAlterSentryRoleRevokePrivilege() (value *TAlterSentryRoleRevokePrivilegeResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "alter_sentry_role_revoke_privilege" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "alter_sentry_role_revoke_privilege failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "alter_sentry_role_revoke_privilege failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error36 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error37 error
		error37, err = error36.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error37
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "alter_sentry_role_revoke_privilege failed: invalid message type")
		return
	}
	result := SentryPolicyServiceAlterSentryRoleRevokePrivilegeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *SentryPolicyServiceClient) AlterSentryRoleAddGroups(request *TAlterSentryRoleAddGroupsRequest) (r *TAlterSentryRoleAddGroupsResponse, err error) {
	if err = p.sendAlterSentryRoleAddGroups(request); err != nil {
		return
	}
	return p.recvAlterSentryRoleAddGroups()
}

func (p *SentryPolicyServiceClient) sendAlterSentryRoleAddGroups(request *TAlterSentryRoleAddGroupsRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("alter_sentry_role_add_groups", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SentryPolicyServiceAlterSentryRoleAddGroupsArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SentryPolicyServiceClient) recvAlterSentryRoleAddGroups() (value *TAlterSentryRoleAddGroupsResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "alter_sentry_role_add_groups" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "alter_sentry_role_add_groups failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "alter_sentry_role_add_groups failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error38 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error39 error
		error39, err = error38.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error39
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "alter_sentry_role_add_groups failed: invalid message type")
		return
	}
	result := SentryPolicyServiceAlterSentryRoleAddGroupsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *SentryPolicyServiceClient) AlterSentryRoleDeleteGroups(request *TAlterSentryRoleDeleteGroupsRequest) (r *TAlterSentryRoleDeleteGroupsResponse, err error) {
	if err = p.sendAlterSentryRoleDeleteGroups(request); err != nil {
		return
	}
	return p.recvAlterSentryRoleDeleteGroups()
}

func (p *SentryPolicyServiceClient) sendAlterSentryRoleDeleteGroups(request *TAlterSentryRoleDeleteGroupsRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("alter_sentry_role_delete_groups", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SentryPolicyServiceAlterSentryRoleDeleteGroupsArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SentryPolicyServiceClient) recvAlterSentryRoleDeleteGroups() (value *TAlterSentryRoleDeleteGroupsResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "alter_sentry_role_delete_groups" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "alter_sentry_role_delete_groups failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "alter_sentry_role_delete_groups failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error40 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error41 error
		error41, err = error40.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error41
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "alter_sentry_role_delete_groups failed: invalid message type")
		return
	}
	result := SentryPolicyServiceAlterSentryRoleDeleteGroupsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *SentryPolicyServiceClient) AlterSentryRoleAddUsers(request *TAlterSentryRoleAddUsersRequest) (r *TAlterSentryRoleAddUsersResponse, err error) {
	if err = p.sendAlterSentryRoleAddUsers(request); err != nil {
		return
	}
	return p.recvAlterSentryRoleAddUsers()
}

func (p *SentryPolicyServiceClient) sendAlterSentryRoleAddUsers(request *TAlterSentryRoleAddUsersRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("alter_sentry_role_add_users", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SentryPolicyServiceAlterSentryRoleAddUsersArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SentryPolicyServiceClient) recvAlterSentryRoleAddUsers() (value *TAlterSentryRoleAddUsersResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "alter_sentry_role_add_users" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "alter_sentry_role_add_users failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "alter_sentry_role_add_users failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error42 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error43 error
		error43, err = error42.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error43
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "alter_sentry_role_add_users failed: invalid message type")
		return
	}
	result := SentryPolicyServiceAlterSentryRoleAddUsersResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *SentryPolicyServiceClient) AlterSentryRoleDeleteUsers(request *TAlterSentryRoleDeleteUsersRequest) (r *TAlterSentryRoleDeleteUsersResponse, err error) {
	if err = p.sendAlterSentryRoleDeleteUsers(request); err != nil {
		return
	}
	return p.recvAlterSentryRoleDeleteUsers()
}

func (p *SentryPolicyServiceClient) sendAlterSentryRoleDeleteUsers(request *TAlterSentryRoleDeleteUsersRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("alter_sentry_role_delete_users", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SentryPolicyServiceAlterSentryRoleDeleteUsersArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SentryPolicyServiceClient) recvAlterSentryRoleDeleteUsers() (value *TAlterSentryRoleDeleteUsersResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "alter_sentry_role_delete_users" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "alter_sentry_role_delete_users failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "alter_sentry_role_delete_users failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error44 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error45 error
		error45, err = error44.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error45
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "alter_sentry_role_delete_users failed: invalid message type")
		return
	}
	result := SentryPolicyServiceAlterSentryRoleDeleteUsersResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *SentryPolicyServiceClient) ListSentryRolesByGroup(request *TListSentryRolesRequest) (r *TListSentryRolesResponse, err error) {
	if err = p.sendListSentryRolesByGroup(request); err != nil {
		return
	}
	return p.recvListSentryRolesByGroup()
}

func (p *SentryPolicyServiceClient) sendListSentryRolesByGroup(request *TListSentryRolesRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("list_sentry_roles_by_group", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SentryPolicyServiceListSentryRolesByGroupArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SentryPolicyServiceClient) recvListSentryRolesByGroup() (value *TListSentryRolesResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "list_sentry_roles_by_group" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "list_sentry_roles_by_group failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "list_sentry_roles_by_group failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error46 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error47 error
		error47, err = error46.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error47
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "list_sentry_roles_by_group failed: invalid message type")
		return
	}
	result := SentryPolicyServiceListSentryRolesByGroupResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *SentryPolicyServiceClient) ListSentryRolesByUser(request *TListSentryRolesForUserRequest) (r *TListSentryRolesResponse, err error) {
	if err = p.sendListSentryRolesByUser(request); err != nil {
		return
	}
	return p.recvListSentryRolesByUser()
}

func (p *SentryPolicyServiceClient) sendListSentryRolesByUser(request *TListSentryRolesForUserRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("list_sentry_roles_by_user", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SentryPolicyServiceListSentryRolesByUserArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SentryPolicyServiceClient) recvListSentryRolesByUser() (value *TListSentryRolesResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "list_sentry_roles_by_user" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "list_sentry_roles_by_user failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "list_sentry_roles_by_user failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error48 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error49 error
		error49, err = error48.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error49
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "list_sentry_roles_by_user failed: invalid message type")
		return
	}
	result := SentryPolicyServiceListSentryRolesByUserResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *SentryPolicyServiceClient) ListSentryPrivilegesByRole(request *TListSentryPrivilegesRequest) (r *TListSentryPrivilegesResponse, err error) {
	if err = p.sendListSentryPrivilegesByRole(request); err != nil {
		return
	}
	return p.recvListSentryPrivilegesByRole()
}

func (p *SentryPolicyServiceClient) sendListSentryPrivilegesByRole(request *TListSentryPrivilegesRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("list_sentry_privileges_by_role", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SentryPolicyServiceListSentryPrivilegesByRoleArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SentryPolicyServiceClient) recvListSentryPrivilegesByRole() (value *TListSentryPrivilegesResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "list_sentry_privileges_by_role" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "list_sentry_privileges_by_role failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "list_sentry_privileges_by_role failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error50 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error51 error
		error51, err = error50.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error51
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "list_sentry_privileges_by_role failed: invalid message type")
		return
	}
	result := SentryPolicyServiceListSentryPrivilegesByRoleResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *SentryPolicyServiceClient) ListSentryPrivilegesForProvider(request *TListSentryPrivilegesForProviderRequest) (r *TListSentryPrivilegesForProviderResponse, err error) {
	if err = p.sendListSentryPrivilegesForProvider(request); err != nil {
		return
	}
	return p.recvListSentryPrivilegesForProvider()
}

func (p *SentryPolicyServiceClient) sendListSentryPrivilegesForProvider(request *TListSentryPrivilegesForProviderRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("list_sentry_privileges_for_provider", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SentryPolicyServiceListSentryPrivilegesForProviderArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SentryPolicyServiceClient) recvListSentryPrivilegesForProvider() (value *TListSentryPrivilegesForProviderResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "list_sentry_privileges_for_provider" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "list_sentry_privileges_for_provider failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "list_sentry_privileges_for_provider failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error52 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error53 error
		error53, err = error52.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error53
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "list_sentry_privileges_for_provider failed: invalid message type")
		return
	}
	result := SentryPolicyServiceListSentryPrivilegesForProviderResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *SentryPolicyServiceClient) DropSentryPrivilege(request *TDropPrivilegesRequest) (r *TDropPrivilegesResponse, err error) {
	if err = p.sendDropSentryPrivilege(request); err != nil {
		return
	}
	return p.recvDropSentryPrivilege()
}

func (p *SentryPolicyServiceClient) sendDropSentryPrivilege(request *TDropPrivilegesRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("drop_sentry_privilege", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SentryPolicyServiceDropSentryPrivilegeArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SentryPolicyServiceClient) recvDropSentryPrivilege() (value *TDropPrivilegesResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "drop_sentry_privilege" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "drop_sentry_privilege failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "drop_sentry_privilege failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error54 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error55 error
		error55, err = error54.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error55
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "drop_sentry_privilege failed: invalid message type")
		return
	}
	result := SentryPolicyServiceDropSentryPrivilegeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *SentryPolicyServiceClient) RenameSentryPrivilege(request *TRenamePrivilegesRequest) (r *TRenamePrivilegesResponse, err error) {
	if err = p.sendRenameSentryPrivilege(request); err != nil {
		return
	}
	return p.recvRenameSentryPrivilege()
}

func (p *SentryPolicyServiceClient) sendRenameSentryPrivilege(request *TRenamePrivilegesRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rename_sentry_privilege", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SentryPolicyServiceRenameSentryPrivilegeArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SentryPolicyServiceClient) recvRenameSentryPrivilege() (value *TRenamePrivilegesResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rename_sentry_privilege" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rename_sentry_privilege failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rename_sentry_privilege failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error56 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error57 error
		error57, err = error56.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error57
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rename_sentry_privilege failed: invalid message type")
		return
	}
	result := SentryPolicyServiceRenameSentryPrivilegeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *SentryPolicyServiceClient) ListSentryPrivilegesByAuthorizable(request *TListSentryPrivilegesByAuthRequest) (r *TListSentryPrivilegesByAuthResponse, err error) {
	if err = p.sendListSentryPrivilegesByAuthorizable(request); err != nil {
		return
	}
	return p.recvListSentryPrivilegesByAuthorizable()
}

func (p *SentryPolicyServiceClient) sendListSentryPrivilegesByAuthorizable(request *TListSentryPrivilegesByAuthRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("list_sentry_privileges_by_authorizable", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SentryPolicyServiceListSentryPrivilegesByAuthorizableArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SentryPolicyServiceClient) recvListSentryPrivilegesByAuthorizable() (value *TListSentryPrivilegesByAuthResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "list_sentry_privileges_by_authorizable" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "list_sentry_privileges_by_authorizable failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "list_sentry_privileges_by_authorizable failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error58 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error59 error
		error59, err = error58.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error59
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "list_sentry_privileges_by_authorizable failed: invalid message type")
		return
	}
	result := SentryPolicyServiceListSentryPrivilegesByAuthorizableResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *SentryPolicyServiceClient) GetSentryConfigValue(request *TSentryConfigValueRequest) (r *TSentryConfigValueResponse, err error) {
	if err = p.sendGetSentryConfigValue(request); err != nil {
		return
	}
	return p.recvGetSentryConfigValue()
}

func (p *SentryPolicyServiceClient) sendGetSentryConfigValue(request *TSentryConfigValueRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_sentry_config_value", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SentryPolicyServiceGetSentryConfigValueArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SentryPolicyServiceClient) recvGetSentryConfigValue() (value *TSentryConfigValueResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_sentry_config_value" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_sentry_config_value failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_sentry_config_value failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error60 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error61 error
		error61, err = error60.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error61
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_sentry_config_value failed: invalid message type")
		return
	}
	result := SentryPolicyServiceGetSentryConfigValueResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *SentryPolicyServiceClient) ExportSentryMappingData(request *TSentryExportMappingDataRequest) (r *TSentryExportMappingDataResponse, err error) {
	if err = p.sendExportSentryMappingData(request); err != nil {
		return
	}
	return p.recvExportSentryMappingData()
}

func (p *SentryPolicyServiceClient) sendExportSentryMappingData(request *TSentryExportMappingDataRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("export_sentry_mapping_data", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SentryPolicyServiceExportSentryMappingDataArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SentryPolicyServiceClient) recvExportSentryMappingData() (value *TSentryExportMappingDataResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "export_sentry_mapping_data" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "export_sentry_mapping_data failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "export_sentry_mapping_data failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error62 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error63 error
		error63, err = error62.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error63
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "export_sentry_mapping_data failed: invalid message type")
		return
	}
	result := SentryPolicyServiceExportSentryMappingDataResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *SentryPolicyServiceClient) ImportSentryMappingData(request *TSentryImportMappingDataRequest) (r *TSentryImportMappingDataResponse, err error) {
	if err = p.sendImportSentryMappingData(request); err != nil {
		return
	}
	return p.recvImportSentryMappingData()
}

func (p *SentryPolicyServiceClient) sendImportSentryMappingData(request *TSentryImportMappingDataRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("import_sentry_mapping_data", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SentryPolicyServiceImportSentryMappingDataArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SentryPolicyServiceClient) recvImportSentryMappingData() (value *TSentryImportMappingDataResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "import_sentry_mapping_data" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "import_sentry_mapping_data failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "import_sentry_mapping_data failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error64 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error65 error
		error65, err = error64.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error65
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "import_sentry_mapping_data failed: invalid message type")
		return
	}
	result := SentryPolicyServiceImportSentryMappingDataResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type SentryPolicyServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      SentryPolicyService
}

func (p *SentryPolicyServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *SentryPolicyServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *SentryPolicyServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewSentryPolicyServiceProcessor(handler SentryPolicyService) *SentryPolicyServiceProcessor {

	self66 := &SentryPolicyServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self66.processorMap["create_sentry_role"] = &sentryPolicyServiceProcessorCreateSentryRole{handler: handler}
	self66.processorMap["drop_sentry_role"] = &sentryPolicyServiceProcessorDropSentryRole{handler: handler}
	self66.processorMap["alter_sentry_role_grant_privilege"] = &sentryPolicyServiceProcessorAlterSentryRoleGrantPrivilege{handler: handler}
	self66.processorMap["alter_sentry_role_revoke_privilege"] = &sentryPolicyServiceProcessorAlterSentryRoleRevokePrivilege{handler: handler}
	self66.processorMap["alter_sentry_role_add_groups"] = &sentryPolicyServiceProcessorAlterSentryRoleAddGroups{handler: handler}
	self66.processorMap["alter_sentry_role_delete_groups"] = &sentryPolicyServiceProcessorAlterSentryRoleDeleteGroups{handler: handler}
	self66.processorMap["alter_sentry_role_add_users"] = &sentryPolicyServiceProcessorAlterSentryRoleAddUsers{handler: handler}
	self66.processorMap["alter_sentry_role_delete_users"] = &sentryPolicyServiceProcessorAlterSentryRoleDeleteUsers{handler: handler}
	self66.processorMap["list_sentry_roles_by_group"] = &sentryPolicyServiceProcessorListSentryRolesByGroup{handler: handler}
	self66.processorMap["list_sentry_roles_by_user"] = &sentryPolicyServiceProcessorListSentryRolesByUser{handler: handler}
	self66.processorMap["list_sentry_privileges_by_role"] = &sentryPolicyServiceProcessorListSentryPrivilegesByRole{handler: handler}
	self66.processorMap["list_sentry_privileges_for_provider"] = &sentryPolicyServiceProcessorListSentryPrivilegesForProvider{handler: handler}
	self66.processorMap["drop_sentry_privilege"] = &sentryPolicyServiceProcessorDropSentryPrivilege{handler: handler}
	self66.processorMap["rename_sentry_privilege"] = &sentryPolicyServiceProcessorRenameSentryPrivilege{handler: handler}
	self66.processorMap["list_sentry_privileges_by_authorizable"] = &sentryPolicyServiceProcessorListSentryPrivilegesByAuthorizable{handler: handler}
	self66.processorMap["get_sentry_config_value"] = &sentryPolicyServiceProcessorGetSentryConfigValue{handler: handler}
	self66.processorMap["export_sentry_mapping_data"] = &sentryPolicyServiceProcessorExportSentryMappingData{handler: handler}
	self66.processorMap["import_sentry_mapping_data"] = &sentryPolicyServiceProcessorImportSentryMappingData{handler: handler}
	return self66
}

func (p *SentryPolicyServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x67 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x67.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x67

}

type sentryPolicyServiceProcessorCreateSentryRole struct {
	handler SentryPolicyService
}

func (p *sentryPolicyServiceProcessorCreateSentryRole) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SentryPolicyServiceCreateSentryRoleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("create_sentry_role", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SentryPolicyServiceCreateSentryRoleResult{}
	var retval *TCreateSentryRoleResponse
	var err2 error
	if retval, err2 = p.handler.CreateSentryRole(args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_sentry_role: "+err2.Error())
		oprot.WriteMessageBegin("create_sentry_role", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("create_sentry_role", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type sentryPolicyServiceProcessorDropSentryRole struct {
	handler SentryPolicyService
}

func (p *sentryPolicyServiceProcessorDropSentryRole) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SentryPolicyServiceDropSentryRoleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("drop_sentry_role", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SentryPolicyServiceDropSentryRoleResult{}
	var retval *TDropSentryRoleResponse
	var err2 error
	if retval, err2 = p.handler.DropSentryRole(args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_sentry_role: "+err2.Error())
		oprot.WriteMessageBegin("drop_sentry_role", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("drop_sentry_role", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type sentryPolicyServiceProcessorAlterSentryRoleGrantPrivilege struct {
	handler SentryPolicyService
}

func (p *sentryPolicyServiceProcessorAlterSentryRoleGrantPrivilege) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SentryPolicyServiceAlterSentryRoleGrantPrivilegeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("alter_sentry_role_grant_privilege", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SentryPolicyServiceAlterSentryRoleGrantPrivilegeResult{}
	var retval *TAlterSentryRoleGrantPrivilegeResponse
	var err2 error
	if retval, err2 = p.handler.AlterSentryRoleGrantPrivilege(args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_sentry_role_grant_privilege: "+err2.Error())
		oprot.WriteMessageBegin("alter_sentry_role_grant_privilege", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("alter_sentry_role_grant_privilege", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type sentryPolicyServiceProcessorAlterSentryRoleRevokePrivilege struct {
	handler SentryPolicyService
}

func (p *sentryPolicyServiceProcessorAlterSentryRoleRevokePrivilege) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SentryPolicyServiceAlterSentryRoleRevokePrivilegeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("alter_sentry_role_revoke_privilege", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SentryPolicyServiceAlterSentryRoleRevokePrivilegeResult{}
	var retval *TAlterSentryRoleRevokePrivilegeResponse
	var err2 error
	if retval, err2 = p.handler.AlterSentryRoleRevokePrivilege(args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_sentry_role_revoke_privilege: "+err2.Error())
		oprot.WriteMessageBegin("alter_sentry_role_revoke_privilege", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("alter_sentry_role_revoke_privilege", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type sentryPolicyServiceProcessorAlterSentryRoleAddGroups struct {
	handler SentryPolicyService
}

func (p *sentryPolicyServiceProcessorAlterSentryRoleAddGroups) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SentryPolicyServiceAlterSentryRoleAddGroupsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("alter_sentry_role_add_groups", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SentryPolicyServiceAlterSentryRoleAddGroupsResult{}
	var retval *TAlterSentryRoleAddGroupsResponse
	var err2 error
	if retval, err2 = p.handler.AlterSentryRoleAddGroups(args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_sentry_role_add_groups: "+err2.Error())
		oprot.WriteMessageBegin("alter_sentry_role_add_groups", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("alter_sentry_role_add_groups", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type sentryPolicyServiceProcessorAlterSentryRoleDeleteGroups struct {
	handler SentryPolicyService
}

func (p *sentryPolicyServiceProcessorAlterSentryRoleDeleteGroups) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SentryPolicyServiceAlterSentryRoleDeleteGroupsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("alter_sentry_role_delete_groups", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SentryPolicyServiceAlterSentryRoleDeleteGroupsResult{}
	var retval *TAlterSentryRoleDeleteGroupsResponse
	var err2 error
	if retval, err2 = p.handler.AlterSentryRoleDeleteGroups(args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_sentry_role_delete_groups: "+err2.Error())
		oprot.WriteMessageBegin("alter_sentry_role_delete_groups", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("alter_sentry_role_delete_groups", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type sentryPolicyServiceProcessorAlterSentryRoleAddUsers struct {
	handler SentryPolicyService
}

func (p *sentryPolicyServiceProcessorAlterSentryRoleAddUsers) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SentryPolicyServiceAlterSentryRoleAddUsersArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("alter_sentry_role_add_users", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SentryPolicyServiceAlterSentryRoleAddUsersResult{}
	var retval *TAlterSentryRoleAddUsersResponse
	var err2 error
	if retval, err2 = p.handler.AlterSentryRoleAddUsers(args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_sentry_role_add_users: "+err2.Error())
		oprot.WriteMessageBegin("alter_sentry_role_add_users", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("alter_sentry_role_add_users", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type sentryPolicyServiceProcessorAlterSentryRoleDeleteUsers struct {
	handler SentryPolicyService
}

func (p *sentryPolicyServiceProcessorAlterSentryRoleDeleteUsers) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SentryPolicyServiceAlterSentryRoleDeleteUsersArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("alter_sentry_role_delete_users", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SentryPolicyServiceAlterSentryRoleDeleteUsersResult{}
	var retval *TAlterSentryRoleDeleteUsersResponse
	var err2 error
	if retval, err2 = p.handler.AlterSentryRoleDeleteUsers(args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_sentry_role_delete_users: "+err2.Error())
		oprot.WriteMessageBegin("alter_sentry_role_delete_users", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("alter_sentry_role_delete_users", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type sentryPolicyServiceProcessorListSentryRolesByGroup struct {
	handler SentryPolicyService
}

func (p *sentryPolicyServiceProcessorListSentryRolesByGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SentryPolicyServiceListSentryRolesByGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("list_sentry_roles_by_group", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SentryPolicyServiceListSentryRolesByGroupResult{}
	var retval *TListSentryRolesResponse
	var err2 error
	if retval, err2 = p.handler.ListSentryRolesByGroup(args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing list_sentry_roles_by_group: "+err2.Error())
		oprot.WriteMessageBegin("list_sentry_roles_by_group", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("list_sentry_roles_by_group", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type sentryPolicyServiceProcessorListSentryRolesByUser struct {
	handler SentryPolicyService
}

func (p *sentryPolicyServiceProcessorListSentryRolesByUser) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SentryPolicyServiceListSentryRolesByUserArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("list_sentry_roles_by_user", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SentryPolicyServiceListSentryRolesByUserResult{}
	var retval *TListSentryRolesResponse
	var err2 error
	if retval, err2 = p.handler.ListSentryRolesByUser(args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing list_sentry_roles_by_user: "+err2.Error())
		oprot.WriteMessageBegin("list_sentry_roles_by_user", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("list_sentry_roles_by_user", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type sentryPolicyServiceProcessorListSentryPrivilegesByRole struct {
	handler SentryPolicyService
}

func (p *sentryPolicyServiceProcessorListSentryPrivilegesByRole) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SentryPolicyServiceListSentryPrivilegesByRoleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("list_sentry_privileges_by_role", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SentryPolicyServiceListSentryPrivilegesByRoleResult{}
	var retval *TListSentryPrivilegesResponse
	var err2 error
	if retval, err2 = p.handler.ListSentryPrivilegesByRole(args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing list_sentry_privileges_by_role: "+err2.Error())
		oprot.WriteMessageBegin("list_sentry_privileges_by_role", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("list_sentry_privileges_by_role", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type sentryPolicyServiceProcessorListSentryPrivilegesForProvider struct {
	handler SentryPolicyService
}

func (p *sentryPolicyServiceProcessorListSentryPrivilegesForProvider) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SentryPolicyServiceListSentryPrivilegesForProviderArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("list_sentry_privileges_for_provider", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SentryPolicyServiceListSentryPrivilegesForProviderResult{}
	var retval *TListSentryPrivilegesForProviderResponse
	var err2 error
	if retval, err2 = p.handler.ListSentryPrivilegesForProvider(args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing list_sentry_privileges_for_provider: "+err2.Error())
		oprot.WriteMessageBegin("list_sentry_privileges_for_provider", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("list_sentry_privileges_for_provider", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type sentryPolicyServiceProcessorDropSentryPrivilege struct {
	handler SentryPolicyService
}

func (p *sentryPolicyServiceProcessorDropSentryPrivilege) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SentryPolicyServiceDropSentryPrivilegeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("drop_sentry_privilege", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SentryPolicyServiceDropSentryPrivilegeResult{}
	var retval *TDropPrivilegesResponse
	var err2 error
	if retval, err2 = p.handler.DropSentryPrivilege(args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_sentry_privilege: "+err2.Error())
		oprot.WriteMessageBegin("drop_sentry_privilege", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("drop_sentry_privilege", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type sentryPolicyServiceProcessorRenameSentryPrivilege struct {
	handler SentryPolicyService
}

func (p *sentryPolicyServiceProcessorRenameSentryPrivilege) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SentryPolicyServiceRenameSentryPrivilegeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rename_sentry_privilege", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SentryPolicyServiceRenameSentryPrivilegeResult{}
	var retval *TRenamePrivilegesResponse
	var err2 error
	if retval, err2 = p.handler.RenameSentryPrivilege(args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rename_sentry_privilege: "+err2.Error())
		oprot.WriteMessageBegin("rename_sentry_privilege", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rename_sentry_privilege", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type sentryPolicyServiceProcessorListSentryPrivilegesByAuthorizable struct {
	handler SentryPolicyService
}

func (p *sentryPolicyServiceProcessorListSentryPrivilegesByAuthorizable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SentryPolicyServiceListSentryPrivilegesByAuthorizableArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("list_sentry_privileges_by_authorizable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SentryPolicyServiceListSentryPrivilegesByAuthorizableResult{}
	var retval *TListSentryPrivilegesByAuthResponse
	var err2 error
	if retval, err2 = p.handler.ListSentryPrivilegesByAuthorizable(args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing list_sentry_privileges_by_authorizable: "+err2.Error())
		oprot.WriteMessageBegin("list_sentry_privileges_by_authorizable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("list_sentry_privileges_by_authorizable", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type sentryPolicyServiceProcessorGetSentryConfigValue struct {
	handler SentryPolicyService
}

func (p *sentryPolicyServiceProcessorGetSentryConfigValue) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SentryPolicyServiceGetSentryConfigValueArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_sentry_config_value", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SentryPolicyServiceGetSentryConfigValueResult{}
	var retval *TSentryConfigValueResponse
	var err2 error
	if retval, err2 = p.handler.GetSentryConfigValue(args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_sentry_config_value: "+err2.Error())
		oprot.WriteMessageBegin("get_sentry_config_value", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_sentry_config_value", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type sentryPolicyServiceProcessorExportSentryMappingData struct {
	handler SentryPolicyService
}

func (p *sentryPolicyServiceProcessorExportSentryMappingData) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SentryPolicyServiceExportSentryMappingDataArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("export_sentry_mapping_data", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SentryPolicyServiceExportSentryMappingDataResult{}
	var retval *TSentryExportMappingDataResponse
	var err2 error
	if retval, err2 = p.handler.ExportSentryMappingData(args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing export_sentry_mapping_data: "+err2.Error())
		oprot.WriteMessageBegin("export_sentry_mapping_data", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("export_sentry_mapping_data", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type sentryPolicyServiceProcessorImportSentryMappingData struct {
	handler SentryPolicyService
}

func (p *sentryPolicyServiceProcessorImportSentryMappingData) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SentryPolicyServiceImportSentryMappingDataArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("import_sentry_mapping_data", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SentryPolicyServiceImportSentryMappingDataResult{}
	var retval *TSentryImportMappingDataResponse
	var err2 error
	if retval, err2 = p.handler.ImportSentryMappingData(args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing import_sentry_mapping_data: "+err2.Error())
		oprot.WriteMessageBegin("import_sentry_mapping_data", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("import_sentry_mapping_data", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Request
type SentryPolicyServiceCreateSentryRoleArgs struct {
	Request *TCreateSentryRoleRequest `thrift:"request,1" json:"request"`
}

func NewSentryPolicyServiceCreateSentryRoleArgs() *SentryPolicyServiceCreateSentryRoleArgs {
	return &SentryPolicyServiceCreateSentryRoleArgs{}
}

var SentryPolicyServiceCreateSentryRoleArgs_Request_DEFAULT *TCreateSentryRoleRequest

func (p *SentryPolicyServiceCreateSentryRoleArgs) GetRequest() *TCreateSentryRoleRequest {
	if !p.IsSetRequest() {
		return SentryPolicyServiceCreateSentryRoleArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *SentryPolicyServiceCreateSentryRoleArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SentryPolicyServiceCreateSentryRoleArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryPolicyServiceCreateSentryRoleArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &TCreateSentryRoleRequest{
		ProtocolVersion: 2,
	}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *SentryPolicyServiceCreateSentryRoleArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_sentry_role_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryPolicyServiceCreateSentryRoleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *SentryPolicyServiceCreateSentryRoleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryPolicyServiceCreateSentryRoleArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryPolicyServiceCreateSentryRoleResult struct {
	Success *TCreateSentryRoleResponse `thrift:"success,0" json:"success,omitempty"`
}

func NewSentryPolicyServiceCreateSentryRoleResult() *SentryPolicyServiceCreateSentryRoleResult {
	return &SentryPolicyServiceCreateSentryRoleResult{}
}

var SentryPolicyServiceCreateSentryRoleResult_Success_DEFAULT *TCreateSentryRoleResponse

func (p *SentryPolicyServiceCreateSentryRoleResult) GetSuccess() *TCreateSentryRoleResponse {
	if !p.IsSetSuccess() {
		return SentryPolicyServiceCreateSentryRoleResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SentryPolicyServiceCreateSentryRoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SentryPolicyServiceCreateSentryRoleResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryPolicyServiceCreateSentryRoleResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TCreateSentryRoleResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SentryPolicyServiceCreateSentryRoleResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_sentry_role_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryPolicyServiceCreateSentryRoleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SentryPolicyServiceCreateSentryRoleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryPolicyServiceCreateSentryRoleResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryPolicyServiceDropSentryRoleArgs struct {
	Request *TDropSentryRoleRequest `thrift:"request,1" json:"request"`
}

func NewSentryPolicyServiceDropSentryRoleArgs() *SentryPolicyServiceDropSentryRoleArgs {
	return &SentryPolicyServiceDropSentryRoleArgs{}
}

var SentryPolicyServiceDropSentryRoleArgs_Request_DEFAULT *TDropSentryRoleRequest

func (p *SentryPolicyServiceDropSentryRoleArgs) GetRequest() *TDropSentryRoleRequest {
	if !p.IsSetRequest() {
		return SentryPolicyServiceDropSentryRoleArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *SentryPolicyServiceDropSentryRoleArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SentryPolicyServiceDropSentryRoleArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryPolicyServiceDropSentryRoleArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &TDropSentryRoleRequest{
		ProtocolVersion: 2,
	}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *SentryPolicyServiceDropSentryRoleArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_sentry_role_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryPolicyServiceDropSentryRoleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *SentryPolicyServiceDropSentryRoleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryPolicyServiceDropSentryRoleArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryPolicyServiceDropSentryRoleResult struct {
	Success *TDropSentryRoleResponse `thrift:"success,0" json:"success,omitempty"`
}

func NewSentryPolicyServiceDropSentryRoleResult() *SentryPolicyServiceDropSentryRoleResult {
	return &SentryPolicyServiceDropSentryRoleResult{}
}

var SentryPolicyServiceDropSentryRoleResult_Success_DEFAULT *TDropSentryRoleResponse

func (p *SentryPolicyServiceDropSentryRoleResult) GetSuccess() *TDropSentryRoleResponse {
	if !p.IsSetSuccess() {
		return SentryPolicyServiceDropSentryRoleResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SentryPolicyServiceDropSentryRoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SentryPolicyServiceDropSentryRoleResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryPolicyServiceDropSentryRoleResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TDropSentryRoleResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SentryPolicyServiceDropSentryRoleResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_sentry_role_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryPolicyServiceDropSentryRoleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SentryPolicyServiceDropSentryRoleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryPolicyServiceDropSentryRoleResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryPolicyServiceAlterSentryRoleGrantPrivilegeArgs struct {
	Request *TAlterSentryRoleGrantPrivilegeRequest `thrift:"request,1" json:"request"`
}

func NewSentryPolicyServiceAlterSentryRoleGrantPrivilegeArgs() *SentryPolicyServiceAlterSentryRoleGrantPrivilegeArgs {
	return &SentryPolicyServiceAlterSentryRoleGrantPrivilegeArgs{}
}

var SentryPolicyServiceAlterSentryRoleGrantPrivilegeArgs_Request_DEFAULT *TAlterSentryRoleGrantPrivilegeRequest

func (p *SentryPolicyServiceAlterSentryRoleGrantPrivilegeArgs) GetRequest() *TAlterSentryRoleGrantPrivilegeRequest {
	if !p.IsSetRequest() {
		return SentryPolicyServiceAlterSentryRoleGrantPrivilegeArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *SentryPolicyServiceAlterSentryRoleGrantPrivilegeArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SentryPolicyServiceAlterSentryRoleGrantPrivilegeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryPolicyServiceAlterSentryRoleGrantPrivilegeArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &TAlterSentryRoleGrantPrivilegeRequest{
		ProtocolVersion: 2,
	}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *SentryPolicyServiceAlterSentryRoleGrantPrivilegeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_sentry_role_grant_privilege_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryPolicyServiceAlterSentryRoleGrantPrivilegeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *SentryPolicyServiceAlterSentryRoleGrantPrivilegeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryPolicyServiceAlterSentryRoleGrantPrivilegeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryPolicyServiceAlterSentryRoleGrantPrivilegeResult struct {
	Success *TAlterSentryRoleGrantPrivilegeResponse `thrift:"success,0" json:"success,omitempty"`
}

func NewSentryPolicyServiceAlterSentryRoleGrantPrivilegeResult() *SentryPolicyServiceAlterSentryRoleGrantPrivilegeResult {
	return &SentryPolicyServiceAlterSentryRoleGrantPrivilegeResult{}
}

var SentryPolicyServiceAlterSentryRoleGrantPrivilegeResult_Success_DEFAULT *TAlterSentryRoleGrantPrivilegeResponse

func (p *SentryPolicyServiceAlterSentryRoleGrantPrivilegeResult) GetSuccess() *TAlterSentryRoleGrantPrivilegeResponse {
	if !p.IsSetSuccess() {
		return SentryPolicyServiceAlterSentryRoleGrantPrivilegeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SentryPolicyServiceAlterSentryRoleGrantPrivilegeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SentryPolicyServiceAlterSentryRoleGrantPrivilegeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryPolicyServiceAlterSentryRoleGrantPrivilegeResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TAlterSentryRoleGrantPrivilegeResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SentryPolicyServiceAlterSentryRoleGrantPrivilegeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_sentry_role_grant_privilege_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryPolicyServiceAlterSentryRoleGrantPrivilegeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SentryPolicyServiceAlterSentryRoleGrantPrivilegeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryPolicyServiceAlterSentryRoleGrantPrivilegeResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryPolicyServiceAlterSentryRoleRevokePrivilegeArgs struct {
	Request *TAlterSentryRoleRevokePrivilegeRequest `thrift:"request,1" json:"request"`
}

func NewSentryPolicyServiceAlterSentryRoleRevokePrivilegeArgs() *SentryPolicyServiceAlterSentryRoleRevokePrivilegeArgs {
	return &SentryPolicyServiceAlterSentryRoleRevokePrivilegeArgs{}
}

var SentryPolicyServiceAlterSentryRoleRevokePrivilegeArgs_Request_DEFAULT *TAlterSentryRoleRevokePrivilegeRequest

func (p *SentryPolicyServiceAlterSentryRoleRevokePrivilegeArgs) GetRequest() *TAlterSentryRoleRevokePrivilegeRequest {
	if !p.IsSetRequest() {
		return SentryPolicyServiceAlterSentryRoleRevokePrivilegeArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *SentryPolicyServiceAlterSentryRoleRevokePrivilegeArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SentryPolicyServiceAlterSentryRoleRevokePrivilegeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryPolicyServiceAlterSentryRoleRevokePrivilegeArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &TAlterSentryRoleRevokePrivilegeRequest{
		ProtocolVersion: 2,
	}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *SentryPolicyServiceAlterSentryRoleRevokePrivilegeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_sentry_role_revoke_privilege_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryPolicyServiceAlterSentryRoleRevokePrivilegeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *SentryPolicyServiceAlterSentryRoleRevokePrivilegeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryPolicyServiceAlterSentryRoleRevokePrivilegeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryPolicyServiceAlterSentryRoleRevokePrivilegeResult struct {
	Success *TAlterSentryRoleRevokePrivilegeResponse `thrift:"success,0" json:"success,omitempty"`
}

func NewSentryPolicyServiceAlterSentryRoleRevokePrivilegeResult() *SentryPolicyServiceAlterSentryRoleRevokePrivilegeResult {
	return &SentryPolicyServiceAlterSentryRoleRevokePrivilegeResult{}
}

var SentryPolicyServiceAlterSentryRoleRevokePrivilegeResult_Success_DEFAULT *TAlterSentryRoleRevokePrivilegeResponse

func (p *SentryPolicyServiceAlterSentryRoleRevokePrivilegeResult) GetSuccess() *TAlterSentryRoleRevokePrivilegeResponse {
	if !p.IsSetSuccess() {
		return SentryPolicyServiceAlterSentryRoleRevokePrivilegeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SentryPolicyServiceAlterSentryRoleRevokePrivilegeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SentryPolicyServiceAlterSentryRoleRevokePrivilegeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryPolicyServiceAlterSentryRoleRevokePrivilegeResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TAlterSentryRoleRevokePrivilegeResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SentryPolicyServiceAlterSentryRoleRevokePrivilegeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_sentry_role_revoke_privilege_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryPolicyServiceAlterSentryRoleRevokePrivilegeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SentryPolicyServiceAlterSentryRoleRevokePrivilegeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryPolicyServiceAlterSentryRoleRevokePrivilegeResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryPolicyServiceAlterSentryRoleAddGroupsArgs struct {
	Request *TAlterSentryRoleAddGroupsRequest `thrift:"request,1" json:"request"`
}

func NewSentryPolicyServiceAlterSentryRoleAddGroupsArgs() *SentryPolicyServiceAlterSentryRoleAddGroupsArgs {
	return &SentryPolicyServiceAlterSentryRoleAddGroupsArgs{}
}

var SentryPolicyServiceAlterSentryRoleAddGroupsArgs_Request_DEFAULT *TAlterSentryRoleAddGroupsRequest

func (p *SentryPolicyServiceAlterSentryRoleAddGroupsArgs) GetRequest() *TAlterSentryRoleAddGroupsRequest {
	if !p.IsSetRequest() {
		return SentryPolicyServiceAlterSentryRoleAddGroupsArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *SentryPolicyServiceAlterSentryRoleAddGroupsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SentryPolicyServiceAlterSentryRoleAddGroupsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryPolicyServiceAlterSentryRoleAddGroupsArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &TAlterSentryRoleAddGroupsRequest{
		ProtocolVersion: 2,
	}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *SentryPolicyServiceAlterSentryRoleAddGroupsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_sentry_role_add_groups_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryPolicyServiceAlterSentryRoleAddGroupsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *SentryPolicyServiceAlterSentryRoleAddGroupsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryPolicyServiceAlterSentryRoleAddGroupsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryPolicyServiceAlterSentryRoleAddGroupsResult struct {
	Success *TAlterSentryRoleAddGroupsResponse `thrift:"success,0" json:"success,omitempty"`
}

func NewSentryPolicyServiceAlterSentryRoleAddGroupsResult() *SentryPolicyServiceAlterSentryRoleAddGroupsResult {
	return &SentryPolicyServiceAlterSentryRoleAddGroupsResult{}
}

var SentryPolicyServiceAlterSentryRoleAddGroupsResult_Success_DEFAULT *TAlterSentryRoleAddGroupsResponse

func (p *SentryPolicyServiceAlterSentryRoleAddGroupsResult) GetSuccess() *TAlterSentryRoleAddGroupsResponse {
	if !p.IsSetSuccess() {
		return SentryPolicyServiceAlterSentryRoleAddGroupsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SentryPolicyServiceAlterSentryRoleAddGroupsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SentryPolicyServiceAlterSentryRoleAddGroupsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryPolicyServiceAlterSentryRoleAddGroupsResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TAlterSentryRoleAddGroupsResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SentryPolicyServiceAlterSentryRoleAddGroupsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_sentry_role_add_groups_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryPolicyServiceAlterSentryRoleAddGroupsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SentryPolicyServiceAlterSentryRoleAddGroupsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryPolicyServiceAlterSentryRoleAddGroupsResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryPolicyServiceAlterSentryRoleDeleteGroupsArgs struct {
	Request *TAlterSentryRoleDeleteGroupsRequest `thrift:"request,1" json:"request"`
}

func NewSentryPolicyServiceAlterSentryRoleDeleteGroupsArgs() *SentryPolicyServiceAlterSentryRoleDeleteGroupsArgs {
	return &SentryPolicyServiceAlterSentryRoleDeleteGroupsArgs{}
}

var SentryPolicyServiceAlterSentryRoleDeleteGroupsArgs_Request_DEFAULT *TAlterSentryRoleDeleteGroupsRequest

func (p *SentryPolicyServiceAlterSentryRoleDeleteGroupsArgs) GetRequest() *TAlterSentryRoleDeleteGroupsRequest {
	if !p.IsSetRequest() {
		return SentryPolicyServiceAlterSentryRoleDeleteGroupsArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *SentryPolicyServiceAlterSentryRoleDeleteGroupsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SentryPolicyServiceAlterSentryRoleDeleteGroupsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryPolicyServiceAlterSentryRoleDeleteGroupsArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &TAlterSentryRoleDeleteGroupsRequest{
		ProtocolVersion: 2,
	}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *SentryPolicyServiceAlterSentryRoleDeleteGroupsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_sentry_role_delete_groups_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryPolicyServiceAlterSentryRoleDeleteGroupsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *SentryPolicyServiceAlterSentryRoleDeleteGroupsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryPolicyServiceAlterSentryRoleDeleteGroupsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryPolicyServiceAlterSentryRoleDeleteGroupsResult struct {
	Success *TAlterSentryRoleDeleteGroupsResponse `thrift:"success,0" json:"success,omitempty"`
}

func NewSentryPolicyServiceAlterSentryRoleDeleteGroupsResult() *SentryPolicyServiceAlterSentryRoleDeleteGroupsResult {
	return &SentryPolicyServiceAlterSentryRoleDeleteGroupsResult{}
}

var SentryPolicyServiceAlterSentryRoleDeleteGroupsResult_Success_DEFAULT *TAlterSentryRoleDeleteGroupsResponse

func (p *SentryPolicyServiceAlterSentryRoleDeleteGroupsResult) GetSuccess() *TAlterSentryRoleDeleteGroupsResponse {
	if !p.IsSetSuccess() {
		return SentryPolicyServiceAlterSentryRoleDeleteGroupsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SentryPolicyServiceAlterSentryRoleDeleteGroupsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SentryPolicyServiceAlterSentryRoleDeleteGroupsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryPolicyServiceAlterSentryRoleDeleteGroupsResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TAlterSentryRoleDeleteGroupsResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SentryPolicyServiceAlterSentryRoleDeleteGroupsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_sentry_role_delete_groups_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryPolicyServiceAlterSentryRoleDeleteGroupsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SentryPolicyServiceAlterSentryRoleDeleteGroupsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryPolicyServiceAlterSentryRoleDeleteGroupsResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryPolicyServiceAlterSentryRoleAddUsersArgs struct {
	Request *TAlterSentryRoleAddUsersRequest `thrift:"request,1" json:"request"`
}

func NewSentryPolicyServiceAlterSentryRoleAddUsersArgs() *SentryPolicyServiceAlterSentryRoleAddUsersArgs {
	return &SentryPolicyServiceAlterSentryRoleAddUsersArgs{}
}

var SentryPolicyServiceAlterSentryRoleAddUsersArgs_Request_DEFAULT *TAlterSentryRoleAddUsersRequest

func (p *SentryPolicyServiceAlterSentryRoleAddUsersArgs) GetRequest() *TAlterSentryRoleAddUsersRequest {
	if !p.IsSetRequest() {
		return SentryPolicyServiceAlterSentryRoleAddUsersArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *SentryPolicyServiceAlterSentryRoleAddUsersArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SentryPolicyServiceAlterSentryRoleAddUsersArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryPolicyServiceAlterSentryRoleAddUsersArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &TAlterSentryRoleAddUsersRequest{
		ProtocolVersion: 1,
	}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *SentryPolicyServiceAlterSentryRoleAddUsersArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_sentry_role_add_users_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryPolicyServiceAlterSentryRoleAddUsersArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *SentryPolicyServiceAlterSentryRoleAddUsersArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryPolicyServiceAlterSentryRoleAddUsersArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryPolicyServiceAlterSentryRoleAddUsersResult struct {
	Success *TAlterSentryRoleAddUsersResponse `thrift:"success,0" json:"success,omitempty"`
}

func NewSentryPolicyServiceAlterSentryRoleAddUsersResult() *SentryPolicyServiceAlterSentryRoleAddUsersResult {
	return &SentryPolicyServiceAlterSentryRoleAddUsersResult{}
}

var SentryPolicyServiceAlterSentryRoleAddUsersResult_Success_DEFAULT *TAlterSentryRoleAddUsersResponse

func (p *SentryPolicyServiceAlterSentryRoleAddUsersResult) GetSuccess() *TAlterSentryRoleAddUsersResponse {
	if !p.IsSetSuccess() {
		return SentryPolicyServiceAlterSentryRoleAddUsersResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SentryPolicyServiceAlterSentryRoleAddUsersResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SentryPolicyServiceAlterSentryRoleAddUsersResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryPolicyServiceAlterSentryRoleAddUsersResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TAlterSentryRoleAddUsersResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SentryPolicyServiceAlterSentryRoleAddUsersResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_sentry_role_add_users_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryPolicyServiceAlterSentryRoleAddUsersResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SentryPolicyServiceAlterSentryRoleAddUsersResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryPolicyServiceAlterSentryRoleAddUsersResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryPolicyServiceAlterSentryRoleDeleteUsersArgs struct {
	Request *TAlterSentryRoleDeleteUsersRequest `thrift:"request,1" json:"request"`
}

func NewSentryPolicyServiceAlterSentryRoleDeleteUsersArgs() *SentryPolicyServiceAlterSentryRoleDeleteUsersArgs {
	return &SentryPolicyServiceAlterSentryRoleDeleteUsersArgs{}
}

var SentryPolicyServiceAlterSentryRoleDeleteUsersArgs_Request_DEFAULT *TAlterSentryRoleDeleteUsersRequest

func (p *SentryPolicyServiceAlterSentryRoleDeleteUsersArgs) GetRequest() *TAlterSentryRoleDeleteUsersRequest {
	if !p.IsSetRequest() {
		return SentryPolicyServiceAlterSentryRoleDeleteUsersArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *SentryPolicyServiceAlterSentryRoleDeleteUsersArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SentryPolicyServiceAlterSentryRoleDeleteUsersArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryPolicyServiceAlterSentryRoleDeleteUsersArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &TAlterSentryRoleDeleteUsersRequest{
		ProtocolVersion: 1,
	}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *SentryPolicyServiceAlterSentryRoleDeleteUsersArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_sentry_role_delete_users_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryPolicyServiceAlterSentryRoleDeleteUsersArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *SentryPolicyServiceAlterSentryRoleDeleteUsersArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryPolicyServiceAlterSentryRoleDeleteUsersArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryPolicyServiceAlterSentryRoleDeleteUsersResult struct {
	Success *TAlterSentryRoleDeleteUsersResponse `thrift:"success,0" json:"success,omitempty"`
}

func NewSentryPolicyServiceAlterSentryRoleDeleteUsersResult() *SentryPolicyServiceAlterSentryRoleDeleteUsersResult {
	return &SentryPolicyServiceAlterSentryRoleDeleteUsersResult{}
}

var SentryPolicyServiceAlterSentryRoleDeleteUsersResult_Success_DEFAULT *TAlterSentryRoleDeleteUsersResponse

func (p *SentryPolicyServiceAlterSentryRoleDeleteUsersResult) GetSuccess() *TAlterSentryRoleDeleteUsersResponse {
	if !p.IsSetSuccess() {
		return SentryPolicyServiceAlterSentryRoleDeleteUsersResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SentryPolicyServiceAlterSentryRoleDeleteUsersResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SentryPolicyServiceAlterSentryRoleDeleteUsersResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryPolicyServiceAlterSentryRoleDeleteUsersResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TAlterSentryRoleDeleteUsersResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SentryPolicyServiceAlterSentryRoleDeleteUsersResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_sentry_role_delete_users_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryPolicyServiceAlterSentryRoleDeleteUsersResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SentryPolicyServiceAlterSentryRoleDeleteUsersResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryPolicyServiceAlterSentryRoleDeleteUsersResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryPolicyServiceListSentryRolesByGroupArgs struct {
	Request *TListSentryRolesRequest `thrift:"request,1" json:"request"`
}

func NewSentryPolicyServiceListSentryRolesByGroupArgs() *SentryPolicyServiceListSentryRolesByGroupArgs {
	return &SentryPolicyServiceListSentryRolesByGroupArgs{}
}

var SentryPolicyServiceListSentryRolesByGroupArgs_Request_DEFAULT *TListSentryRolesRequest

func (p *SentryPolicyServiceListSentryRolesByGroupArgs) GetRequest() *TListSentryRolesRequest {
	if !p.IsSetRequest() {
		return SentryPolicyServiceListSentryRolesByGroupArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *SentryPolicyServiceListSentryRolesByGroupArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SentryPolicyServiceListSentryRolesByGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryPolicyServiceListSentryRolesByGroupArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &TListSentryRolesRequest{
		ProtocolVersion: 2,
	}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *SentryPolicyServiceListSentryRolesByGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("list_sentry_roles_by_group_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryPolicyServiceListSentryRolesByGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *SentryPolicyServiceListSentryRolesByGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryPolicyServiceListSentryRolesByGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryPolicyServiceListSentryRolesByGroupResult struct {
	Success *TListSentryRolesResponse `thrift:"success,0" json:"success,omitempty"`
}

func NewSentryPolicyServiceListSentryRolesByGroupResult() *SentryPolicyServiceListSentryRolesByGroupResult {
	return &SentryPolicyServiceListSentryRolesByGroupResult{}
}

var SentryPolicyServiceListSentryRolesByGroupResult_Success_DEFAULT *TListSentryRolesResponse

func (p *SentryPolicyServiceListSentryRolesByGroupResult) GetSuccess() *TListSentryRolesResponse {
	if !p.IsSetSuccess() {
		return SentryPolicyServiceListSentryRolesByGroupResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SentryPolicyServiceListSentryRolesByGroupResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SentryPolicyServiceListSentryRolesByGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryPolicyServiceListSentryRolesByGroupResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TListSentryRolesResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SentryPolicyServiceListSentryRolesByGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("list_sentry_roles_by_group_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryPolicyServiceListSentryRolesByGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SentryPolicyServiceListSentryRolesByGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryPolicyServiceListSentryRolesByGroupResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryPolicyServiceListSentryRolesByUserArgs struct {
	Request *TListSentryRolesForUserRequest `thrift:"request,1" json:"request"`
}

func NewSentryPolicyServiceListSentryRolesByUserArgs() *SentryPolicyServiceListSentryRolesByUserArgs {
	return &SentryPolicyServiceListSentryRolesByUserArgs{}
}

var SentryPolicyServiceListSentryRolesByUserArgs_Request_DEFAULT *TListSentryRolesForUserRequest

func (p *SentryPolicyServiceListSentryRolesByUserArgs) GetRequest() *TListSentryRolesForUserRequest {
	if !p.IsSetRequest() {
		return SentryPolicyServiceListSentryRolesByUserArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *SentryPolicyServiceListSentryRolesByUserArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SentryPolicyServiceListSentryRolesByUserArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryPolicyServiceListSentryRolesByUserArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &TListSentryRolesForUserRequest{
		ProtocolVersion: 1,
	}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *SentryPolicyServiceListSentryRolesByUserArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("list_sentry_roles_by_user_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryPolicyServiceListSentryRolesByUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *SentryPolicyServiceListSentryRolesByUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryPolicyServiceListSentryRolesByUserArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryPolicyServiceListSentryRolesByUserResult struct {
	Success *TListSentryRolesResponse `thrift:"success,0" json:"success,omitempty"`
}

func NewSentryPolicyServiceListSentryRolesByUserResult() *SentryPolicyServiceListSentryRolesByUserResult {
	return &SentryPolicyServiceListSentryRolesByUserResult{}
}

var SentryPolicyServiceListSentryRolesByUserResult_Success_DEFAULT *TListSentryRolesResponse

func (p *SentryPolicyServiceListSentryRolesByUserResult) GetSuccess() *TListSentryRolesResponse {
	if !p.IsSetSuccess() {
		return SentryPolicyServiceListSentryRolesByUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SentryPolicyServiceListSentryRolesByUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SentryPolicyServiceListSentryRolesByUserResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryPolicyServiceListSentryRolesByUserResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TListSentryRolesResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SentryPolicyServiceListSentryRolesByUserResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("list_sentry_roles_by_user_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryPolicyServiceListSentryRolesByUserResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SentryPolicyServiceListSentryRolesByUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryPolicyServiceListSentryRolesByUserResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryPolicyServiceListSentryPrivilegesByRoleArgs struct {
	Request *TListSentryPrivilegesRequest `thrift:"request,1" json:"request"`
}

func NewSentryPolicyServiceListSentryPrivilegesByRoleArgs() *SentryPolicyServiceListSentryPrivilegesByRoleArgs {
	return &SentryPolicyServiceListSentryPrivilegesByRoleArgs{}
}

var SentryPolicyServiceListSentryPrivilegesByRoleArgs_Request_DEFAULT *TListSentryPrivilegesRequest

func (p *SentryPolicyServiceListSentryPrivilegesByRoleArgs) GetRequest() *TListSentryPrivilegesRequest {
	if !p.IsSetRequest() {
		return SentryPolicyServiceListSentryPrivilegesByRoleArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *SentryPolicyServiceListSentryPrivilegesByRoleArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SentryPolicyServiceListSentryPrivilegesByRoleArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryPolicyServiceListSentryPrivilegesByRoleArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &TListSentryPrivilegesRequest{
		ProtocolVersion: 2,
	}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *SentryPolicyServiceListSentryPrivilegesByRoleArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("list_sentry_privileges_by_role_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryPolicyServiceListSentryPrivilegesByRoleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *SentryPolicyServiceListSentryPrivilegesByRoleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryPolicyServiceListSentryPrivilegesByRoleArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryPolicyServiceListSentryPrivilegesByRoleResult struct {
	Success *TListSentryPrivilegesResponse `thrift:"success,0" json:"success,omitempty"`
}

func NewSentryPolicyServiceListSentryPrivilegesByRoleResult() *SentryPolicyServiceListSentryPrivilegesByRoleResult {
	return &SentryPolicyServiceListSentryPrivilegesByRoleResult{}
}

var SentryPolicyServiceListSentryPrivilegesByRoleResult_Success_DEFAULT *TListSentryPrivilegesResponse

func (p *SentryPolicyServiceListSentryPrivilegesByRoleResult) GetSuccess() *TListSentryPrivilegesResponse {
	if !p.IsSetSuccess() {
		return SentryPolicyServiceListSentryPrivilegesByRoleResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SentryPolicyServiceListSentryPrivilegesByRoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SentryPolicyServiceListSentryPrivilegesByRoleResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryPolicyServiceListSentryPrivilegesByRoleResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TListSentryPrivilegesResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SentryPolicyServiceListSentryPrivilegesByRoleResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("list_sentry_privileges_by_role_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryPolicyServiceListSentryPrivilegesByRoleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SentryPolicyServiceListSentryPrivilegesByRoleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryPolicyServiceListSentryPrivilegesByRoleResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryPolicyServiceListSentryPrivilegesForProviderArgs struct {
	Request *TListSentryPrivilegesForProviderRequest `thrift:"request,1" json:"request"`
}

func NewSentryPolicyServiceListSentryPrivilegesForProviderArgs() *SentryPolicyServiceListSentryPrivilegesForProviderArgs {
	return &SentryPolicyServiceListSentryPrivilegesForProviderArgs{}
}

var SentryPolicyServiceListSentryPrivilegesForProviderArgs_Request_DEFAULT *TListSentryPrivilegesForProviderRequest

func (p *SentryPolicyServiceListSentryPrivilegesForProviderArgs) GetRequest() *TListSentryPrivilegesForProviderRequest {
	if !p.IsSetRequest() {
		return SentryPolicyServiceListSentryPrivilegesForProviderArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *SentryPolicyServiceListSentryPrivilegesForProviderArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SentryPolicyServiceListSentryPrivilegesForProviderArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryPolicyServiceListSentryPrivilegesForProviderArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &TListSentryPrivilegesForProviderRequest{
		ProtocolVersion: 2,
	}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *SentryPolicyServiceListSentryPrivilegesForProviderArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("list_sentry_privileges_for_provider_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryPolicyServiceListSentryPrivilegesForProviderArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *SentryPolicyServiceListSentryPrivilegesForProviderArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryPolicyServiceListSentryPrivilegesForProviderArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryPolicyServiceListSentryPrivilegesForProviderResult struct {
	Success *TListSentryPrivilegesForProviderResponse `thrift:"success,0" json:"success,omitempty"`
}

func NewSentryPolicyServiceListSentryPrivilegesForProviderResult() *SentryPolicyServiceListSentryPrivilegesForProviderResult {
	return &SentryPolicyServiceListSentryPrivilegesForProviderResult{}
}

var SentryPolicyServiceListSentryPrivilegesForProviderResult_Success_DEFAULT *TListSentryPrivilegesForProviderResponse

func (p *SentryPolicyServiceListSentryPrivilegesForProviderResult) GetSuccess() *TListSentryPrivilegesForProviderResponse {
	if !p.IsSetSuccess() {
		return SentryPolicyServiceListSentryPrivilegesForProviderResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SentryPolicyServiceListSentryPrivilegesForProviderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SentryPolicyServiceListSentryPrivilegesForProviderResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryPolicyServiceListSentryPrivilegesForProviderResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TListSentryPrivilegesForProviderResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SentryPolicyServiceListSentryPrivilegesForProviderResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("list_sentry_privileges_for_provider_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryPolicyServiceListSentryPrivilegesForProviderResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SentryPolicyServiceListSentryPrivilegesForProviderResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryPolicyServiceListSentryPrivilegesForProviderResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryPolicyServiceDropSentryPrivilegeArgs struct {
	Request *TDropPrivilegesRequest `thrift:"request,1" json:"request"`
}

func NewSentryPolicyServiceDropSentryPrivilegeArgs() *SentryPolicyServiceDropSentryPrivilegeArgs {
	return &SentryPolicyServiceDropSentryPrivilegeArgs{}
}

var SentryPolicyServiceDropSentryPrivilegeArgs_Request_DEFAULT *TDropPrivilegesRequest

func (p *SentryPolicyServiceDropSentryPrivilegeArgs) GetRequest() *TDropPrivilegesRequest {
	if !p.IsSetRequest() {
		return SentryPolicyServiceDropSentryPrivilegeArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *SentryPolicyServiceDropSentryPrivilegeArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SentryPolicyServiceDropSentryPrivilegeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryPolicyServiceDropSentryPrivilegeArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &TDropPrivilegesRequest{
		ProtocolVersion: 2,
	}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *SentryPolicyServiceDropSentryPrivilegeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_sentry_privilege_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryPolicyServiceDropSentryPrivilegeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *SentryPolicyServiceDropSentryPrivilegeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryPolicyServiceDropSentryPrivilegeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryPolicyServiceDropSentryPrivilegeResult struct {
	Success *TDropPrivilegesResponse `thrift:"success,0" json:"success,omitempty"`
}

func NewSentryPolicyServiceDropSentryPrivilegeResult() *SentryPolicyServiceDropSentryPrivilegeResult {
	return &SentryPolicyServiceDropSentryPrivilegeResult{}
}

var SentryPolicyServiceDropSentryPrivilegeResult_Success_DEFAULT *TDropPrivilegesResponse

func (p *SentryPolicyServiceDropSentryPrivilegeResult) GetSuccess() *TDropPrivilegesResponse {
	if !p.IsSetSuccess() {
		return SentryPolicyServiceDropSentryPrivilegeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SentryPolicyServiceDropSentryPrivilegeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SentryPolicyServiceDropSentryPrivilegeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryPolicyServiceDropSentryPrivilegeResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TDropPrivilegesResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SentryPolicyServiceDropSentryPrivilegeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_sentry_privilege_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryPolicyServiceDropSentryPrivilegeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SentryPolicyServiceDropSentryPrivilegeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryPolicyServiceDropSentryPrivilegeResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryPolicyServiceRenameSentryPrivilegeArgs struct {
	Request *TRenamePrivilegesRequest `thrift:"request,1" json:"request"`
}

func NewSentryPolicyServiceRenameSentryPrivilegeArgs() *SentryPolicyServiceRenameSentryPrivilegeArgs {
	return &SentryPolicyServiceRenameSentryPrivilegeArgs{}
}

var SentryPolicyServiceRenameSentryPrivilegeArgs_Request_DEFAULT *TRenamePrivilegesRequest

func (p *SentryPolicyServiceRenameSentryPrivilegeArgs) GetRequest() *TRenamePrivilegesRequest {
	if !p.IsSetRequest() {
		return SentryPolicyServiceRenameSentryPrivilegeArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *SentryPolicyServiceRenameSentryPrivilegeArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SentryPolicyServiceRenameSentryPrivilegeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryPolicyServiceRenameSentryPrivilegeArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &TRenamePrivilegesRequest{
		ProtocolVersion: 2,
	}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *SentryPolicyServiceRenameSentryPrivilegeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rename_sentry_privilege_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryPolicyServiceRenameSentryPrivilegeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *SentryPolicyServiceRenameSentryPrivilegeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryPolicyServiceRenameSentryPrivilegeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryPolicyServiceRenameSentryPrivilegeResult struct {
	Success *TRenamePrivilegesResponse `thrift:"success,0" json:"success,omitempty"`
}

func NewSentryPolicyServiceRenameSentryPrivilegeResult() *SentryPolicyServiceRenameSentryPrivilegeResult {
	return &SentryPolicyServiceRenameSentryPrivilegeResult{}
}

var SentryPolicyServiceRenameSentryPrivilegeResult_Success_DEFAULT *TRenamePrivilegesResponse

func (p *SentryPolicyServiceRenameSentryPrivilegeResult) GetSuccess() *TRenamePrivilegesResponse {
	if !p.IsSetSuccess() {
		return SentryPolicyServiceRenameSentryPrivilegeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SentryPolicyServiceRenameSentryPrivilegeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SentryPolicyServiceRenameSentryPrivilegeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryPolicyServiceRenameSentryPrivilegeResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TRenamePrivilegesResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SentryPolicyServiceRenameSentryPrivilegeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rename_sentry_privilege_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryPolicyServiceRenameSentryPrivilegeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SentryPolicyServiceRenameSentryPrivilegeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryPolicyServiceRenameSentryPrivilegeResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryPolicyServiceListSentryPrivilegesByAuthorizableArgs struct {
	Request *TListSentryPrivilegesByAuthRequest `thrift:"request,1" json:"request"`
}

func NewSentryPolicyServiceListSentryPrivilegesByAuthorizableArgs() *SentryPolicyServiceListSentryPrivilegesByAuthorizableArgs {
	return &SentryPolicyServiceListSentryPrivilegesByAuthorizableArgs{}
}

var SentryPolicyServiceListSentryPrivilegesByAuthorizableArgs_Request_DEFAULT *TListSentryPrivilegesByAuthRequest

func (p *SentryPolicyServiceListSentryPrivilegesByAuthorizableArgs) GetRequest() *TListSentryPrivilegesByAuthRequest {
	if !p.IsSetRequest() {
		return SentryPolicyServiceListSentryPrivilegesByAuthorizableArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *SentryPolicyServiceListSentryPrivilegesByAuthorizableArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SentryPolicyServiceListSentryPrivilegesByAuthorizableArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryPolicyServiceListSentryPrivilegesByAuthorizableArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &TListSentryPrivilegesByAuthRequest{
		ProtocolVersion: 2,
	}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *SentryPolicyServiceListSentryPrivilegesByAuthorizableArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("list_sentry_privileges_by_authorizable_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryPolicyServiceListSentryPrivilegesByAuthorizableArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *SentryPolicyServiceListSentryPrivilegesByAuthorizableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryPolicyServiceListSentryPrivilegesByAuthorizableArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryPolicyServiceListSentryPrivilegesByAuthorizableResult struct {
	Success *TListSentryPrivilegesByAuthResponse `thrift:"success,0" json:"success,omitempty"`
}

func NewSentryPolicyServiceListSentryPrivilegesByAuthorizableResult() *SentryPolicyServiceListSentryPrivilegesByAuthorizableResult {
	return &SentryPolicyServiceListSentryPrivilegesByAuthorizableResult{}
}

var SentryPolicyServiceListSentryPrivilegesByAuthorizableResult_Success_DEFAULT *TListSentryPrivilegesByAuthResponse

func (p *SentryPolicyServiceListSentryPrivilegesByAuthorizableResult) GetSuccess() *TListSentryPrivilegesByAuthResponse {
	if !p.IsSetSuccess() {
		return SentryPolicyServiceListSentryPrivilegesByAuthorizableResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SentryPolicyServiceListSentryPrivilegesByAuthorizableResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SentryPolicyServiceListSentryPrivilegesByAuthorizableResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryPolicyServiceListSentryPrivilegesByAuthorizableResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TListSentryPrivilegesByAuthResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SentryPolicyServiceListSentryPrivilegesByAuthorizableResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("list_sentry_privileges_by_authorizable_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryPolicyServiceListSentryPrivilegesByAuthorizableResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SentryPolicyServiceListSentryPrivilegesByAuthorizableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryPolicyServiceListSentryPrivilegesByAuthorizableResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryPolicyServiceGetSentryConfigValueArgs struct {
	Request *TSentryConfigValueRequest `thrift:"request,1" json:"request"`
}

func NewSentryPolicyServiceGetSentryConfigValueArgs() *SentryPolicyServiceGetSentryConfigValueArgs {
	return &SentryPolicyServiceGetSentryConfigValueArgs{}
}

var SentryPolicyServiceGetSentryConfigValueArgs_Request_DEFAULT *TSentryConfigValueRequest

func (p *SentryPolicyServiceGetSentryConfigValueArgs) GetRequest() *TSentryConfigValueRequest {
	if !p.IsSetRequest() {
		return SentryPolicyServiceGetSentryConfigValueArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *SentryPolicyServiceGetSentryConfigValueArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SentryPolicyServiceGetSentryConfigValueArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryPolicyServiceGetSentryConfigValueArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &TSentryConfigValueRequest{
		ProtocolVersion: 2,
	}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *SentryPolicyServiceGetSentryConfigValueArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_sentry_config_value_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryPolicyServiceGetSentryConfigValueArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *SentryPolicyServiceGetSentryConfigValueArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryPolicyServiceGetSentryConfigValueArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryPolicyServiceGetSentryConfigValueResult struct {
	Success *TSentryConfigValueResponse `thrift:"success,0" json:"success,omitempty"`
}

func NewSentryPolicyServiceGetSentryConfigValueResult() *SentryPolicyServiceGetSentryConfigValueResult {
	return &SentryPolicyServiceGetSentryConfigValueResult{}
}

var SentryPolicyServiceGetSentryConfigValueResult_Success_DEFAULT *TSentryConfigValueResponse

func (p *SentryPolicyServiceGetSentryConfigValueResult) GetSuccess() *TSentryConfigValueResponse {
	if !p.IsSetSuccess() {
		return SentryPolicyServiceGetSentryConfigValueResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SentryPolicyServiceGetSentryConfigValueResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SentryPolicyServiceGetSentryConfigValueResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryPolicyServiceGetSentryConfigValueResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TSentryConfigValueResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SentryPolicyServiceGetSentryConfigValueResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_sentry_config_value_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryPolicyServiceGetSentryConfigValueResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SentryPolicyServiceGetSentryConfigValueResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryPolicyServiceGetSentryConfigValueResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryPolicyServiceExportSentryMappingDataArgs struct {
	Request *TSentryExportMappingDataRequest `thrift:"request,1" json:"request"`
}

func NewSentryPolicyServiceExportSentryMappingDataArgs() *SentryPolicyServiceExportSentryMappingDataArgs {
	return &SentryPolicyServiceExportSentryMappingDataArgs{}
}

var SentryPolicyServiceExportSentryMappingDataArgs_Request_DEFAULT *TSentryExportMappingDataRequest

func (p *SentryPolicyServiceExportSentryMappingDataArgs) GetRequest() *TSentryExportMappingDataRequest {
	if !p.IsSetRequest() {
		return SentryPolicyServiceExportSentryMappingDataArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *SentryPolicyServiceExportSentryMappingDataArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SentryPolicyServiceExportSentryMappingDataArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryPolicyServiceExportSentryMappingDataArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &TSentryExportMappingDataRequest{
		ProtocolVersion: 1,
	}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *SentryPolicyServiceExportSentryMappingDataArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("export_sentry_mapping_data_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryPolicyServiceExportSentryMappingDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *SentryPolicyServiceExportSentryMappingDataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryPolicyServiceExportSentryMappingDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryPolicyServiceExportSentryMappingDataResult struct {
	Success *TSentryExportMappingDataResponse `thrift:"success,0" json:"success,omitempty"`
}

func NewSentryPolicyServiceExportSentryMappingDataResult() *SentryPolicyServiceExportSentryMappingDataResult {
	return &SentryPolicyServiceExportSentryMappingDataResult{}
}

var SentryPolicyServiceExportSentryMappingDataResult_Success_DEFAULT *TSentryExportMappingDataResponse

func (p *SentryPolicyServiceExportSentryMappingDataResult) GetSuccess() *TSentryExportMappingDataResponse {
	if !p.IsSetSuccess() {
		return SentryPolicyServiceExportSentryMappingDataResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SentryPolicyServiceExportSentryMappingDataResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SentryPolicyServiceExportSentryMappingDataResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryPolicyServiceExportSentryMappingDataResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TSentryExportMappingDataResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SentryPolicyServiceExportSentryMappingDataResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("export_sentry_mapping_data_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryPolicyServiceExportSentryMappingDataResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SentryPolicyServiceExportSentryMappingDataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryPolicyServiceExportSentryMappingDataResult(%+v)", *p)
}

// Attributes:
//  - Request
type SentryPolicyServiceImportSentryMappingDataArgs struct {
	Request *TSentryImportMappingDataRequest `thrift:"request,1" json:"request"`
}

func NewSentryPolicyServiceImportSentryMappingDataArgs() *SentryPolicyServiceImportSentryMappingDataArgs {
	return &SentryPolicyServiceImportSentryMappingDataArgs{}
}

var SentryPolicyServiceImportSentryMappingDataArgs_Request_DEFAULT *TSentryImportMappingDataRequest

func (p *SentryPolicyServiceImportSentryMappingDataArgs) GetRequest() *TSentryImportMappingDataRequest {
	if !p.IsSetRequest() {
		return SentryPolicyServiceImportSentryMappingDataArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *SentryPolicyServiceImportSentryMappingDataArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SentryPolicyServiceImportSentryMappingDataArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryPolicyServiceImportSentryMappingDataArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &TSentryImportMappingDataRequest{
		ProtocolVersion: 1,
	}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *SentryPolicyServiceImportSentryMappingDataArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("import_sentry_mapping_data_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryPolicyServiceImportSentryMappingDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *SentryPolicyServiceImportSentryMappingDataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryPolicyServiceImportSentryMappingDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SentryPolicyServiceImportSentryMappingDataResult struct {
	Success *TSentryImportMappingDataResponse `thrift:"success,0" json:"success,omitempty"`
}

func NewSentryPolicyServiceImportSentryMappingDataResult() *SentryPolicyServiceImportSentryMappingDataResult {
	return &SentryPolicyServiceImportSentryMappingDataResult{}
}

var SentryPolicyServiceImportSentryMappingDataResult_Success_DEFAULT *TSentryImportMappingDataResponse

func (p *SentryPolicyServiceImportSentryMappingDataResult) GetSuccess() *TSentryImportMappingDataResponse {
	if !p.IsSetSuccess() {
		return SentryPolicyServiceImportSentryMappingDataResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SentryPolicyServiceImportSentryMappingDataResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SentryPolicyServiceImportSentryMappingDataResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SentryPolicyServiceImportSentryMappingDataResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TSentryImportMappingDataResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SentryPolicyServiceImportSentryMappingDataResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("import_sentry_mapping_data_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SentryPolicyServiceImportSentryMappingDataResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SentryPolicyServiceImportSentryMappingDataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentryPolicyServiceImportSentryMappingDataResult(%+v)", *p)
}
